
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ADD_ASSIGN AND_ASSIGN AUTO BITWISE_AND BITWISE_NOT BITWISE_OR BITWISE_XOR BOOL BREAK CASE CHAR CHAR_CONSTANT CLASS COLON COMMA CONST CONTINUE DEC_OP DEFAULT DIVIDE DIV_ASSIGN DO DOT DOUBLE ELSE EQ EQ_OP FLOAT FLOAT_CONSTANT FOR GE_OP GOTO GREATER HEX_CONSTANT IDENTIFIER IF INC_OP INHERITANCE_OP INT INT_CONSTANT LEFT_ASSIGN LEFT_BRACKET LEFT_CURLY_BRACKET LEFT_OP LEFT_THIRD_BRACKET LESS LE_OP LOGICAL_AND_OP LOGICAL_NOT LOGICAL_OR_OP LONG MINUS MOD MOD_ASSIGN MULTIPLY MUL_ASSIGN NE_OP OCT_CONSTANT OR_ASSIGN PLUS PRIVATE PROTECTED PTR_OP PUBLIC QUESTION RETURN RIGHT_ASSIGN RIGHT_BRACKET RIGHT_CURLY_BRACKET RIGHT_OP RIGHT_THIRD_BRACKET SEMICOLON SHORT SIGNED SIZEOF STRING_LITERAL STRUCT SUB_ASSIGN SWITCH TYPEDEF TYPE_NAME UNSIGNED VOID WHILE XOR_ASSIGNprimary_expression : IDENTIFIER\n    | FLOAT_CONSTANT\n    | HEX_CONSTANT\n    | OCT_CONSTANT\n    | INT_CONSTANT\n    | CHAR_CONSTANT\n    | STRING_LITERAL\n    | LEFT_BRACKET expression RIGHT_BRACKETpostfix_expression : primary_expression\n    | postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET\n    | postfix_expression LEFT_BRACKET RIGHT_BRACKET\n    | postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET\n    | postfix_expression DOT IDENTIFIER\n    | postfix_expression PTR_OP IDENTIFIER\n    | postfix_expression INC_OP\n    | postfix_expression DEC_OPargument_expression_list : assignment_expression\n    | argument_expression_list COMMA assignment_expressionunary_expression : postfix_expression\n    | INC_OP unary_expression\n    | DEC_OP unary_expression\n    | unary_operator cast_expression\n    | SIZEOF unary_expression\n    | SIZEOF LEFT_BRACKET type_name RIGHT_BRACKETunary_operator : BITWISE_AND\n    | MULTIPLY\n    | PLUS\n    | MINUS\n    | BITWISE_NOT\n    | LOGICAL_NOTcast_expression : unary_expression\n    | '(' type_name ')' cast_expression\n    multiplicative_expression : cast_expression\n    | multiplicative_expression MULTIPLY cast_expression\n    | multiplicative_expression DIVIDE cast_expression\n    | multiplicative_expression MOD cast_expression\n    additive_expression : multiplicative_expression\n    | additive_expression PLUS multiplicative_expression\n    | additive_expression MINUS multiplicative_expression\n    shift_expression : additive_expression\n    | shift_expression LEFT_OP additive_expression\n    | shift_expression RIGHT_OP additive_expression\n    relational_expression : shift_expression\n    | relational_expression LESS shift_expression\n    | relational_expression GREATER shift_expression\n    | relational_expression LE_OP shift_expression\n    | relational_expression GE_OP shift_expression\n    equality_expression : relational_expression\n    | equality_expression EQ_OP relational_expression\n    | equality_expression NE_OP relational_expression\n    and_expression : equality_expression\n    | and_expression BITWISE_AND equality_expression\n    exclusive_or_expression : and_expression\n    | exclusive_or_expression BITWISE_XOR and_expression\n    inclusive_or_expression : exclusive_or_expression\n    | inclusive_or_expression BITWISE_OR exclusive_or_expression\n    logical_and_expression : inclusive_or_expression\n    | logical_and_expression LOGICAL_AND_OP inclusive_or_expression\n    logical_or_expression : logical_and_expression\n    | logical_or_expression LOGICAL_OR_OP logical_and_expression\n    conditional_expression : logical_or_expression\n    | logical_or_expression QUESTION expression COLON conditional_expressionassignment_expression : conditional_expression\n    | unary_expression assignment_operator assignment_expression\n    assignment_operator : EQ\n    | MUL_ASSIGN\n    | DIV_ASSIGN\n    | MOD_ASSIGN\n    | ADD_ASSIGN\n    | SUB_ASSIGN\n    | LEFT_ASSIGN\n    | RIGHT_ASSIGN\n    | AND_ASSIGN\n    | XOR_ASSIGN\n    | OR_ASSIGN\n    expression : assignment_expression\n    | expression COMMA assignment_expressionconstant_expression : conditional_expressiondeclaration : declaration_specifiers SEMICOLON\n    | declaration_specifiers init_declarator_list SEMICOLON\n    declaration_specifiers : storage_class_specifier declaration_specifiers\n    | storage_class_specifier\n    | type_specifier declaration_specifiers\n    | type_specifier\n    | type_qualifier declaration_specifiers\n    | type_qualifier\n    init_declarator_list : init_declarator\n    | init_declarator_list COMMA init_declaratorinit_declarator : declarator\n    | declarator EQ initializerstorage_class_specifier : TYPEDEF\n    | AUTOtype_specifier : VOID\n    | CHAR\n    | SHORT\n    | INT\n    | LONG\n    | FLOAT\n    | DOUBLE\n    | SIGNED\n    | UNSIGNED\n    | BOOL\n    | struct_specifier\n    | class_definition\n    | TYPE_NAME\n    struct_specifier : STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET\n    | STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET\n    | STRUCT IDENTIFIERstruct_declaration_list : struct_declaration\n    | struct_declaration_list struct_declarationstruct_declaration : specifier_qualifier_list struct_declarator_list SEMICOLONspecifier_qualifier_list : type_specifier specifier_qualifier_list\n    | type_specifier\n    | type_qualifier specifier_qualifier_list\n    | type_qualifierstruct_declarator_list : struct_declarator\n    | struct_declarator_list COMMA struct_declaratorstruct_declarator : declarator\n    | COLON constant_expression\n    | declarator COLON constant_expressiontype_qualifier : CONSTdeclarator : pointer direct_declarator\n    | direct_declaratordirect_declarator : IDENTIFIER\n    | LEFT_BRACKET declarator RIGHT_BRACKET\n    | direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET\n    | direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET\n    | direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET\n    | direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET\n    | direct_declarator LEFT_BRACKET RIGHT_BRACKETpointer : MULTIPLY\n    | MULTIPLY type_qualifier_list\n    | MULTIPLY pointer\n    | MULTIPLY type_qualifier_list pointertype_qualifier_list : type_qualifier\n    | type_qualifier_list type_qualifierparameter_type_list : parameter_listparameter_list : parameter_declaration\n    | parameter_list COMMA parameter_declarationparameter_declaration : declaration_specifiers declarator\n    | declaration_specifiers abstract_declarator\n    | declaration_specifiersidentifier_list : IDENTIFIER\n    | identifier_list COMMA IDENTIFIERtype_name : specifier_qualifier_list\n    | specifier_qualifier_list abstract_declaratorabstract_declarator : pointer\n    | direct_abstract_declarator\n    | pointer direct_abstract_declaratordirect_abstract_declarator : LEFT_BRACKET abstract_declarator RIGHT_BRACKET\n    | LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET\n    | LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET\n    | direct_abstract_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET\n    | direct_abstract_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET\n    | LEFT_BRACKET RIGHT_BRACKET\n    | LEFT_BRACKET parameter_type_list RIGHT_BRACKET\n    | direct_abstract_declarator LEFT_BRACKET RIGHT_BRACKET\n    | direct_abstract_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKETinitializer : assignment_expression\n    | LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET\n    | LEFT_CURLY_BRACKET initializer_list COMMA RIGHT_CURLY_BRACKETinitializer_list : initializer\n    | initializer_list COMMA initializerstatement : labeled_statement\n    | compound_statement\n    | expression_statement\n    | selection_statement\n    | iteration_statement\n    | jump_statementlabeled_statement : IDENTIFIER COLON statement\n    | CASE constant_expression COLON statement\n    | DEFAULT COLON statementcompound_statement : LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET\n    | LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKETblock_item_list : block_item\n    | block_item_list block_itemblock_item : declaration\n    | statement\n    declaration_list : declaration\n    | declaration_list declaration\n    expression_statement : SEMICOLON\n    | expression SEMICOLONselection_statement : IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement\n    | IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement\n    | SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statementiteration_statement : WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement\n    | DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON\n    | FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement\n    | FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statementjump_statement : GOTO IDENTIFIER SEMICOLON\n    | CONTINUE SEMICOLON\n    | BREAK SEMICOLON\n    | RETURN SEMICOLON\n    | RETURN expression SEMICOLONtranslation_unit : external_declaration\n    | translation_unit external_declarationexternal_declaration : function_definition\n    | declarationfunction_definition : declaration_specifiers declarator declaration_list compound_statement\n    | declaration_specifiers declarator compound_statement\n    | declarator declaration_list compound_statement\n    | declarator compound_statementinheritance_specifier : access_specifier IDENTIFIERinheritance_specifier_list : inheritance_specifier\n    | inheritance_specifier_list COMMA inheritance_specifieraccess_specifier : PRIVATE\n    | PUBLIC\n    | PROTECTEDclass_definition_head : CLASS\n    | CLASS INHERITANCE_OP inheritance_specifier_list\n    | CLASS IDENTIFIER\n    | CLASS IDENTIFIER  INHERITANCE_OP inheritance_specifier_listclass_definition : class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET\n    | class_definition_headclass_internal_definition_list : class_internal_definition\n    | class_internal_definition_list class_internal_definitionclass_internal_definition : access_specifier LEFT_CURLY_BRACKET class_member_list RIGHT_CURLY_BRACKET SEMICOLONclass_member_list : class_member\n    | class_member_list class_memberclass_member : function_definition\n    | declaration"
    
_lr_action_items = {'IDENTIFIER':([0,9,16,17,18,20,23,24,25,26,27,28,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,132,136,138,139,140,141,145,146,149,153,155,156,157,163,164,165,166,167,168,175,179,180,181,182,183,184,192,193,199,202,203,204,205,208,213,214,215,216,218,220,221,226,227,229,231,232,234,235,236,237,238,240,251,253,257,259,260,264,267,268,269,270,271,273,274,275,276,277,278,279,280,281,282,283,284,286,294,297,300,303,305,306,307,309,310,311,312,313,315,317,318,319,323,324,325,330,331,332,334,335,339,340,343,344,345,351,353,354,355,],[2,2,2,2,2,2,-25,-26,-27,-28,-29,-30,2,2,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,2,2,2,2,112,113,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,-113,-115,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,141,-214,145,2,-131,2,-112,-114,-108,-211,2,2,2,-132,-133,-135,201,-82,-84,-86,-91,-92,201,-206,-207,-208,-210,-204,220,-134,-136,201,201,-81,-83,-85,-107,2,201,201,-213,201,-203,-212,2,246,-106,201,2,201,-218,-220,-221,201,-205,-219,-79,-202,285,201,299,-200,2,-80,201,-201,-173,285,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,2,316,2,-199,2,-174,-176,285,285,-182,2,2,2,2,-191,-192,-193,-170,285,-172,2,-190,-194,2,-171,2,2,-183,-185,-186,-188,-184,-187,-189,]),'FLOAT_CONSTANT':([0,9,16,17,18,20,23,24,25,26,27,28,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,132,138,146,149,153,213,226,232,253,259,268,269,273,274,275,276,277,278,279,280,281,282,283,284,286,297,303,305,306,307,309,310,311,312,313,315,317,318,319,323,324,325,330,331,332,334,335,339,340,343,344,345,351,353,354,355,],[3,3,3,3,3,3,-25,-26,-27,-28,-29,-30,3,3,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,-79,3,3,-80,-173,3,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,3,3,3,-174,-176,3,3,-182,3,3,3,3,-191,-192,-193,-170,3,-172,3,-190,-194,3,-171,3,3,-183,-185,-186,-188,-184,-187,-189,]),'HEX_CONSTANT':([0,9,16,17,18,20,23,24,25,26,27,28,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,132,138,146,149,153,213,226,232,253,259,268,269,273,274,275,276,277,278,279,280,281,282,283,284,286,297,303,305,306,307,309,310,311,312,313,315,317,318,319,323,324,325,330,331,332,334,335,339,340,343,344,345,351,353,354,355,],[4,4,4,4,4,4,-25,-26,-27,-28,-29,-30,4,4,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,-79,4,4,-80,-173,4,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,4,4,4,-174,-176,4,4,-182,4,4,4,4,-191,-192,-193,-170,4,-172,4,-190,-194,4,-171,4,4,-183,-185,-186,-188,-184,-187,-189,]),'OCT_CONSTANT':([0,9,16,17,18,20,23,24,25,26,27,28,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,132,138,146,149,153,213,226,232,253,259,268,269,273,274,275,276,277,278,279,280,281,282,283,284,286,297,303,305,306,307,309,310,311,312,313,315,317,318,319,323,324,325,330,331,332,334,335,339,340,343,344,345,351,353,354,355,],[5,5,5,5,5,5,-25,-26,-27,-28,-29,-30,5,5,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,-79,5,5,-80,-173,5,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,5,5,5,-174,-176,5,5,-182,5,5,5,5,-191,-192,-193,-170,5,-172,5,-190,-194,5,-171,5,5,-183,-185,-186,-188,-184,-187,-189,]),'INT_CONSTANT':([0,9,16,17,18,20,23,24,25,26,27,28,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,132,138,146,149,153,213,226,232,253,259,268,269,273,274,275,276,277,278,279,280,281,282,283,284,286,297,303,305,306,307,309,310,311,312,313,315,317,318,319,323,324,325,330,331,332,334,335,339,340,343,344,345,351,353,354,355,],[6,6,6,6,6,6,-25,-26,-27,-28,-29,-30,6,6,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-79,6,6,-80,-173,6,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,6,6,6,-174,-176,6,6,-182,6,6,6,6,-191,-192,-193,-170,6,-172,6,-190,-194,6,-171,6,6,-183,-185,-186,-188,-184,-187,-189,]),'CHAR_CONSTANT':([0,9,16,17,18,20,23,24,25,26,27,28,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,132,138,146,149,153,213,226,232,253,259,268,269,273,274,275,276,277,278,279,280,281,282,283,284,286,297,303,305,306,307,309,310,311,312,313,315,317,318,319,323,324,325,330,331,332,334,335,339,340,343,344,345,351,353,354,355,],[7,7,7,7,7,7,-25,-26,-27,-28,-29,-30,7,7,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-79,7,7,-80,-173,7,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,7,7,7,-174,-176,7,7,-182,7,7,7,7,-191,-192,-193,-170,7,-172,7,-190,-194,7,-171,7,7,-183,-185,-186,-188,-184,-187,-189,]),'STRING_LITERAL':([0,9,16,17,18,20,23,24,25,26,27,28,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,132,138,146,149,153,213,226,232,253,259,268,269,273,274,275,276,277,278,279,280,281,282,283,284,286,297,303,305,306,307,309,310,311,312,313,315,317,318,319,323,324,325,330,331,332,334,335,339,340,343,344,345,351,353,354,355,],[8,8,8,8,8,8,-25,-26,-27,-28,-29,-30,8,8,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-79,8,8,-80,-173,8,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,8,8,8,-174,-176,8,8,-182,8,8,8,8,-191,-192,-193,-170,8,-172,8,-190,-194,8,-171,8,8,-183,-185,-186,-188,-184,-187,-189,]),'LEFT_BRACKET':([0,2,3,4,5,6,7,8,9,15,16,17,18,20,22,23,24,25,26,27,28,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,58,59,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,109,112,113,132,134,135,136,137,138,139,140,141,145,146,147,148,149,152,153,155,156,157,159,163,164,165,166,167,168,169,175,182,183,188,190,192,193,194,195,199,200,201,202,203,204,205,206,208,213,214,215,216,218,220,221,222,223,225,226,229,231,232,234,235,236,237,238,240,242,244,247,251,253,257,259,260,261,262,263,267,268,269,270,271,273,274,275,276,277,278,279,280,281,282,283,284,285,286,289,290,291,293,297,300,303,305,306,307,309,310,311,312,313,315,317,318,319,323,324,325,329,330,331,332,334,335,339,340,343,344,345,351,353,354,355,],[9,-1,-2,-3,-4,-5,-6,-7,9,55,9,9,9,65,-9,-25,-26,-27,-28,-29,-30,-8,9,9,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,9,9,9,9,-15,-16,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,137,-113,-115,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,-11,-13,-14,9,137,154,-131,137,9,-112,-114,-108,-211,9,-10,-12,9,154,9,-132,-133,-135,-155,202,-82,-84,-86,-91,-92,-151,215,-210,-204,-153,-157,-134,-136,-150,-156,202,227,-124,202,-81,-83,-85,-152,-107,9,215,215,-213,215,-203,-212,-154,-158,227,9,-106,215,9,215,-218,-220,-221,215,-205,-127,-130,-125,-219,-79,-202,9,215,-126,-128,-129,-200,9,-80,215,-201,-173,9,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-1,9,311,312,313,315,9,-199,9,-174,-176,9,9,-182,9,9,9,9,-191,-192,-193,-170,9,-172,339,9,-190,-194,9,-171,9,9,-183,-185,-186,-188,-184,-187,-189,]),'$end':([1,2,3,4,5,6,7,8,38,],[0,-1,-2,-3,-4,-5,-6,-7,-8,]),'LEFT_THIRD_BRACKET':([2,3,4,5,6,7,8,15,22,38,58,59,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,109,112,113,134,135,136,137,139,140,141,145,147,148,152,155,156,157,159,163,164,165,166,167,168,169,182,183,188,190,192,193,194,195,199,200,201,202,203,204,205,206,208,216,220,221,222,223,225,229,240,242,244,247,261,262,263,285,],[-1,-2,-3,-4,-5,-6,-7,54,-9,-8,-15,-16,138,-113,-115,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,-11,-13,-14,138,153,-131,138,-112,-114,-108,-211,-10,-12,153,-132,-133,-135,-155,138,-82,-84,-86,-91,-92,-151,-210,-204,-153,-157,-134,-136,-150,-156,138,226,-124,138,-81,-83,-85,-152,-107,-213,-203,-212,-154,-158,226,-106,-205,-127,-130,-125,-126,-128,-129,-1,]),'DOT':([2,3,4,5,6,7,8,15,22,38,58,59,109,112,113,147,148,285,],[-1,-2,-3,-4,-5,-6,-7,56,-9,-8,-15,-16,-11,-13,-14,-10,-12,-1,]),'PTR_OP':([2,3,4,5,6,7,8,15,22,38,58,59,109,112,113,147,148,285,],[-1,-2,-3,-4,-5,-6,-7,57,-9,-8,-15,-16,-11,-13,-14,-10,-12,-1,]),'INC_OP':([2,3,4,5,6,7,8,9,15,16,17,18,20,22,23,24,25,26,27,28,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,58,59,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,109,112,113,132,138,146,147,148,149,153,213,226,232,253,259,268,269,273,274,275,276,277,278,279,280,281,282,283,284,285,286,297,303,305,306,307,309,310,311,312,313,315,317,318,319,323,324,325,330,331,332,334,335,339,340,343,344,345,351,353,354,355,],[-1,-2,-3,-4,-5,-6,-7,16,58,16,16,16,16,-9,-25,-26,-27,-28,-29,-30,-8,16,16,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,16,16,16,16,-15,-16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-11,-13,-14,16,16,16,-10,-12,16,16,16,16,16,-79,16,16,-80,-173,16,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-1,16,16,16,-174,-176,16,16,-182,16,16,16,16,-191,-192,-193,-170,16,-172,16,-190,-194,16,-171,16,16,-183,-185,-186,-188,-184,-187,-189,]),'DEC_OP':([2,3,4,5,6,7,8,9,15,16,17,18,20,22,23,24,25,26,27,28,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,58,59,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,109,112,113,132,138,146,147,148,149,153,213,226,232,253,259,268,269,273,274,275,276,277,278,279,280,281,282,283,284,285,286,297,303,305,306,307,309,310,311,312,313,315,317,318,319,323,324,325,330,331,332,334,335,339,340,343,344,345,351,353,354,355,],[-1,-2,-3,-4,-5,-6,-7,17,59,17,17,17,17,-9,-25,-26,-27,-28,-29,-30,-8,17,17,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,17,17,17,17,-15,-16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-11,-13,-14,17,17,17,-10,-12,17,17,17,17,17,-79,17,17,-80,-173,17,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-1,17,17,17,-174,-176,17,17,-182,17,17,17,17,-191,-192,-193,-170,17,-172,17,-190,-194,17,-171,17,17,-183,-185,-186,-188,-184,-187,-189,]),'EQ':([2,3,4,5,6,7,8,13,15,22,38,58,59,60,61,62,63,64,109,112,113,147,148,150,151,200,201,225,242,244,247,252,261,262,263,285,298,],[-1,-2,-3,-4,-5,-6,-7,41,-19,-9,-8,-15,-16,-20,-21,-22,-31,-23,-11,-13,-14,-10,-12,-24,-32,-123,-124,-122,-127,-130,-125,268,-126,-128,-129,-1,268,]),'MUL_ASSIGN':([2,3,4,5,6,7,8,13,15,22,38,58,59,60,61,62,63,64,109,112,113,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,42,-19,-9,-8,-15,-16,-20,-21,-22,-31,-23,-11,-13,-14,-10,-12,-24,-32,-1,]),'DIV_ASSIGN':([2,3,4,5,6,7,8,13,15,22,38,58,59,60,61,62,63,64,109,112,113,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,43,-19,-9,-8,-15,-16,-20,-21,-22,-31,-23,-11,-13,-14,-10,-12,-24,-32,-1,]),'MOD_ASSIGN':([2,3,4,5,6,7,8,13,15,22,38,58,59,60,61,62,63,64,109,112,113,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,44,-19,-9,-8,-15,-16,-20,-21,-22,-31,-23,-11,-13,-14,-10,-12,-24,-32,-1,]),'ADD_ASSIGN':([2,3,4,5,6,7,8,13,15,22,38,58,59,60,61,62,63,64,109,112,113,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,45,-19,-9,-8,-15,-16,-20,-21,-22,-31,-23,-11,-13,-14,-10,-12,-24,-32,-1,]),'SUB_ASSIGN':([2,3,4,5,6,7,8,13,15,22,38,58,59,60,61,62,63,64,109,112,113,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,46,-19,-9,-8,-15,-16,-20,-21,-22,-31,-23,-11,-13,-14,-10,-12,-24,-32,-1,]),'LEFT_ASSIGN':([2,3,4,5,6,7,8,13,15,22,38,58,59,60,61,62,63,64,109,112,113,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,47,-19,-9,-8,-15,-16,-20,-21,-22,-31,-23,-11,-13,-14,-10,-12,-24,-32,-1,]),'RIGHT_ASSIGN':([2,3,4,5,6,7,8,13,15,22,38,58,59,60,61,62,63,64,109,112,113,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,48,-19,-9,-8,-15,-16,-20,-21,-22,-31,-23,-11,-13,-14,-10,-12,-24,-32,-1,]),'AND_ASSIGN':([2,3,4,5,6,7,8,13,15,22,38,58,59,60,61,62,63,64,109,112,113,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,49,-19,-9,-8,-15,-16,-20,-21,-22,-31,-23,-11,-13,-14,-10,-12,-24,-32,-1,]),'XOR_ASSIGN':([2,3,4,5,6,7,8,13,15,22,38,58,59,60,61,62,63,64,109,112,113,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,50,-19,-9,-8,-15,-16,-20,-21,-22,-31,-23,-11,-13,-14,-10,-12,-24,-32,-1,]),'OR_ASSIGN':([2,3,4,5,6,7,8,13,15,22,38,58,59,60,61,62,63,64,109,112,113,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,51,-19,-9,-8,-15,-16,-20,-21,-22,-31,-23,-11,-13,-14,-10,-12,-24,-32,-1,]),'MULTIPLY':([2,3,4,5,6,7,8,9,13,15,16,17,18,19,20,22,23,24,25,26,27,28,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,109,112,113,127,128,129,130,131,132,136,137,138,139,140,141,145,146,147,148,149,150,151,153,155,157,163,164,165,166,167,168,175,182,183,193,202,203,204,205,208,213,215,216,218,220,221,226,229,231,232,234,235,236,237,238,240,251,253,257,259,260,267,268,269,270,271,273,274,275,276,277,278,279,280,281,282,283,284,285,286,297,300,303,305,306,307,309,310,311,312,313,315,317,318,319,323,324,325,330,331,332,334,335,339,340,343,344,345,351,353,354,355,],[-1,-2,-3,-4,-5,-6,-7,24,-31,-19,24,24,24,-33,24,-9,-25,-26,-27,-28,-29,-30,80,-8,24,24,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,24,24,24,24,-15,-16,-20,-21,-22,-31,-23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,136,-113,-115,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,-11,-13,-14,80,80,-34,-35,-36,24,136,136,24,-112,-114,-108,-211,24,-10,-12,24,-24,-32,24,136,-135,136,-82,-84,-86,-91,-92,136,-210,-204,-136,136,-81,-83,-85,-107,24,136,-213,136,-203,-212,24,-106,136,24,136,-218,-220,-221,136,-205,-219,-79,-202,24,136,-200,24,-80,136,-201,-173,24,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-1,24,24,-199,24,-174,-176,24,24,-182,24,24,24,24,-191,-192,-193,-170,24,-172,24,-190,-194,24,-171,24,24,-183,-185,-186,-188,-184,-187,-189,]),'DIVIDE':([2,3,4,5,6,7,8,13,15,19,22,36,38,58,59,60,61,62,63,64,109,112,113,127,128,129,130,131,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,-31,-19,-33,-9,81,-8,-15,-16,-20,-21,-22,-31,-23,-11,-13,-14,81,81,-34,-35,-36,-10,-12,-24,-32,-1,]),'MOD':([2,3,4,5,6,7,8,13,15,19,22,36,38,58,59,60,61,62,63,64,109,112,113,127,128,129,130,131,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,-31,-19,-33,-9,82,-8,-15,-16,-20,-21,-22,-31,-23,-11,-13,-14,82,82,-34,-35,-36,-10,-12,-24,-32,-1,]),'PLUS':([2,3,4,5,6,7,8,9,13,15,16,17,18,19,20,22,23,24,25,26,27,28,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,109,112,113,125,126,127,128,129,130,131,132,138,146,147,148,149,150,151,153,213,226,232,253,259,268,269,273,274,275,276,277,278,279,280,281,282,283,284,285,286,297,303,305,306,307,309,310,311,312,313,315,317,318,319,323,324,325,330,331,332,334,335,339,340,343,344,345,351,353,354,355,],[-1,-2,-3,-4,-5,-6,-7,25,-31,-19,25,25,25,-33,25,-9,-25,-26,-27,-28,-29,-30,78,-37,-8,25,25,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,25,25,25,25,-15,-16,-20,-21,-22,-31,-23,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-11,-13,-14,78,78,-38,-39,-34,-35,-36,25,25,25,-10,-12,25,-24,-32,25,25,25,25,-79,25,25,-80,-173,25,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-1,25,25,25,-174,-176,25,25,-182,25,25,25,25,-191,-192,-193,-170,25,-172,25,-190,-194,25,-171,25,25,-183,-185,-186,-188,-184,-187,-189,]),'MINUS':([2,3,4,5,6,7,8,9,13,15,16,17,18,19,20,22,23,24,25,26,27,28,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,109,112,113,125,126,127,128,129,130,131,132,138,146,147,148,149,150,151,153,213,226,232,253,259,268,269,273,274,275,276,277,278,279,280,281,282,283,284,285,286,297,303,305,306,307,309,310,311,312,313,315,317,318,319,323,324,325,330,331,332,334,335,339,340,343,344,345,351,353,354,355,],[-1,-2,-3,-4,-5,-6,-7,26,-31,-19,26,26,26,-33,26,-9,-25,-26,-27,-28,-29,-30,79,-37,-8,26,26,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,26,26,26,26,-15,-16,-20,-21,-22,-31,-23,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-11,-13,-14,79,79,-38,-39,-34,-35,-36,26,26,26,-10,-12,26,-24,-32,26,26,26,26,-79,26,26,-80,-173,26,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-1,26,26,26,-174,-176,26,26,-182,26,26,26,26,-191,-192,-193,-170,26,-172,26,-190,-194,26,-171,26,26,-183,-185,-186,-188,-184,-187,-189,]),'LEFT_OP':([2,3,4,5,6,7,8,13,15,19,22,34,35,36,38,58,59,60,61,62,63,64,109,112,113,121,122,123,124,125,126,127,128,129,130,131,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,-31,-19,-33,-9,76,-40,-37,-8,-15,-16,-20,-21,-22,-31,-23,-11,-13,-14,76,76,76,76,-41,-42,-38,-39,-34,-35,-36,-10,-12,-24,-32,-1,]),'RIGHT_OP':([2,3,4,5,6,7,8,13,15,19,22,34,35,36,38,58,59,60,61,62,63,64,109,112,113,121,122,123,124,125,126,127,128,129,130,131,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,-31,-19,-33,-9,77,-40,-37,-8,-15,-16,-20,-21,-22,-31,-23,-11,-13,-14,77,77,77,77,-41,-42,-38,-39,-34,-35,-36,-10,-12,-24,-32,-1,]),'LESS':([2,3,4,5,6,7,8,13,15,19,22,33,34,35,36,38,58,59,60,61,62,63,64,109,112,113,119,120,121,122,123,124,125,126,127,128,129,130,131,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,-31,-19,-33,-9,72,-43,-40,-37,-8,-15,-16,-20,-21,-22,-31,-23,-11,-13,-14,72,72,-44,-45,-46,-47,-41,-42,-38,-39,-34,-35,-36,-10,-12,-24,-32,-1,]),'GREATER':([2,3,4,5,6,7,8,13,15,19,22,33,34,35,36,38,58,59,60,61,62,63,64,109,112,113,119,120,121,122,123,124,125,126,127,128,129,130,131,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,-31,-19,-33,-9,73,-43,-40,-37,-8,-15,-16,-20,-21,-22,-31,-23,-11,-13,-14,73,73,-44,-45,-46,-47,-41,-42,-38,-39,-34,-35,-36,-10,-12,-24,-32,-1,]),'LE_OP':([2,3,4,5,6,7,8,13,15,19,22,33,34,35,36,38,58,59,60,61,62,63,64,109,112,113,119,120,121,122,123,124,125,126,127,128,129,130,131,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,-31,-19,-33,-9,74,-43,-40,-37,-8,-15,-16,-20,-21,-22,-31,-23,-11,-13,-14,74,74,-44,-45,-46,-47,-41,-42,-38,-39,-34,-35,-36,-10,-12,-24,-32,-1,]),'GE_OP':([2,3,4,5,6,7,8,13,15,19,22,33,34,35,36,38,58,59,60,61,62,63,64,109,112,113,119,120,121,122,123,124,125,126,127,128,129,130,131,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,-31,-19,-33,-9,75,-43,-40,-37,-8,-15,-16,-20,-21,-22,-31,-23,-11,-13,-14,75,75,-44,-45,-46,-47,-41,-42,-38,-39,-34,-35,-36,-10,-12,-24,-32,-1,]),'EQ_OP':([2,3,4,5,6,7,8,13,15,19,22,32,33,34,35,36,38,58,59,60,61,62,63,64,109,112,113,118,119,120,121,122,123,124,125,126,127,128,129,130,131,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,-31,-19,-33,-9,70,-48,-43,-40,-37,-8,-15,-16,-20,-21,-22,-31,-23,-11,-13,-14,70,-49,-50,-44,-45,-46,-47,-41,-42,-38,-39,-34,-35,-36,-10,-12,-24,-32,-1,]),'NE_OP':([2,3,4,5,6,7,8,13,15,19,22,32,33,34,35,36,38,58,59,60,61,62,63,64,109,112,113,118,119,120,121,122,123,124,125,126,127,128,129,130,131,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,-31,-19,-33,-9,71,-48,-43,-40,-37,-8,-15,-16,-20,-21,-22,-31,-23,-11,-13,-14,71,-49,-50,-44,-45,-46,-47,-41,-42,-38,-39,-34,-35,-36,-10,-12,-24,-32,-1,]),'BITWISE_AND':([2,3,4,5,6,7,8,9,13,15,16,17,18,19,20,22,23,24,25,26,27,28,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,109,112,113,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,138,146,147,148,149,150,151,153,213,226,232,253,259,268,269,273,274,275,276,277,278,279,280,281,282,283,284,285,286,297,303,305,306,307,309,310,311,312,313,315,317,318,319,323,324,325,330,331,332,334,335,339,340,343,344,345,351,353,354,355,],[-1,-2,-3,-4,-5,-6,-7,23,-31,-19,23,23,23,-33,23,-9,-25,-26,-27,-28,-29,-30,69,-51,-48,-43,-40,-37,-8,23,23,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,23,23,23,23,-15,-16,-20,-21,-22,-31,-23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-11,-13,-14,69,-52,-49,-50,-44,-45,-46,-47,-41,-42,-38,-39,-34,-35,-36,23,23,23,-10,-12,23,-24,-32,23,23,23,23,-79,23,23,-80,-173,23,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-1,23,23,23,-174,-176,23,23,-182,23,23,23,23,-191,-192,-193,-170,23,-172,23,-190,-194,23,-171,23,23,-183,-185,-186,-188,-184,-187,-189,]),'BITWISE_XOR':([2,3,4,5,6,7,8,13,15,19,22,30,31,32,33,34,35,36,38,58,59,60,61,62,63,64,109,112,113,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,-31,-19,-33,-9,68,-53,-51,-48,-43,-40,-37,-8,-15,-16,-20,-21,-22,-31,-23,-11,-13,-14,68,-54,-52,-49,-50,-44,-45,-46,-47,-41,-42,-38,-39,-34,-35,-36,-10,-12,-24,-32,-1,]),'BITWISE_OR':([2,3,4,5,6,7,8,13,15,19,22,29,30,31,32,33,34,35,36,38,58,59,60,61,62,63,64,109,112,113,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,-31,-19,-33,-9,67,-55,-53,-51,-48,-43,-40,-37,-8,-15,-16,-20,-21,-22,-31,-23,-11,-13,-14,67,-56,-54,-52,-49,-50,-44,-45,-46,-47,-41,-42,-38,-39,-34,-35,-36,-10,-12,-24,-32,-1,]),'LOGICAL_AND_OP':([2,3,4,5,6,7,8,13,15,19,21,22,29,30,31,32,33,34,35,36,38,58,59,60,61,62,63,64,107,109,112,113,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,-31,-19,-33,66,-9,-57,-55,-53,-51,-48,-43,-40,-37,-8,-15,-16,-20,-21,-22,-31,-23,66,-11,-13,-14,-58,-56,-54,-52,-49,-50,-44,-45,-46,-47,-41,-42,-38,-39,-34,-35,-36,-10,-12,-24,-32,-1,]),'QUESTION':([2,3,4,5,6,7,8,13,14,15,19,21,22,29,30,31,32,33,34,35,36,38,58,59,60,61,62,63,64,107,109,112,113,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,-31,52,-19,-33,-59,-9,-57,-55,-53,-51,-48,-43,-40,-37,-8,-15,-16,-20,-21,-22,-31,-23,-60,-11,-13,-14,-58,-56,-54,-52,-49,-50,-44,-45,-46,-47,-41,-42,-38,-39,-34,-35,-36,-10,-12,-24,-32,-1,]),'LOGICAL_OR_OP':([2,3,4,5,6,7,8,13,14,15,19,21,22,29,30,31,32,33,34,35,36,38,58,59,60,61,62,63,64,107,109,112,113,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,147,148,150,151,285,],[-1,-2,-3,-4,-5,-6,-7,-31,53,-19,-33,-59,-9,-57,-55,-53,-51,-48,-43,-40,-37,-8,-15,-16,-20,-21,-22,-31,-23,-60,-11,-13,-14,-58,-56,-54,-52,-49,-50,-44,-45,-46,-47,-41,-42,-38,-39,-34,-35,-36,-10,-12,-24,-32,-1,]),'RIGHT_BRACKET':([2,3,4,5,6,7,8,10,11,12,13,14,15,19,21,22,29,30,31,32,33,34,35,36,38,55,58,59,60,61,62,63,64,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,105,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,134,135,136,137,139,140,141,145,147,148,150,151,152,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,182,183,186,187,188,190,191,192,193,194,195,197,198,199,200,201,202,203,204,205,206,208,216,220,221,222,223,224,225,227,228,229,240,242,243,244,245,246,247,261,262,263,278,299,310,326,327,328,340,346,348,],[-1,-2,-3,-4,-5,-6,-7,38,-76,-63,-31,-61,-19,-33,-59,-9,-57,-55,-53,-51,-48,-43,-40,-37,-8,109,-15,-16,-20,-21,-22,-31,-23,-145,-113,-115,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,-77,-64,-60,-11,148,-17,-13,-14,150,-58,-56,-54,-52,-49,-50,-44,-45,-46,-47,-41,-42,-38,-39,-34,-35,-36,-146,-147,-148,-131,159,-112,-114,-108,-211,-10,-12,-24,-32,-149,190,-132,-133,-135,194,-155,195,-137,-138,-142,-82,-84,-86,-91,-92,-151,-210,-204,-62,-18,-153,-157,223,-134,-136,-150,-156,-140,-141,-147,-123,-124,159,-81,-83,-85,-152,-107,-213,-203,-212,-154,-158,-139,-122,244,247,-106,-205,-127,262,-130,263,-143,-125,-126,-128,-129,-181,-144,-182,336,337,338,347,350,352,]),'COMMA':([2,3,4,5,6,7,8,10,11,12,13,14,15,19,21,22,29,30,31,32,33,34,35,36,38,58,59,60,61,62,63,64,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,135,136,141,145,147,148,150,151,152,155,156,157,159,161,162,163,164,165,166,167,168,169,171,182,183,186,187,188,190,192,193,194,195,197,198,199,200,201,203,204,205,206,208,210,211,212,216,220,221,222,223,224,225,229,233,240,242,244,245,246,247,248,249,252,254,255,261,262,263,285,288,298,299,301,302,304,320,321,322,326,327,328,333,341,342,346,348,],[-1,-2,-3,-4,-5,-6,-7,39,-76,-63,-31,-61,-19,-33,-59,-9,-57,-55,-53,-51,-48,-43,-40,-37,-8,-15,-16,-20,-21,-22,-31,-23,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,-77,-64,39,-60,39,-11,149,-17,-13,-14,-58,-56,-54,-52,-49,-50,-44,-45,-46,-47,-41,-42,-38,-39,-34,-35,-36,-148,-131,-108,-211,-10,-12,-24,-32,-149,-132,-133,-135,-155,196,-138,-142,-82,-84,-86,-91,-92,-151,-78,219,-204,-62,-18,-153,-157,-134,-136,-150,-156,-140,-141,-147,-123,-124,-81,-83,-85,-152,-107,231,-116,-118,-213,-203,219,-154,-158,-139,-122,-106,-119,-205,-127,-130,264,-143,-125,-117,-120,-89,270,-87,-126,-128,-129,-1,39,-89,-144,-90,-159,-88,39,334,-162,39,39,39,-160,-161,-163,39,39,]),'COLON':([2,3,4,5,6,7,8,11,12,13,14,15,19,21,22,29,30,31,32,33,34,35,36,38,58,59,60,61,62,63,64,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,105,106,107,109,112,113,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,140,141,145,147,148,150,151,171,175,182,183,186,200,201,208,212,216,220,221,225,229,231,240,242,244,247,261,262,263,285,287,308,],[-1,-2,-3,-4,-5,-6,-7,-76,-63,-31,-61,-19,-33,-59,-9,-57,-55,-53,-51,-48,-43,-40,-37,-8,-15,-16,-20,-21,-22,-31,-23,-113,-115,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,-77,-64,146,-60,-11,-13,-14,-58,-56,-54,-52,-49,-50,-44,-45,-46,-47,-41,-42,-38,-39,-34,-35,-36,-112,-114,-108,-211,-10,-12,-24,-32,-78,213,-210,-204,-62,-123,-124,-107,232,-213,-203,-212,-122,-106,213,-205,-127,-130,-125,-126,-128,-129,307,309,324,]),'RIGHT_THIRD_BRACKET':([2,3,4,5,6,7,8,11,12,13,14,15,19,21,22,29,30,31,32,33,34,35,36,38,58,59,60,61,62,63,64,104,105,107,108,109,112,113,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,138,147,148,150,151,153,170,171,186,189,226,241,],[-1,-2,-3,-4,-5,-6,-7,-76,-63,-31,-61,-19,-33,-59,-9,-57,-55,-53,-51,-48,-43,-40,-37,-8,-15,-16,-20,-21,-22,-31,-23,-77,-64,-60,147,-11,-13,-14,-58,-56,-54,-52,-49,-50,-44,-45,-46,-47,-41,-42,-38,-39,-34,-35,-36,169,-10,-12,-24,-32,188,206,-78,-62,222,242,261,]),'SEMICOLON':([2,3,4,5,6,7,8,11,12,13,14,15,19,21,22,29,30,31,32,33,34,35,36,38,58,59,60,61,62,63,64,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,105,107,109,112,113,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,141,145,147,148,150,151,164,165,166,167,168,171,182,183,186,200,201,203,204,205,208,210,211,212,216,220,221,225,229,233,238,240,242,244,247,248,249,250,252,253,254,255,259,260,261,262,263,269,273,274,275,276,277,278,279,280,281,282,283,284,285,288,295,296,297,298,301,302,304,305,306,307,309,310,315,316,317,318,319,320,323,324,325,330,331,332,333,335,341,343,344,345,350,351,353,354,355,],[-1,-2,-3,-4,-5,-6,-7,-76,-63,-31,-61,-19,-33,-59,-9,-57,-55,-53,-51,-48,-43,-40,-37,-8,-15,-16,-20,-21,-22,-31,-23,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,-77,-64,-60,-11,-13,-14,-58,-56,-54,-52,-49,-50,-44,-45,-46,-47,-41,-42,-38,-39,-34,-35,-36,-108,-211,-10,-12,-24,-32,-82,-84,-86,-91,-92,-78,-210,-204,-62,-123,-124,-81,-83,-85,-107,230,-116,-118,-213,-203,-212,-122,-106,-119,253,-205,-127,-130,-125,-117,-120,265,-89,-79,269,-87,278,253,-126,-128,-129,-80,-173,278,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-1,310,317,318,319,-89,-90,-159,-88,-174,-176,278,278,-182,278,331,-191,-192,-193,332,-170,278,-172,278,-190,-194,-160,-171,-161,-183,-185,-186,354,-188,-184,-187,-189,]),'RIGHT_CURLY_BRACKET':([2,3,4,5,6,7,8,12,13,14,15,19,21,22,29,30,31,32,33,34,35,36,38,58,59,60,61,62,63,64,105,107,109,112,113,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,147,148,150,151,173,174,176,177,186,207,209,217,230,234,235,236,237,251,253,257,259,265,267,269,271,273,274,275,276,277,278,279,280,281,282,283,284,300,302,305,306,310,317,318,319,321,322,323,325,331,332,333,334,335,341,342,343,344,345,351,353,354,355,],[-1,-2,-3,-4,-5,-6,-7,-63,-31,-61,-19,-33,-59,-9,-57,-55,-53,-51,-48,-43,-40,-37,-8,-15,-16,-20,-21,-22,-31,-23,-64,-60,-11,-13,-14,-58,-56,-54,-52,-49,-50,-44,-45,-46,-47,-41,-42,-38,-39,-34,-35,-36,-10,-12,-24,-32,208,-109,216,-215,-62,229,-110,-216,-111,250,-218,-220,-221,-219,-79,-202,273,-217,-200,-80,-201,-173,305,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-199,-159,-174,-176,-182,-191,-192,-193,333,-162,-170,-172,-190,-194,-160,341,-171,-161,-163,-183,-185,-186,-188,-184,-187,-189,]),'SIZEOF':([9,16,17,18,20,23,24,25,26,27,28,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,132,138,146,149,153,213,226,232,253,259,268,269,273,274,275,276,277,278,279,280,281,282,283,284,286,297,303,305,306,307,309,310,311,312,313,315,317,318,319,323,324,325,330,331,332,334,335,339,340,343,344,345,351,353,354,355,],[20,20,20,20,20,-25,-26,-27,-28,-29,-30,20,20,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-79,20,20,-80,-173,20,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,20,20,20,-174,-176,20,20,-182,20,20,20,20,-191,-192,-193,-170,20,-172,20,-190,-194,20,-171,20,20,-183,-185,-186,-188,-184,-187,-189,]),'BITWISE_NOT':([9,16,17,18,20,23,24,25,26,27,28,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,132,138,146,149,153,213,226,232,253,259,268,269,273,274,275,276,277,278,279,280,281,282,283,284,286,297,303,305,306,307,309,310,311,312,313,315,317,318,319,323,324,325,330,331,332,334,335,339,340,343,344,345,351,353,354,355,],[27,27,27,27,27,-25,-26,-27,-28,-29,-30,27,27,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-79,27,27,-80,-173,27,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,27,27,27,-174,-176,27,27,-182,27,27,27,27,-191,-192,-193,-170,27,-172,27,-190,-194,27,-171,27,27,-183,-185,-186,-188,-184,-187,-189,]),'LOGICAL_NOT':([9,16,17,18,20,23,24,25,26,27,28,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,132,138,146,149,153,213,226,232,253,259,268,269,273,274,275,276,277,278,279,280,281,282,283,284,286,297,303,305,306,307,309,310,311,312,313,315,317,318,319,323,324,325,330,331,332,334,335,339,340,343,344,345,351,353,354,355,],[28,28,28,28,28,-25,-26,-27,-28,-29,-30,28,28,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-79,28,28,-80,-173,28,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,28,28,28,-174,-176,28,28,-182,28,28,28,28,-191,-192,-193,-170,28,-172,28,-190,-194,28,-171,28,28,-183,-185,-186,-188,-184,-187,-189,]),'(':([9,18,23,24,25,26,27,28,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,132,138,146,149,153,213,226,232,253,259,268,269,273,274,275,276,277,278,279,280,281,282,283,284,286,297,303,305,306,307,309,310,311,312,313,315,317,318,319,323,324,325,330,331,332,334,335,339,340,343,344,345,351,353,354,355,],[37,37,-25,-26,-27,-28,-29,-30,37,37,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-79,37,37,-80,-173,37,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,37,37,37,-174,-176,37,37,-182,37,37,37,37,-191,-192,-193,-170,37,-172,37,-190,-194,37,-171,37,37,-183,-185,-186,-188,-184,-187,-189,]),'VOID':([37,65,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,137,141,142,145,154,164,165,166,167,168,172,173,174,182,183,196,200,201,202,207,208,209,216,218,220,221,225,227,229,230,234,235,236,237,239,240,242,244,247,251,252,253,256,257,258,259,261,262,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,300,305,306,310,317,318,319,323,325,331,332,335,343,344,345,351,353,354,355,],[87,87,87,87,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,87,-108,87,-211,87,87,87,87,-91,-92,87,87,-109,-210,-204,87,-123,-124,87,87,-107,-110,-213,87,-203,-212,-122,87,-106,-111,87,-218,-220,-221,87,-205,-127,-130,-125,-219,87,-79,87,-202,-179,87,-126,-128,-129,87,-200,-80,-201,-180,-173,87,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-199,-174,-176,-182,-191,-192,-193,-170,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'CHAR':([37,65,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,137,141,142,145,154,164,165,166,167,168,172,173,174,182,183,196,200,201,202,207,208,209,216,218,220,221,225,227,229,230,234,235,236,237,239,240,242,244,247,251,252,253,256,257,258,259,261,262,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,300,305,306,310,317,318,319,323,325,331,332,335,343,344,345,351,353,354,355,],[88,88,88,88,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,88,-108,88,-211,88,88,88,88,-91,-92,88,88,-109,-210,-204,88,-123,-124,88,88,-107,-110,-213,88,-203,-212,-122,88,-106,-111,88,-218,-220,-221,88,-205,-127,-130,-125,-219,88,-79,88,-202,-179,88,-126,-128,-129,88,-200,-80,-201,-180,-173,88,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-199,-174,-176,-182,-191,-192,-193,-170,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'SHORT':([37,65,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,137,141,142,145,154,164,165,166,167,168,172,173,174,182,183,196,200,201,202,207,208,209,216,218,220,221,225,227,229,230,234,235,236,237,239,240,242,244,247,251,252,253,256,257,258,259,261,262,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,300,305,306,310,317,318,319,323,325,331,332,335,343,344,345,351,353,354,355,],[89,89,89,89,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,89,-108,89,-211,89,89,89,89,-91,-92,89,89,-109,-210,-204,89,-123,-124,89,89,-107,-110,-213,89,-203,-212,-122,89,-106,-111,89,-218,-220,-221,89,-205,-127,-130,-125,-219,89,-79,89,-202,-179,89,-126,-128,-129,89,-200,-80,-201,-180,-173,89,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-199,-174,-176,-182,-191,-192,-193,-170,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'INT':([37,65,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,137,141,142,145,154,164,165,166,167,168,172,173,174,182,183,196,200,201,202,207,208,209,216,218,220,221,225,227,229,230,234,235,236,237,239,240,242,244,247,251,252,253,256,257,258,259,261,262,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,300,305,306,310,317,318,319,323,325,331,332,335,343,344,345,351,353,354,355,],[90,90,90,90,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,90,-108,90,-211,90,90,90,90,-91,-92,90,90,-109,-210,-204,90,-123,-124,90,90,-107,-110,-213,90,-203,-212,-122,90,-106,-111,90,-218,-220,-221,90,-205,-127,-130,-125,-219,90,-79,90,-202,-179,90,-126,-128,-129,90,-200,-80,-201,-180,-173,90,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-199,-174,-176,-182,-191,-192,-193,-170,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'LONG':([37,65,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,137,141,142,145,154,164,165,166,167,168,172,173,174,182,183,196,200,201,202,207,208,209,216,218,220,221,225,227,229,230,234,235,236,237,239,240,242,244,247,251,252,253,256,257,258,259,261,262,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,300,305,306,310,317,318,319,323,325,331,332,335,343,344,345,351,353,354,355,],[91,91,91,91,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,91,-108,91,-211,91,91,91,91,-91,-92,91,91,-109,-210,-204,91,-123,-124,91,91,-107,-110,-213,91,-203,-212,-122,91,-106,-111,91,-218,-220,-221,91,-205,-127,-130,-125,-219,91,-79,91,-202,-179,91,-126,-128,-129,91,-200,-80,-201,-180,-173,91,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-199,-174,-176,-182,-191,-192,-193,-170,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'FLOAT':([37,65,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,137,141,142,145,154,164,165,166,167,168,172,173,174,182,183,196,200,201,202,207,208,209,216,218,220,221,225,227,229,230,234,235,236,237,239,240,242,244,247,251,252,253,256,257,258,259,261,262,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,300,305,306,310,317,318,319,323,325,331,332,335,343,344,345,351,353,354,355,],[92,92,92,92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,92,-108,92,-211,92,92,92,92,-91,-92,92,92,-109,-210,-204,92,-123,-124,92,92,-107,-110,-213,92,-203,-212,-122,92,-106,-111,92,-218,-220,-221,92,-205,-127,-130,-125,-219,92,-79,92,-202,-179,92,-126,-128,-129,92,-200,-80,-201,-180,-173,92,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-199,-174,-176,-182,-191,-192,-193,-170,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'DOUBLE':([37,65,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,137,141,142,145,154,164,165,166,167,168,172,173,174,182,183,196,200,201,202,207,208,209,216,218,220,221,225,227,229,230,234,235,236,237,239,240,242,244,247,251,252,253,256,257,258,259,261,262,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,300,305,306,310,317,318,319,323,325,331,332,335,343,344,345,351,353,354,355,],[93,93,93,93,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,93,-108,93,-211,93,93,93,93,-91,-92,93,93,-109,-210,-204,93,-123,-124,93,93,-107,-110,-213,93,-203,-212,-122,93,-106,-111,93,-218,-220,-221,93,-205,-127,-130,-125,-219,93,-79,93,-202,-179,93,-126,-128,-129,93,-200,-80,-201,-180,-173,93,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-199,-174,-176,-182,-191,-192,-193,-170,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'SIGNED':([37,65,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,137,141,142,145,154,164,165,166,167,168,172,173,174,182,183,196,200,201,202,207,208,209,216,218,220,221,225,227,229,230,234,235,236,237,239,240,242,244,247,251,252,253,256,257,258,259,261,262,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,300,305,306,310,317,318,319,323,325,331,332,335,343,344,345,351,353,354,355,],[94,94,94,94,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,94,-108,94,-211,94,94,94,94,-91,-92,94,94,-109,-210,-204,94,-123,-124,94,94,-107,-110,-213,94,-203,-212,-122,94,-106,-111,94,-218,-220,-221,94,-205,-127,-130,-125,-219,94,-79,94,-202,-179,94,-126,-128,-129,94,-200,-80,-201,-180,-173,94,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-199,-174,-176,-182,-191,-192,-193,-170,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'UNSIGNED':([37,65,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,137,141,142,145,154,164,165,166,167,168,172,173,174,182,183,196,200,201,202,207,208,209,216,218,220,221,225,227,229,230,234,235,236,237,239,240,242,244,247,251,252,253,256,257,258,259,261,262,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,300,305,306,310,317,318,319,323,325,331,332,335,343,344,345,351,353,354,355,],[95,95,95,95,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,95,-108,95,-211,95,95,95,95,-91,-92,95,95,-109,-210,-204,95,-123,-124,95,95,-107,-110,-213,95,-203,-212,-122,95,-106,-111,95,-218,-220,-221,95,-205,-127,-130,-125,-219,95,-79,95,-202,-179,95,-126,-128,-129,95,-200,-80,-201,-180,-173,95,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-199,-174,-176,-182,-191,-192,-193,-170,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'BOOL':([37,65,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,137,141,142,145,154,164,165,166,167,168,172,173,174,182,183,196,200,201,202,207,208,209,216,218,220,221,225,227,229,230,234,235,236,237,239,240,242,244,247,251,252,253,256,257,258,259,261,262,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,300,305,306,310,317,318,319,323,325,331,332,335,343,344,345,351,353,354,355,],[96,96,96,96,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,96,-108,96,-211,96,96,96,96,-91,-92,96,96,-109,-210,-204,96,-123,-124,96,96,-107,-110,-213,96,-203,-212,-122,96,-106,-111,96,-218,-220,-221,96,-205,-127,-130,-125,-219,96,-79,96,-202,-179,96,-126,-128,-129,96,-200,-80,-201,-180,-173,96,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-199,-174,-176,-182,-191,-192,-193,-170,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'TYPE_NAME':([37,65,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,137,141,142,145,154,164,165,166,167,168,172,173,174,182,183,196,200,201,202,207,208,209,216,218,220,221,225,227,229,230,234,235,236,237,239,240,242,244,247,251,252,253,256,257,258,259,261,262,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,300,305,306,310,317,318,319,323,325,331,332,335,343,344,345,351,353,354,355,],[99,99,99,99,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,99,-108,99,-211,99,99,99,99,-91,-92,99,99,-109,-210,-204,99,-123,-124,99,99,-107,-110,-213,99,-203,-212,-122,99,-106,-111,99,-218,-220,-221,99,-205,-127,-130,-125,-219,99,-79,99,-202,-179,99,-126,-128,-129,99,-200,-80,-201,-180,-173,99,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-199,-174,-176,-182,-191,-192,-193,-170,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'CONST':([37,65,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,136,137,141,142,145,154,155,157,164,165,166,167,168,172,173,174,182,183,193,196,200,201,202,207,208,209,216,218,220,221,225,227,229,230,234,235,236,237,239,240,242,244,247,251,252,253,256,257,258,259,261,262,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,300,305,306,310,317,318,319,323,325,331,332,335,343,344,345,351,353,354,355,],[100,100,100,100,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,100,100,-108,100,-211,100,100,-135,100,100,100,-91,-92,100,100,-109,-210,-204,-136,100,-123,-124,100,100,-107,-110,-213,100,-203,-212,-122,100,-106,-111,100,-218,-220,-221,100,-205,-127,-130,-125,-219,100,-79,100,-202,-179,100,-126,-128,-129,100,-200,-80,-201,-180,-173,100,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-199,-174,-176,-182,-191,-192,-193,-170,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'STRUCT':([37,65,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,137,141,142,145,154,164,165,166,167,168,172,173,174,182,183,196,200,201,202,207,208,209,216,218,220,221,225,227,229,230,234,235,236,237,239,240,242,244,247,251,252,253,256,257,258,259,261,262,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,300,305,306,310,317,318,319,323,325,331,332,335,343,344,345,351,353,354,355,],[101,101,101,101,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,101,-108,101,-211,101,101,101,101,-91,-92,101,101,-109,-210,-204,101,-123,-124,101,101,-107,-110,-213,101,-203,-212,-122,101,-106,-111,101,-218,-220,-221,101,-205,-127,-130,-125,-219,101,-79,101,-202,-179,101,-126,-128,-129,101,-200,-80,-201,-180,-173,101,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-199,-174,-176,-182,-191,-192,-193,-170,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'CLASS':([37,65,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,137,141,142,145,154,164,165,166,167,168,172,173,174,182,183,196,200,201,202,207,208,209,216,218,220,221,225,227,229,230,234,235,236,237,239,240,242,244,247,251,252,253,256,257,258,259,261,262,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,300,305,306,310,317,318,319,323,325,331,332,335,343,344,345,351,353,354,355,],[103,103,103,103,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,103,-108,103,-211,103,103,103,103,-91,-92,103,103,-109,-210,-204,103,-123,-124,103,103,-107,-110,-213,103,-203,-212,-122,103,-106,-111,103,-218,-220,-221,103,-205,-127,-130,-125,-219,103,-79,103,-202,-179,103,-126,-128,-129,103,-200,-80,-201,-180,-173,103,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-199,-174,-176,-182,-191,-192,-193,-170,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),')':([83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,133,134,135,136,139,140,141,145,152,155,156,157,159,169,182,183,188,190,192,193,194,195,206,208,216,220,221,222,223,229,240,],[132,-145,-113,-115,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,-146,-147,-148,-131,-112,-114,-108,-211,-149,-132,-133,-135,-155,-151,-210,-204,-153,-157,-134,-136,-150,-156,-152,-107,-213,-203,-212,-154,-158,-106,-205,]),'TYPEDEF':([87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,137,141,145,154,164,165,166,167,168,182,183,196,200,201,202,208,216,218,220,221,225,227,229,234,235,236,237,239,240,242,244,247,251,252,253,256,257,258,259,261,262,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,300,305,306,310,317,318,319,323,325,331,332,335,343,344,345,351,353,354,355,],[-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,167,-108,-211,167,167,167,167,-91,-92,-210,-204,167,-123,-124,167,-107,-213,167,-203,-212,-122,167,-106,167,-218,-220,-221,167,-205,-127,-130,-125,-219,167,-79,167,-202,-179,167,-126,-128,-129,167,-200,-80,-201,-180,-173,167,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-199,-174,-176,-182,-191,-192,-193,-170,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'AUTO':([87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,137,141,145,154,164,165,166,167,168,182,183,196,200,201,202,208,216,218,220,221,225,227,229,234,235,236,237,239,240,242,244,247,251,252,253,256,257,258,259,261,262,263,266,267,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,300,305,306,310,317,318,319,323,325,331,332,335,343,344,345,351,353,354,355,],[-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-121,-214,-209,168,-108,-211,168,168,168,168,-91,-92,-210,-204,168,-123,-124,168,-107,-213,168,-203,-212,-122,168,-106,168,-218,-220,-221,168,-205,-127,-130,-125,-219,168,-79,168,-202,-179,168,-126,-128,-129,168,-200,-80,-201,-180,-173,168,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-199,-174,-176,-182,-191,-192,-193,-170,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'LEFT_CURLY_BRACKET':([101,102,103,141,145,178,179,180,181,182,183,200,201,220,221,225,239,240,242,244,247,252,253,256,258,259,261,262,263,266,268,269,272,273,274,275,276,277,278,279,280,281,282,283,284,292,303,305,306,307,309,310,317,318,319,323,324,325,331,332,334,335,336,337,338,343,344,345,347,349,351,352,353,354,355,],[142,143,-209,172,-211,218,-206,-207,-208,-210,-204,-123,-124,-203,-212,-122,259,-205,-127,-130,-125,259,-79,259,-179,259,-126,-128,-129,259,303,-80,-180,-173,259,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,259,303,-174,-176,259,259,-182,-191,-192,-193,-170,259,-172,-190,-194,303,-171,259,259,259,-183,-185,-186,259,259,-188,259,-184,-187,-189,]),'INHERITANCE_OP':([103,145,],[144,185,]),'PRIVATE':([143,144,176,177,185,217,219,265,],[179,179,179,-215,179,-216,179,-217,]),'PUBLIC':([143,144,176,177,185,217,219,265,],[180,180,180,-215,180,-216,180,-217,]),'PROTECTED':([143,144,176,177,185,217,219,265,],[181,181,181,-215,181,-216,181,-217,]),'CASE':([253,259,269,273,274,275,276,277,278,279,280,281,282,283,284,305,306,307,309,310,317,318,319,323,324,325,331,332,335,343,344,345,351,353,354,355,],[-79,286,-80,-173,286,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-174,-176,286,286,-182,-191,-192,-193,-170,286,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'DEFAULT':([253,259,269,273,274,275,276,277,278,279,280,281,282,283,284,305,306,307,309,310,317,318,319,323,324,325,331,332,335,343,344,345,351,353,354,355,],[-79,287,-80,-173,287,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-174,-176,287,287,-182,-191,-192,-193,-170,287,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'IF':([253,259,269,273,274,275,276,277,278,279,280,281,282,283,284,305,306,307,309,310,317,318,319,323,324,325,331,332,335,343,344,345,351,353,354,355,],[-79,289,-80,-173,289,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-174,-176,289,289,-182,-191,-192,-193,-170,289,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'SWITCH':([253,259,269,273,274,275,276,277,278,279,280,281,282,283,284,305,306,307,309,310,317,318,319,323,324,325,331,332,335,343,344,345,351,353,354,355,],[-79,290,-80,-173,290,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-174,-176,290,290,-182,-191,-192,-193,-170,290,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'WHILE':([253,259,269,273,274,275,276,277,278,279,280,281,282,283,284,305,306,307,309,310,314,317,318,319,323,324,325,331,332,335,343,344,345,351,353,354,355,],[-79,291,-80,-173,291,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-174,-176,291,291,-182,329,-191,-192,-193,-170,291,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'DO':([253,259,269,273,274,275,276,277,278,279,280,281,282,283,284,305,306,307,309,310,317,318,319,323,324,325,331,332,335,343,344,345,351,353,354,355,],[-79,292,-80,-173,292,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-174,-176,292,292,-182,-191,-192,-193,-170,292,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'FOR':([253,259,269,273,274,275,276,277,278,279,280,281,282,283,284,305,306,307,309,310,317,318,319,323,324,325,331,332,335,343,344,345,351,353,354,355,],[-79,293,-80,-173,293,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-174,-176,293,293,-182,-191,-192,-193,-170,293,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'GOTO':([253,259,269,273,274,275,276,277,278,279,280,281,282,283,284,305,306,307,309,310,317,318,319,323,324,325,331,332,335,343,344,345,351,353,354,355,],[-79,294,-80,-173,294,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-174,-176,294,294,-182,-191,-192,-193,-170,294,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'CONTINUE':([253,259,269,273,274,275,276,277,278,279,280,281,282,283,284,305,306,307,309,310,317,318,319,323,324,325,331,332,335,343,344,345,351,353,354,355,],[-79,295,-80,-173,295,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-174,-176,295,295,-182,-191,-192,-193,-170,295,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'BREAK':([253,259,269,273,274,275,276,277,278,279,280,281,282,283,284,305,306,307,309,310,317,318,319,323,324,325,331,332,335,343,344,345,351,353,354,355,],[-79,296,-80,-173,296,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-174,-176,296,296,-182,-191,-192,-193,-170,296,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'RETURN':([253,259,269,273,274,275,276,277,278,279,280,281,282,283,284,305,306,307,309,310,317,318,319,323,324,325,331,332,335,343,344,345,351,353,354,355,],[-79,297,-80,-173,297,-175,-177,-178,-181,-164,-165,-166,-167,-168,-169,-174,-176,297,297,-182,-191,-192,-193,-170,297,-172,-190,-194,-171,-183,-185,-186,-188,-184,-187,-189,]),'ELSE':([273,305,343,],[-173,-174,349,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'primary_expression':([0,9,16,17,18,20,39,40,52,53,54,55,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,132,138,146,149,153,213,226,232,259,268,274,286,297,303,307,309,311,312,313,315,324,330,334,339,340,],[1,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'expression':([9,52,54,65,259,274,297,307,309,311,312,313,315,324,330,339,340,],[10,106,108,10,288,288,320,288,288,326,327,328,288,288,288,346,348,]),'assignment_expression':([9,39,40,52,54,55,65,149,259,268,274,297,303,307,309,311,312,313,315,324,330,334,339,340,],[11,104,105,11,11,111,11,187,11,302,11,11,302,11,11,11,11,11,11,11,11,302,11,11,]),'conditional_expression':([9,39,40,52,54,55,65,138,146,149,153,213,226,232,259,268,274,286,297,303,307,309,311,312,313,315,324,330,334,339,340,],[12,12,12,12,12,12,12,171,186,12,171,171,171,171,12,12,12,171,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'unary_expression':([9,16,17,18,20,39,40,52,53,54,55,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,132,138,146,149,153,213,226,232,259,268,274,286,297,303,307,309,311,312,313,315,324,330,334,339,340,],[13,60,61,63,64,13,13,13,63,13,13,13,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,13,63,63,63,63,13,13,13,63,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'logical_or_expression':([9,39,40,52,54,55,65,138,146,149,153,213,226,232,259,268,274,286,297,303,307,309,311,312,313,315,324,330,334,339,340,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'postfix_expression':([9,16,17,18,20,39,40,52,53,54,55,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,132,138,146,149,153,213,226,232,259,268,274,286,297,303,307,309,311,312,313,315,324,330,334,339,340,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'unary_operator':([9,16,17,18,20,39,40,52,53,54,55,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,132,138,146,149,153,213,226,232,259,268,274,286,297,303,307,309,311,312,313,315,324,330,334,339,340,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'cast_expression':([9,18,39,40,52,53,54,55,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,132,138,146,149,153,213,226,232,259,268,274,286,297,303,307,309,311,312,313,315,324,330,334,339,340,],[19,62,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,129,130,131,151,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'logical_and_expression':([9,39,40,52,53,54,55,65,138,146,149,153,213,226,232,259,268,274,286,297,303,307,309,311,312,313,315,324,330,334,339,340,],[21,21,21,21,107,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'inclusive_or_expression':([9,39,40,52,53,54,55,65,66,138,146,149,153,213,226,232,259,268,274,286,297,303,307,309,311,312,313,315,324,330,334,339,340,],[29,29,29,29,29,29,29,29,115,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'exclusive_or_expression':([9,39,40,52,53,54,55,65,66,67,138,146,149,153,213,226,232,259,268,274,286,297,303,307,309,311,312,313,315,324,330,334,339,340,],[30,30,30,30,30,30,30,30,30,116,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'and_expression':([9,39,40,52,53,54,55,65,66,67,68,138,146,149,153,213,226,232,259,268,274,286,297,303,307,309,311,312,313,315,324,330,334,339,340,],[31,31,31,31,31,31,31,31,31,31,117,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'equality_expression':([9,39,40,52,53,54,55,65,66,67,68,69,138,146,149,153,213,226,232,259,268,274,286,297,303,307,309,311,312,313,315,324,330,334,339,340,],[32,32,32,32,32,32,32,32,32,32,32,118,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'relational_expression':([9,39,40,52,53,54,55,65,66,67,68,69,70,71,138,146,149,153,213,226,232,259,268,274,286,297,303,307,309,311,312,313,315,324,330,334,339,340,],[33,33,33,33,33,33,33,33,33,33,33,33,119,120,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'shift_expression':([9,39,40,52,53,54,55,65,66,67,68,69,70,71,72,73,74,75,138,146,149,153,213,226,232,259,268,274,286,297,303,307,309,311,312,313,315,324,330,334,339,340,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,121,122,123,124,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'additive_expression':([9,39,40,52,53,54,55,65,66,67,68,69,70,71,72,73,74,75,76,77,138,146,149,153,213,226,232,259,268,274,286,297,303,307,309,311,312,313,315,324,330,334,339,340,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,125,126,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'multiplicative_expression':([9,39,40,52,53,54,55,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,138,146,149,153,213,226,232,259,268,274,286,297,303,307,309,311,312,313,315,324,330,334,339,340,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,127,128,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'assignment_operator':([13,],[40,]),'type_name':([37,65,],[83,114,]),'specifier_qualifier_list':([37,65,85,86,142,172,173,207,],[84,84,139,140,175,175,175,175,]),'type_specifier':([37,65,85,86,137,142,154,164,165,166,172,173,196,202,207,218,227,234,239,252,256,259,266,274,],[85,85,85,85,165,85,165,165,165,165,85,85,165,165,85,165,165,165,165,165,165,165,165,165,]),'type_qualifier':([37,65,85,86,136,137,142,154,155,164,165,166,172,173,196,202,207,218,227,234,239,252,256,259,266,274,],[86,86,86,86,157,166,86,166,193,166,166,166,86,86,166,166,86,166,166,166,166,166,166,166,166,166,]),'struct_specifier':([37,65,85,86,137,142,154,164,165,166,172,173,196,202,207,218,227,234,239,252,256,259,266,274,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'class_definition':([37,65,85,86,137,142,154,164,165,166,172,173,196,202,207,218,227,234,239,252,256,259,266,274,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'class_definition_head':([37,65,85,86,137,142,154,164,165,166,172,173,196,202,207,218,227,234,239,252,256,259,266,274,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'argument_expression_list':([55,],[110,]),'abstract_declarator':([84,137,163,202,],[133,158,198,158,]),'pointer':([84,136,137,155,163,175,202,215,218,231,234,238,260,270,],[134,156,134,192,199,214,199,214,214,214,214,214,214,214,]),'direct_abstract_declarator':([84,134,137,163,199,202,],[135,152,135,135,152,135,]),'type_qualifier_list':([136,],[155,]),'parameter_type_list':([137,154,202,227,],[160,191,160,243,]),'parameter_list':([137,154,202,227,],[161,161,161,161,]),'parameter_declaration':([137,154,196,202,227,],[162,162,224,162,162,]),'declaration_specifiers':([137,154,164,165,166,196,202,218,227,234,239,252,256,259,266,274,],[163,163,203,204,205,163,163,238,163,238,260,260,260,260,260,260,]),'storage_class_specifier':([137,154,164,165,166,196,202,218,227,234,239,252,256,259,266,274,],[164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,]),'constant_expression':([138,153,213,226,232,286,],[170,189,233,241,249,308,]),'struct_declaration_list':([142,172,],[173,207,]),'struct_declaration':([142,172,173,207,],[174,174,209,209,]),'class_internal_definition_list':([143,],[176,]),'class_internal_definition':([143,176,],[177,217,]),'access_specifier':([143,144,176,185,219,],[178,184,178,184,184,]),'inheritance_specifier_list':([144,185,],[182,221,]),'inheritance_specifier':([144,185,219,],[183,183,240,]),'declarator':([163,175,202,215,218,231,234,238,260,270,],[197,212,228,228,239,212,239,252,298,298,]),'direct_declarator':([163,175,199,202,214,215,218,231,234,238,260,270,],[200,200,225,200,225,200,200,200,200,200,200,200,]),'struct_declarator_list':([175,],[210,]),'struct_declarator':([175,231,],[211,248,]),'class_member_list':([218,],[234,]),'class_member':([218,234,],[235,251,]),'function_definition':([218,234,],[236,236,]),'declaration':([218,234,239,252,256,259,266,274,],[237,237,258,258,272,276,272,276,]),'identifier_list':([227,],[245,]),'init_declarator_list':([238,260,],[254,254,]),'init_declarator':([238,260,270,],[255,255,304,]),'declaration_list':([239,252,],[256,266,]),'compound_statement':([239,252,256,259,266,274,292,307,309,324,336,337,338,347,349,352,],[257,267,271,280,300,280,314,280,280,280,343,344,345,351,353,355,]),'block_item_list':([259,],[274,]),'block_item':([259,274,],[275,306,]),'statement':([259,274,307,309,324,],[277,277,323,325,335,]),'labeled_statement':([259,274,307,309,324,],[279,279,279,279,279,]),'expression_statement':([259,274,307,309,315,324,330,],[281,281,281,281,330,281,340,]),'selection_statement':([259,274,307,309,324,],[282,282,282,282,282,]),'iteration_statement':([259,274,307,309,324,],[283,283,283,283,283,]),'jump_statement':([259,274,307,309,324,],[284,284,284,284,284,]),'initializer':([268,303,334,],[301,322,342,]),'initializer_list':([303,],[321,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> primary_expression","S'",1,None,None,None),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','parser_incomplete.py',22),
  ('primary_expression -> FLOAT_CONSTANT','primary_expression',1,'p_primary_expression','parser_incomplete.py',23),
  ('primary_expression -> HEX_CONSTANT','primary_expression',1,'p_primary_expression','parser_incomplete.py',24),
  ('primary_expression -> OCT_CONSTANT','primary_expression',1,'p_primary_expression','parser_incomplete.py',25),
  ('primary_expression -> INT_CONSTANT','primary_expression',1,'p_primary_expression','parser_incomplete.py',26),
  ('primary_expression -> CHAR_CONSTANT','primary_expression',1,'p_primary_expression','parser_incomplete.py',27),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression','parser_incomplete.py',28),
  ('primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET','primary_expression',3,'p_primary_expression','parser_incomplete.py',29),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','parser_incomplete.py',35),
  ('postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET','postfix_expression',4,'p_postfix_expression','parser_incomplete.py',36),
  ('postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET','postfix_expression',3,'p_postfix_expression','parser_incomplete.py',37),
  ('postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET','postfix_expression',4,'p_postfix_expression','parser_incomplete.py',38),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression','parser_incomplete.py',39),
  ('postfix_expression -> postfix_expression PTR_OP IDENTIFIER','postfix_expression',3,'p_postfix_expression','parser_incomplete.py',40),
  ('postfix_expression -> postfix_expression INC_OP','postfix_expression',2,'p_postfix_expression','parser_incomplete.py',41),
  ('postfix_expression -> postfix_expression DEC_OP','postfix_expression',2,'p_postfix_expression','parser_incomplete.py',42),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','parser_incomplete.py',48),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','parser_incomplete.py',49),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','parser_incomplete.py',55),
  ('unary_expression -> INC_OP unary_expression','unary_expression',2,'p_unary_expression','parser_incomplete.py',56),
  ('unary_expression -> DEC_OP unary_expression','unary_expression',2,'p_unary_expression','parser_incomplete.py',57),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','parser_incomplete.py',58),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression','parser_incomplete.py',59),
  ('unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET','unary_expression',4,'p_unary_expression','parser_incomplete.py',60),
  ('unary_operator -> BITWISE_AND','unary_operator',1,'p_unary_operator','parser_incomplete.py',66),
  ('unary_operator -> MULTIPLY','unary_operator',1,'p_unary_operator','parser_incomplete.py',67),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','parser_incomplete.py',68),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','parser_incomplete.py',69),
  ('unary_operator -> BITWISE_NOT','unary_operator',1,'p_unary_operator','parser_incomplete.py',70),
  ('unary_operator -> LOGICAL_NOT','unary_operator',1,'p_unary_operator','parser_incomplete.py',71),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','parser_incomplete.py',77),
  ('cast_expression -> ( type_name ) cast_expression','cast_expression',4,'p_cast_expression','parser_incomplete.py',78),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','parser_incomplete.py',85),
  ('multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression','multiplicative_expression',3,'p_multiplicative_expression','parser_incomplete.py',86),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression','parser_incomplete.py',87),
  ('multiplicative_expression -> multiplicative_expression MOD cast_expression','multiplicative_expression',3,'p_multiplicative_expression','parser_incomplete.py',88),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','parser_incomplete.py',95),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','parser_incomplete.py',96),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression','parser_incomplete.py',97),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','parser_incomplete.py',104),
  ('shift_expression -> shift_expression LEFT_OP additive_expression','shift_expression',3,'p_shift_expression','parser_incomplete.py',105),
  ('shift_expression -> shift_expression RIGHT_OP additive_expression','shift_expression',3,'p_shift_expression','parser_incomplete.py',106),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','parser_incomplete.py',113),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','parser_incomplete.py',114),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','parser_incomplete.py',115),
  ('relational_expression -> relational_expression LE_OP shift_expression','relational_expression',3,'p_relational_expression','parser_incomplete.py',116),
  ('relational_expression -> relational_expression GE_OP shift_expression','relational_expression',3,'p_relational_expression','parser_incomplete.py',117),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','parser_incomplete.py',124),
  ('equality_expression -> equality_expression EQ_OP relational_expression','equality_expression',3,'p_equality_expression','parser_incomplete.py',125),
  ('equality_expression -> equality_expression NE_OP relational_expression','equality_expression',3,'p_equality_expression','parser_incomplete.py',126),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','parser_incomplete.py',133),
  ('and_expression -> and_expression BITWISE_AND equality_expression','and_expression',3,'p_and_expression','parser_incomplete.py',134),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','parser_incomplete.py',141),
  ('exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','parser_incomplete.py',142),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','parser_incomplete.py',150),
  ('inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','parser_incomplete.py',151),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','parser_incomplete.py',158),
  ('logical_and_expression -> logical_and_expression LOGICAL_AND_OP inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','parser_incomplete.py',159),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','parser_incomplete.py',166),
  ('logical_or_expression -> logical_or_expression LOGICAL_OR_OP logical_and_expression','logical_or_expression',3,'p_logical_or_expression','parser_incomplete.py',167),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','parser_incomplete.py',174),
  ('conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','parser_incomplete.py',175),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','parser_incomplete.py',181),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','parser_incomplete.py',182),
  ('assignment_operator -> EQ','assignment_operator',1,'p_assignment_operator','parser_incomplete.py',189),
  ('assignment_operator -> MUL_ASSIGN','assignment_operator',1,'p_assignment_operator','parser_incomplete.py',190),
  ('assignment_operator -> DIV_ASSIGN','assignment_operator',1,'p_assignment_operator','parser_incomplete.py',191),
  ('assignment_operator -> MOD_ASSIGN','assignment_operator',1,'p_assignment_operator','parser_incomplete.py',192),
  ('assignment_operator -> ADD_ASSIGN','assignment_operator',1,'p_assignment_operator','parser_incomplete.py',193),
  ('assignment_operator -> SUB_ASSIGN','assignment_operator',1,'p_assignment_operator','parser_incomplete.py',194),
  ('assignment_operator -> LEFT_ASSIGN','assignment_operator',1,'p_assignment_operator','parser_incomplete.py',195),
  ('assignment_operator -> RIGHT_ASSIGN','assignment_operator',1,'p_assignment_operator','parser_incomplete.py',196),
  ('assignment_operator -> AND_ASSIGN','assignment_operator',1,'p_assignment_operator','parser_incomplete.py',197),
  ('assignment_operator -> XOR_ASSIGN','assignment_operator',1,'p_assignment_operator','parser_incomplete.py',198),
  ('assignment_operator -> OR_ASSIGN','assignment_operator',1,'p_assignment_operator','parser_incomplete.py',199),
  ('expression -> assignment_expression','expression',1,'p_expression','parser_incomplete.py',206),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','parser_incomplete.py',207),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','parser_incomplete.py',213),
  ('declaration -> declaration_specifiers SEMICOLON','declaration',2,'p_declaration','parser_incomplete.py',220),
  ('declaration -> declaration_specifiers init_declarator_list SEMICOLON','declaration',3,'p_declaration','parser_incomplete.py',221),
  ('declaration_specifiers -> storage_class_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','parser_incomplete.py',243),
  ('declaration_specifiers -> storage_class_specifier','declaration_specifiers',1,'p_declaration_specifiers','parser_incomplete.py',244),
  ('declaration_specifiers -> type_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','parser_incomplete.py',245),
  ('declaration_specifiers -> type_specifier','declaration_specifiers',1,'p_declaration_specifiers','parser_incomplete.py',246),
  ('declaration_specifiers -> type_qualifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','parser_incomplete.py',247),
  ('declaration_specifiers -> type_qualifier','declaration_specifiers',1,'p_declaration_specifiers','parser_incomplete.py',248),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','parser_incomplete.py',255),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','parser_incomplete.py',256),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','parser_incomplete.py',262),
  ('init_declarator -> declarator EQ initializer','init_declarator',3,'p_init_declarator','parser_incomplete.py',263),
  ('storage_class_specifier -> TYPEDEF','storage_class_specifier',1,'p_storage_class_specifier','parser_incomplete.py',269),
  ('storage_class_specifier -> AUTO','storage_class_specifier',1,'p_storage_class_specifier','parser_incomplete.py',270),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','parser_incomplete.py',278),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser_incomplete.py',279),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier','parser_incomplete.py',280),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser_incomplete.py',281),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','parser_incomplete.py',282),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','parser_incomplete.py',283),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','parser_incomplete.py',284),
  ('type_specifier -> SIGNED','type_specifier',1,'p_type_specifier','parser_incomplete.py',285),
  ('type_specifier -> UNSIGNED','type_specifier',1,'p_type_specifier','parser_incomplete.py',286),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','parser_incomplete.py',287),
  ('type_specifier -> struct_specifier','type_specifier',1,'p_type_specifier','parser_incomplete.py',288),
  ('type_specifier -> class_definition','type_specifier',1,'p_type_specifier','parser_incomplete.py',289),
  ('type_specifier -> TYPE_NAME','type_specifier',1,'p_type_specifier','parser_incomplete.py',290),
  ('struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET','struct_specifier',5,'p_struct_specifier','parser_incomplete.py',297),
  ('struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET','struct_specifier',4,'p_struct_specifier','parser_incomplete.py',298),
  ('struct_specifier -> STRUCT IDENTIFIER','struct_specifier',2,'p_struct_specifier','parser_incomplete.py',299),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','parser_incomplete.py',305),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','parser_incomplete.py',306),
  ('struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON','struct_declaration',3,'p_struct_declaration','parser_incomplete.py',312),
  ('specifier_qualifier_list -> type_specifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','parser_incomplete.py',318),
  ('specifier_qualifier_list -> type_specifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','parser_incomplete.py',319),
  ('specifier_qualifier_list -> type_qualifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','parser_incomplete.py',320),
  ('specifier_qualifier_list -> type_qualifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','parser_incomplete.py',321),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list','parser_incomplete.py',327),
  ('struct_declarator_list -> struct_declarator_list COMMA struct_declarator','struct_declarator_list',3,'p_struct_declarator_list','parser_incomplete.py',328),
  ('struct_declarator -> declarator','struct_declarator',1,'p_struct_declarator','parser_incomplete.py',335),
  ('struct_declarator -> COLON constant_expression','struct_declarator',2,'p_struct_declarator','parser_incomplete.py',336),
  ('struct_declarator -> declarator COLON constant_expression','struct_declarator',3,'p_struct_declarator','parser_incomplete.py',337),
  ('type_qualifier -> CONST','type_qualifier',1,'p_type_qualifier','parser_incomplete.py',344),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','parser_incomplete.py',350),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','parser_incomplete.py',351),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','parser_incomplete.py',357),
  ('direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET','direct_declarator',3,'p_direct_declarator','parser_incomplete.py',358),
  ('direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET','direct_declarator',4,'p_direct_declarator','parser_incomplete.py',359),
  ('direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET','direct_declarator',3,'p_direct_declarator','parser_incomplete.py',360),
  ('direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET','direct_declarator',4,'p_direct_declarator','parser_incomplete.py',361),
  ('direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET','direct_declarator',4,'p_direct_declarator','parser_incomplete.py',362),
  ('direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET','direct_declarator',3,'p_direct_declarator','parser_incomplete.py',363),
  ('pointer -> MULTIPLY','pointer',1,'p_pointer','parser_incomplete.py',369),
  ('pointer -> MULTIPLY type_qualifier_list','pointer',2,'p_pointer','parser_incomplete.py',370),
  ('pointer -> MULTIPLY pointer','pointer',2,'p_pointer','parser_incomplete.py',371),
  ('pointer -> MULTIPLY type_qualifier_list pointer','pointer',3,'p_pointer','parser_incomplete.py',372),
  ('type_qualifier_list -> type_qualifier','type_qualifier_list',1,'p_type_qualifier_list','parser_incomplete.py',378),
  ('type_qualifier_list -> type_qualifier_list type_qualifier','type_qualifier_list',2,'p_type_qualifier_list','parser_incomplete.py',379),
  ('parameter_type_list -> parameter_list','parameter_type_list',1,'p_parameter_type_list','parser_incomplete.py',386),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','parser_incomplete.py',392),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','parser_incomplete.py',393),
  ('parameter_declaration -> declaration_specifiers declarator','parameter_declaration',2,'p_parameter_declaration','parser_incomplete.py',399),
  ('parameter_declaration -> declaration_specifiers abstract_declarator','parameter_declaration',2,'p_parameter_declaration','parser_incomplete.py',400),
  ('parameter_declaration -> declaration_specifiers','parameter_declaration',1,'p_parameter_declaration','parser_incomplete.py',401),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','parser_incomplete.py',407),
  ('identifier_list -> identifier_list COMMA IDENTIFIER','identifier_list',3,'p_identifier_list','parser_incomplete.py',408),
  ('type_name -> specifier_qualifier_list','type_name',1,'p_type_name','parser_incomplete.py',414),
  ('type_name -> specifier_qualifier_list abstract_declarator','type_name',2,'p_type_name','parser_incomplete.py',415),
  ('abstract_declarator -> pointer','abstract_declarator',1,'p_abstract_declarator','parser_incomplete.py',421),
  ('abstract_declarator -> direct_abstract_declarator','abstract_declarator',1,'p_abstract_declarator','parser_incomplete.py',422),
  ('abstract_declarator -> pointer direct_abstract_declarator','abstract_declarator',2,'p_abstract_declarator','parser_incomplete.py',423),
  ('direct_abstract_declarator -> LEFT_BRACKET abstract_declarator RIGHT_BRACKET','direct_abstract_declarator',3,'p_direct_abstract_declarator','parser_incomplete.py',429),
  ('direct_abstract_declarator -> LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET','direct_abstract_declarator',2,'p_direct_abstract_declarator','parser_incomplete.py',430),
  ('direct_abstract_declarator -> LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET','direct_abstract_declarator',3,'p_direct_abstract_declarator','parser_incomplete.py',431),
  ('direct_abstract_declarator -> direct_abstract_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET','direct_abstract_declarator',3,'p_direct_abstract_declarator','parser_incomplete.py',432),
  ('direct_abstract_declarator -> direct_abstract_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET','direct_abstract_declarator',4,'p_direct_abstract_declarator','parser_incomplete.py',433),
  ('direct_abstract_declarator -> LEFT_BRACKET RIGHT_BRACKET','direct_abstract_declarator',2,'p_direct_abstract_declarator','parser_incomplete.py',434),
  ('direct_abstract_declarator -> LEFT_BRACKET parameter_type_list RIGHT_BRACKET','direct_abstract_declarator',3,'p_direct_abstract_declarator','parser_incomplete.py',435),
  ('direct_abstract_declarator -> direct_abstract_declarator LEFT_BRACKET RIGHT_BRACKET','direct_abstract_declarator',3,'p_direct_abstract_declarator','parser_incomplete.py',436),
  ('direct_abstract_declarator -> direct_abstract_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET','direct_abstract_declarator',4,'p_direct_abstract_declarator','parser_incomplete.py',437),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','parser_incomplete.py',443),
  ('initializer -> LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET','initializer',3,'p_initializer','parser_incomplete.py',444),
  ('initializer -> LEFT_CURLY_BRACKET initializer_list COMMA RIGHT_CURLY_BRACKET','initializer',4,'p_initializer','parser_incomplete.py',445),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','parser_incomplete.py',451),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','parser_incomplete.py',452),
  ('statement -> labeled_statement','statement',1,'p_statement','parser_incomplete.py',458),
  ('statement -> compound_statement','statement',1,'p_statement','parser_incomplete.py',459),
  ('statement -> expression_statement','statement',1,'p_statement','parser_incomplete.py',460),
  ('statement -> selection_statement','statement',1,'p_statement','parser_incomplete.py',461),
  ('statement -> iteration_statement','statement',1,'p_statement','parser_incomplete.py',462),
  ('statement -> jump_statement','statement',1,'p_statement','parser_incomplete.py',463),
  ('labeled_statement -> IDENTIFIER COLON statement','labeled_statement',3,'p_labeled_statement','parser_incomplete.py',469),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement','parser_incomplete.py',470),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement','parser_incomplete.py',471),
  ('compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET','compound_statement',2,'p_compound_statement','parser_incomplete.py',479),
  ('compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET','compound_statement',3,'p_compound_statement','parser_incomplete.py',480),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','parser_incomplete.py',486),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','parser_incomplete.py',487),
  ('block_item -> declaration','block_item',1,'p_block_item','parser_incomplete.py',493),
  ('block_item -> statement','block_item',1,'p_block_item','parser_incomplete.py',494),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser_incomplete.py',522),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser_incomplete.py',523),
  ('expression_statement -> SEMICOLON','expression_statement',1,'p_expression_statement','parser_incomplete.py',529),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser_incomplete.py',530),
  ('selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement','selection_statement',5,'p_selection_statement','parser_incomplete.py',537),
  ('selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement','selection_statement',7,'p_selection_statement','parser_incomplete.py',538),
  ('selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement','selection_statement',5,'p_selection_statement','parser_incomplete.py',539),
  ('iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement','iteration_statement',5,'p_iteration_statement','parser_incomplete.py',546),
  ('iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON','iteration_statement',7,'p_iteration_statement','parser_incomplete.py',547),
  ('iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement','iteration_statement',6,'p_iteration_statement','parser_incomplete.py',548),
  ('iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement','iteration_statement',7,'p_iteration_statement','parser_incomplete.py',549),
  ('jump_statement -> GOTO IDENTIFIER SEMICOLON','jump_statement',3,'p_jump_statement','parser_incomplete.py',555),
  ('jump_statement -> CONTINUE SEMICOLON','jump_statement',2,'p_jump_statement','parser_incomplete.py',556),
  ('jump_statement -> BREAK SEMICOLON','jump_statement',2,'p_jump_statement','parser_incomplete.py',557),
  ('jump_statement -> RETURN SEMICOLON','jump_statement',2,'p_jump_statement','parser_incomplete.py',558),
  ('jump_statement -> RETURN expression SEMICOLON','jump_statement',3,'p_jump_statement','parser_incomplete.py',559),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','parser_incomplete.py',565),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','parser_incomplete.py',566),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','parser_incomplete.py',572),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','parser_incomplete.py',573),
  ('function_definition -> declaration_specifiers declarator declaration_list compound_statement','function_definition',4,'p_function_definition','parser_incomplete.py',580),
  ('function_definition -> declaration_specifiers declarator compound_statement','function_definition',3,'p_function_definition','parser_incomplete.py',581),
  ('function_definition -> declarator declaration_list compound_statement','function_definition',3,'p_function_definition','parser_incomplete.py',582),
  ('function_definition -> declarator compound_statement','function_definition',2,'p_function_definition','parser_incomplete.py',583),
  ('inheritance_specifier -> access_specifier IDENTIFIER','inheritance_specifier',2,'p_inheritance_specifier','parser_incomplete.py',589),
  ('inheritance_specifier_list -> inheritance_specifier','inheritance_specifier_list',1,'p_inheritance_specifier_list','parser_incomplete.py',594),
  ('inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier','inheritance_specifier_list',3,'p_inheritance_specifier_list','parser_incomplete.py',595),
  ('access_specifier -> PRIVATE','access_specifier',1,'p_access_specifier','parser_incomplete.py',600),
  ('access_specifier -> PUBLIC','access_specifier',1,'p_access_specifier','parser_incomplete.py',601),
  ('access_specifier -> PROTECTED','access_specifier',1,'p_access_specifier','parser_incomplete.py',602),
  ('class_definition_head -> CLASS','class_definition_head',1,'p_class_definition_head','parser_incomplete.py',607),
  ('class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list','class_definition_head',3,'p_class_definition_head','parser_incomplete.py',608),
  ('class_definition_head -> CLASS IDENTIFIER','class_definition_head',2,'p_class_definition_head','parser_incomplete.py',609),
  ('class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list','class_definition_head',4,'p_class_definition_head','parser_incomplete.py',610),
  ('class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET','class_definition',4,'p_class_definition','parser_incomplete.py',615),
  ('class_definition -> class_definition_head','class_definition',1,'p_class_definition','parser_incomplete.py',616),
  ('class_internal_definition_list -> class_internal_definition','class_internal_definition_list',1,'p_class_internal_definition_list','parser_incomplete.py',621),
  ('class_internal_definition_list -> class_internal_definition_list class_internal_definition','class_internal_definition_list',2,'p_class_internal_definition_list','parser_incomplete.py',622),
  ('class_internal_definition -> access_specifier LEFT_CURLY_BRACKET class_member_list RIGHT_CURLY_BRACKET SEMICOLON','class_internal_definition',5,'p_class_internal_definition','parser_incomplete.py',627),
  ('class_member_list -> class_member','class_member_list',1,'p_class_member_list','parser_incomplete.py',632),
  ('class_member_list -> class_member_list class_member','class_member_list',2,'p_class_member_list','parser_incomplete.py',633),
  ('class_member -> function_definition','class_member',1,'p_class_member','parser_incomplete.py',638),
  ('class_member -> declaration','class_member',1,'p_class_member','parser_incomplete.py',639),
]
