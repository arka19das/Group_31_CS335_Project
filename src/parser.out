Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> translation_unit
Rule 2     primary_expression -> IDENTIFIER
Rule 3     primary_expression -> FLOAT_CONSTANT
Rule 4     primary_expression -> HEX_CONSTANT
Rule 5     primary_expression -> OCT_CONSTANT
Rule 6     primary_expression -> INT_CONSTANT
Rule 7     primary_expression -> CHAR_CONSTANT
Rule 8     primary_expression -> STRING_LITERAL
Rule 9     primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET
Rule 10    postfix_expression -> primary_expression
Rule 11    postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
Rule 12    postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET
Rule 13    postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
Rule 14    postfix_expression -> postfix_expression DOT IDENTIFIER
Rule 15    postfix_expression -> postfix_expression PTR_OP IDENTIFIER
Rule 16    postfix_expression -> postfix_expression INC_OP
Rule 17    postfix_expression -> postfix_expression DEC_OP
Rule 18    argument_expression_list -> assignment_expression
Rule 19    argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 20    unary_expression -> postfix_expression
Rule 21    unary_expression -> INC_OP unary_expression
Rule 22    unary_expression -> DEC_OP unary_expression
Rule 23    unary_expression -> unary_operator cast_expression
Rule 24    unary_expression -> SIZEOF unary_expression
Rule 25    unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
Rule 26    unary_operator -> BITWISE_AND
Rule 27    unary_operator -> MULTIPLY
Rule 28    unary_operator -> PLUS
Rule 29    unary_operator -> MINUS
Rule 30    unary_operator -> BITWISE_NOT
Rule 31    unary_operator -> LOGICAL_NOT
Rule 32    cast_expression -> unary_expression
Rule 33    cast_expression -> ( type_name ) cast_expression
Rule 34    multiplicative_expression -> cast_expression
Rule 35    multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression
Rule 36    multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 37    multiplicative_expression -> multiplicative_expression MOD cast_expression
Rule 38    additive_expression -> multiplicative_expression
Rule 39    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 40    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 41    shift_expression -> additive_expression
Rule 42    shift_expression -> shift_expression LEFT_OP additive_expression
Rule 43    shift_expression -> shift_expression RIGHT_OP additive_expression
Rule 44    relational_expression -> shift_expression
Rule 45    relational_expression -> relational_expression LESS shift_expression
Rule 46    relational_expression -> relational_expression GREATER shift_expression
Rule 47    relational_expression -> relational_expression LE_OP shift_expression
Rule 48    relational_expression -> relational_expression GE_OP shift_expression
Rule 49    equality_expression -> relational_expression
Rule 50    equality_expression -> equality_expression EQ_OP relational_expression
Rule 51    equality_expression -> equality_expression NE_OP relational_expression
Rule 52    and_expression -> equality_expression
Rule 53    and_expression -> and_expression BITWISE_AND equality_expression
Rule 54    exclusive_or_expression -> and_expression
Rule 55    exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression
Rule 56    inclusive_or_expression -> exclusive_or_expression
Rule 57    inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression
Rule 58    logical_and_expression -> inclusive_or_expression
Rule 59    logical_and_expression -> logical_and_expression LOGICAL_AND_OP inclusive_or_expression
Rule 60    logical_or_expression -> logical_and_expression
Rule 61    logical_or_expression -> logical_or_expression LOGICAL_OR_OP logical_and_expression
Rule 62    conditional_expression -> logical_or_expression
Rule 63    conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression
Rule 64    assignment_expression -> conditional_expression
Rule 65    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 66    assignment_operator -> EQ
Rule 67    assignment_operator -> MUL_ASSIGN
Rule 68    assignment_operator -> DIV_ASSIGN
Rule 69    assignment_operator -> MOD_ASSIGN
Rule 70    assignment_operator -> ADD_ASSIGN
Rule 71    assignment_operator -> SUB_ASSIGN
Rule 72    assignment_operator -> LEFT_ASSIGN
Rule 73    assignment_operator -> RIGHT_ASSIGN
Rule 74    assignment_operator -> AND_ASSIGN
Rule 75    assignment_operator -> XOR_ASSIGN
Rule 76    assignment_operator -> OR_ASSIGN
Rule 77    expression -> assignment_expression
Rule 78    expression -> expression COMMA assignment_expression
Rule 79    constant_expression -> conditional_expression
Rule 80    declaration -> declaration_specifiers SEMICOLON
Rule 81    declaration -> declaration_specifiers init_declarator_list SEMICOLON
Rule 82    declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule 83    declaration_specifiers -> storage_class_specifier
Rule 84    declaration_specifiers -> type_specifier declaration_specifiers
Rule 85    declaration_specifiers -> type_specifier
Rule 86    declaration_specifiers -> type_qualifier declaration_specifiers
Rule 87    declaration_specifiers -> type_qualifier
Rule 88    init_declarator_list -> init_declarator
Rule 89    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 90    init_declarator -> declarator
Rule 91    init_declarator -> declarator EQ initializer
Rule 92    storage_class_specifier -> TYPEDEF
Rule 93    storage_class_specifier -> AUTO
Rule 94    type_specifier -> VOID
Rule 95    type_specifier -> CHAR
Rule 96    type_specifier -> SHORT
Rule 97    type_specifier -> INT
Rule 98    type_specifier -> LONG
Rule 99    type_specifier -> FLOAT
Rule 100   type_specifier -> DOUBLE
Rule 101   type_specifier -> SIGNED
Rule 102   type_specifier -> UNSIGNED
Rule 103   type_specifier -> BOOL
Rule 104   type_specifier -> struct_specifier
Rule 105   type_specifier -> class_definition
Rule 106   type_specifier -> TYPE_NAME
Rule 107   struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
Rule 108   struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
Rule 109   struct_specifier -> STRUCT IDENTIFIER
Rule 110   struct_declaration_list -> struct_declaration
Rule 111   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 112   struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON
Rule 113   specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 114   specifier_qualifier_list -> type_specifier
Rule 115   specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 116   specifier_qualifier_list -> type_qualifier
Rule 117   struct_declarator_list -> struct_declarator
Rule 118   struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 119   struct_declarator -> declarator
Rule 120   struct_declarator -> COLON constant_expression
Rule 121   struct_declarator -> declarator COLON constant_expression
Rule 122   type_qualifier -> CONST
Rule 123   declarator -> pointer direct_declarator
Rule 124   declarator -> direct_declarator
Rule 125   direct_declarator -> IDENTIFIER
Rule 126   direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET
Rule 127   direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
Rule 128   direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
Rule 129   direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET
Rule 130   direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET
Rule 131   direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET
Rule 132   pointer -> MULTIPLY
Rule 133   pointer -> MULTIPLY type_qualifier_list
Rule 134   pointer -> MULTIPLY pointer
Rule 135   pointer -> MULTIPLY type_qualifier_list pointer
Rule 136   type_qualifier_list -> type_qualifier
Rule 137   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 138   parameter_type_list -> parameter_list
Rule 139   parameter_list -> parameter_declaration
Rule 140   parameter_list -> parameter_list COMMA parameter_declaration
Rule 141   parameter_declaration -> declaration_specifiers declarator
Rule 142   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 143   parameter_declaration -> declaration_specifiers
Rule 144   identifier_list -> IDENTIFIER
Rule 145   identifier_list -> identifier_list COMMA IDENTIFIER
Rule 146   type_name -> specifier_qualifier_list
Rule 147   type_name -> specifier_qualifier_list abstract_declarator
Rule 148   abstract_declarator -> pointer
Rule 149   abstract_declarator -> direct_abstract_declarator
Rule 150   abstract_declarator -> pointer direct_abstract_declarator
Rule 151   direct_abstract_declarator -> LEFT_BRACKET abstract_declarator RIGHT_BRACKET
Rule 152   direct_abstract_declarator -> LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
Rule 153   direct_abstract_declarator -> LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
Rule 154   direct_abstract_declarator -> direct_abstract_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
Rule 155   direct_abstract_declarator -> direct_abstract_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
Rule 156   direct_abstract_declarator -> LEFT_BRACKET RIGHT_BRACKET
Rule 157   direct_abstract_declarator -> LEFT_BRACKET parameter_type_list RIGHT_BRACKET
Rule 158   direct_abstract_declarator -> direct_abstract_declarator LEFT_BRACKET RIGHT_BRACKET
Rule 159   direct_abstract_declarator -> direct_abstract_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET
Rule 160   initializer -> assignment_expression
Rule 161   initializer -> LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET
Rule 162   initializer -> LEFT_CURLY_BRACKET initializer_list COMMA RIGHT_CURLY_BRACKET
Rule 163   initializer_list -> initializer
Rule 164   initializer_list -> initializer_list COMMA initializer
Rule 165   statement -> labeled_statement
Rule 166   statement -> compound_statement
Rule 167   statement -> expression_statement
Rule 168   statement -> selection_statement
Rule 169   statement -> iteration_statement
Rule 170   statement -> jump_statement
Rule 171   labeled_statement -> IDENTIFIER COLON statement
Rule 172   labeled_statement -> CASE constant_expression COLON statement
Rule 173   labeled_statement -> DEFAULT COLON statement
Rule 174   compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
Rule 175   compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET
Rule 176   block_item_list -> block_item
Rule 177   block_item_list -> block_item_list block_item
Rule 178   block_item -> declaration
Rule 179   block_item -> statement
Rule 180   declaration_list -> declaration
Rule 181   declaration_list -> declaration_list declaration
Rule 182   expression_statement -> SEMICOLON
Rule 183   expression_statement -> expression SEMICOLON
Rule 184   selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement
Rule 185   selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement
Rule 186   selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement
Rule 187   iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement
Rule 188   iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON
Rule 189   iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement
Rule 190   iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement
Rule 191   jump_statement -> GOTO IDENTIFIER SEMICOLON
Rule 192   jump_statement -> CONTINUE SEMICOLON
Rule 193   jump_statement -> BREAK SEMICOLON
Rule 194   jump_statement -> RETURN SEMICOLON
Rule 195   jump_statement -> RETURN expression SEMICOLON
Rule 196   translation_unit -> external_declaration
Rule 197   translation_unit -> translation_unit external_declaration
Rule 198   external_declaration -> function_definition
Rule 199   external_declaration -> declaration
Rule 200   function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 201   function_definition -> declaration_specifiers declarator compound_statement
Rule 202   function_definition -> declarator declaration_list compound_statement
Rule 203   function_definition -> declarator compound_statement
Rule 204   inheritance_specifier -> access_specifier IDENTIFIER
Rule 205   inheritance_specifier_list -> inheritance_specifier
Rule 206   inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier
Rule 207   access_specifier -> PRIVATE
Rule 208   access_specifier -> PUBLIC
Rule 209   access_specifier -> PROTECTED
Rule 210   class_definition_head -> CLASS
Rule 211   class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list
Rule 212   class_definition_head -> CLASS IDENTIFIER
Rule 213   class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list
Rule 214   class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
Rule 215   class_definition -> class_definition_head
Rule 216   class_internal_definition_list -> class_internal_definition
Rule 217   class_internal_definition_list -> class_internal_definition_list class_internal_definition
Rule 218   class_internal_definition -> access_specifier LEFT_CURLY_BRACKET class_member_list RIGHT_CURLY_BRACKET SEMICOLON
Rule 219   class_member_list -> class_member
Rule 220   class_member_list -> class_member_list class_member
Rule 221   class_member -> function_definition
Rule 222   class_member -> declaration

Terminals, with rules where they appear

(                    : 33
)                    : 33
ADD_ASSIGN           : 70
AND_ASSIGN           : 74
AUTO                 : 93
BITWISE_AND          : 26 53
BITWISE_NOT          : 30
BITWISE_OR           : 57
BITWISE_XOR          : 55
BOOL                 : 103
BREAK                : 193
CASE                 : 172
CHAR                 : 95
CHAR_CONSTANT        : 7
CLASS                : 210 211 212 213
COLON                : 63 120 121 171 172 173
COMMA                : 19 78 89 118 140 145 162 164 206
CONST                : 122
CONTINUE             : 192
DEC_OP               : 17 22
DEFAULT              : 173
DIVIDE               : 36
DIV_ASSIGN           : 68
DO                   : 188
DOT                  : 14
DOUBLE               : 100
ELSE                 : 185
EQ                   : 66 91
EQ_OP                : 50
FLOAT                : 99
FLOAT_CONSTANT       : 3
FOR                  : 189 190
GE_OP                : 48
GOTO                 : 191
GREATER              : 46
HEX_CONSTANT         : 4
IDENTIFIER           : 2 14 15 107 109 125 144 145 171 191 204 212 213
IF                   : 184 185
INC_OP               : 16 21
INHERITANCE_OP       : 211 213
INT                  : 97
INT_CONSTANT         : 6
LEFT_ASSIGN          : 72
LEFT_BRACKET         : 9 12 13 25 126 129 130 131 151 156 157 158 159 184 185 186 187 188 189 190
LEFT_CURLY_BRACKET   : 107 108 161 162 174 175 214 218
LEFT_OP              : 42
LEFT_THIRD_BRACKET   : 11 127 128 152 153 154 155
LESS                 : 45
LE_OP                : 47
LOGICAL_AND_OP       : 59
LOGICAL_NOT          : 31
LOGICAL_OR_OP        : 61
LONG                 : 98
MINUS                : 29 40
MOD                  : 37
MOD_ASSIGN           : 69
MULTIPLY             : 27 35 132 133 134 135
MUL_ASSIGN           : 67
NE_OP                : 51
OCT_CONSTANT         : 5
OR_ASSIGN            : 76
PLUS                 : 28 39
PRIVATE              : 207
PROTECTED            : 209
PTR_OP               : 15
PUBLIC               : 208
QUESTION             : 63
RETURN               : 194 195
RIGHT_ASSIGN         : 73
RIGHT_BRACKET        : 9 12 13 25 126 129 130 131 151 156 157 158 159 184 185 186 187 188 189 190
RIGHT_CURLY_BRACKET  : 107 108 161 162 174 175 214 218
RIGHT_OP             : 43
RIGHT_THIRD_BRACKET  : 11 127 128 152 153 154 155
SEMICOLON            : 80 81 112 182 183 188 191 192 193 194 195 218
SHORT                : 96
SIGNED               : 101
SIZEOF               : 24 25
STRING_LITERAL       : 8
STRUCT               : 107 108 109
SUB_ASSIGN           : 71
SWITCH               : 186
TYPEDEF              : 92
TYPE_NAME            : 106
UNSIGNED             : 102
VOID                 : 94
WHILE                : 187 188
XOR_ASSIGN           : 75
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 142 147 151
access_specifier     : 204 218
additive_expression  : 39 40 41 42 43
and_expression       : 53 54 55
argument_expression_list : 13 19
assignment_expression : 18 19 65 77 78 160
assignment_operator  : 65
block_item           : 176 177
block_item_list      : 175 177
cast_expression      : 23 33 34 35 36 37
class_definition     : 105
class_definition_head : 214 215
class_internal_definition : 216 217
class_internal_definition_list : 214 217
class_member         : 219 220
class_member_list    : 218 220
compound_statement   : 166 184 185 185 186 187 188 189 190 200 201 202 203
conditional_expression : 63 64 79
constant_expression  : 120 121 127 153 155 172
declaration          : 178 180 181 199 222
declaration_list     : 181 200 202
declaration_specifiers : 80 81 82 84 86 141 142 143 200 201
declarator           : 90 91 119 121 126 141 200 201 202 203
direct_abstract_declarator : 149 150 154 155 158 159
direct_declarator    : 123 124 127 128 129 130 131
equality_expression  : 50 51 52 53
exclusive_or_expression : 55 56 57
expression           : 9 11 63 78 183 184 185 186 187 188 190 195
expression_statement : 167 189 189 190 190
external_declaration : 196 197
function_definition  : 198 221
identifier_list      : 130 145
inclusive_or_expression : 57 58 59
inheritance_specifier : 205 206
inheritance_specifier_list : 206 211 213
init_declarator      : 88 89
init_declarator_list : 81 89
initializer          : 91 163 164
initializer_list     : 161 162 164
iteration_statement  : 169
jump_statement       : 170
labeled_statement    : 165
logical_and_expression : 59 60 61
logical_or_expression : 61 62 63
multiplicative_expression : 35 36 37 38 39 40
parameter_declaration : 139 140
parameter_list       : 138 140
parameter_type_list  : 129 157 159
pointer              : 123 134 135 148 150
postfix_expression   : 11 12 13 14 15 16 17 20
primary_expression   : 10
relational_expression : 45 46 47 48 49 50 51
selection_statement  : 168
shift_expression     : 42 43 44 45 46 47 48
specifier_qualifier_list : 112 113 115 146 147
start                : 0
statement            : 171 172 173 179
storage_class_specifier : 82 83
struct_declaration   : 110 111
struct_declaration_list : 107 108 111
struct_declarator    : 117 118
struct_declarator_list : 112 118
struct_specifier     : 104
translation_unit     : 1 197
type_name            : 25 33
type_qualifier       : 86 87 115 116 136 137
type_qualifier_list  : 133 135 137
type_specifier       : 84 85 113 114
unary_expression     : 21 22 24 32 65
unary_operator       : 23

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . translation_unit
    (196) translation_unit -> . external_declaration
    (197) translation_unit -> . translation_unit external_declaration
    (198) external_declaration -> . function_definition
    (199) external_declaration -> . declaration
    (200) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (201) function_definition -> . declaration_specifiers declarator compound_statement
    (202) function_definition -> . declarator declaration_list compound_statement
    (203) function_definition -> . declarator compound_statement
    (80) declaration -> . declaration_specifiers SEMICOLON
    (81) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (123) declarator -> . pointer direct_declarator
    (124) declarator -> . direct_declarator
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . AUTO
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (132) pointer -> . MULTIPLY
    (133) pointer -> . MULTIPLY type_qualifier_list
    (134) pointer -> . MULTIPLY pointer
    (135) pointer -> . MULTIPLY type_qualifier_list pointer
    (125) direct_declarator -> . IDENTIFIER
    (126) direct_declarator -> . LEFT_BRACKET declarator RIGHT_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (128) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (129) direct_declarator -> . direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (130) direct_declarator -> . direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET
    (131) direct_declarator -> . direct_declarator LEFT_BRACKET RIGHT_BRACKET
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list

    TYPEDEF         shift and go to state 13
    AUTO            shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    MULTIPLY        shift and go to state 29
    IDENTIFIER      shift and go to state 30
    LEFT_BRACKET    shift and go to state 31
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34

    start                          shift and go to state 1
    translation_unit               shift and go to state 2
    external_declaration           shift and go to state 3
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    declaration_specifiers         shift and go to state 6
    declarator                     shift and go to state 7
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    class_definition_head          shift and go to state 33

state 1

    (0) S' -> start .



state 2

    (1) start -> translation_unit .
    (197) translation_unit -> translation_unit . external_declaration
    (198) external_declaration -> . function_definition
    (199) external_declaration -> . declaration
    (200) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (201) function_definition -> . declaration_specifiers declarator compound_statement
    (202) function_definition -> . declarator declaration_list compound_statement
    (203) function_definition -> . declarator compound_statement
    (80) declaration -> . declaration_specifiers SEMICOLON
    (81) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (123) declarator -> . pointer direct_declarator
    (124) declarator -> . direct_declarator
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . AUTO
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (132) pointer -> . MULTIPLY
    (133) pointer -> . MULTIPLY type_qualifier_list
    (134) pointer -> . MULTIPLY pointer
    (135) pointer -> . MULTIPLY type_qualifier_list pointer
    (125) direct_declarator -> . IDENTIFIER
    (126) direct_declarator -> . LEFT_BRACKET declarator RIGHT_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (128) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (129) direct_declarator -> . direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (130) direct_declarator -> . direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET
    (131) direct_declarator -> . direct_declarator LEFT_BRACKET RIGHT_BRACKET
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list

    $end            reduce using rule 1 (start -> translation_unit .)
    TYPEDEF         shift and go to state 13
    AUTO            shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    MULTIPLY        shift and go to state 29
    IDENTIFIER      shift and go to state 30
    LEFT_BRACKET    shift and go to state 31
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34

    external_declaration           shift and go to state 35
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    declaration_specifiers         shift and go to state 6
    declarator                     shift and go to state 7
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    class_definition_head          shift and go to state 33

state 3

    (196) translation_unit -> external_declaration .

    TYPEDEF         reduce using rule 196 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 196 (translation_unit -> external_declaration .)
    VOID            reduce using rule 196 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 196 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 196 (translation_unit -> external_declaration .)
    INT             reduce using rule 196 (translation_unit -> external_declaration .)
    LONG            reduce using rule 196 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 196 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 196 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 196 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 196 (translation_unit -> external_declaration .)
    BOOL            reduce using rule 196 (translation_unit -> external_declaration .)
    TYPE_NAME       reduce using rule 196 (translation_unit -> external_declaration .)
    CONST           reduce using rule 196 (translation_unit -> external_declaration .)
    MULTIPLY        reduce using rule 196 (translation_unit -> external_declaration .)
    IDENTIFIER      reduce using rule 196 (translation_unit -> external_declaration .)
    LEFT_BRACKET    reduce using rule 196 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 196 (translation_unit -> external_declaration .)
    CLASS           reduce using rule 196 (translation_unit -> external_declaration .)
    $end            reduce using rule 196 (translation_unit -> external_declaration .)


state 4

    (198) external_declaration -> function_definition .

    TYPEDEF         reduce using rule 198 (external_declaration -> function_definition .)
    AUTO            reduce using rule 198 (external_declaration -> function_definition .)
    VOID            reduce using rule 198 (external_declaration -> function_definition .)
    CHAR            reduce using rule 198 (external_declaration -> function_definition .)
    SHORT           reduce using rule 198 (external_declaration -> function_definition .)
    INT             reduce using rule 198 (external_declaration -> function_definition .)
    LONG            reduce using rule 198 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 198 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 198 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 198 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 198 (external_declaration -> function_definition .)
    BOOL            reduce using rule 198 (external_declaration -> function_definition .)
    TYPE_NAME       reduce using rule 198 (external_declaration -> function_definition .)
    CONST           reduce using rule 198 (external_declaration -> function_definition .)
    MULTIPLY        reduce using rule 198 (external_declaration -> function_definition .)
    IDENTIFIER      reduce using rule 198 (external_declaration -> function_definition .)
    LEFT_BRACKET    reduce using rule 198 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 198 (external_declaration -> function_definition .)
    CLASS           reduce using rule 198 (external_declaration -> function_definition .)
    $end            reduce using rule 198 (external_declaration -> function_definition .)


state 5

    (199) external_declaration -> declaration .

    TYPEDEF         reduce using rule 199 (external_declaration -> declaration .)
    AUTO            reduce using rule 199 (external_declaration -> declaration .)
    VOID            reduce using rule 199 (external_declaration -> declaration .)
    CHAR            reduce using rule 199 (external_declaration -> declaration .)
    SHORT           reduce using rule 199 (external_declaration -> declaration .)
    INT             reduce using rule 199 (external_declaration -> declaration .)
    LONG            reduce using rule 199 (external_declaration -> declaration .)
    FLOAT           reduce using rule 199 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 199 (external_declaration -> declaration .)
    SIGNED          reduce using rule 199 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 199 (external_declaration -> declaration .)
    BOOL            reduce using rule 199 (external_declaration -> declaration .)
    TYPE_NAME       reduce using rule 199 (external_declaration -> declaration .)
    CONST           reduce using rule 199 (external_declaration -> declaration .)
    MULTIPLY        reduce using rule 199 (external_declaration -> declaration .)
    IDENTIFIER      reduce using rule 199 (external_declaration -> declaration .)
    LEFT_BRACKET    reduce using rule 199 (external_declaration -> declaration .)
    STRUCT          reduce using rule 199 (external_declaration -> declaration .)
    CLASS           reduce using rule 199 (external_declaration -> declaration .)
    $end            reduce using rule 199 (external_declaration -> declaration .)


state 6

    (200) function_definition -> declaration_specifiers . declarator declaration_list compound_statement
    (201) function_definition -> declaration_specifiers . declarator compound_statement
    (80) declaration -> declaration_specifiers . SEMICOLON
    (81) declaration -> declaration_specifiers . init_declarator_list SEMICOLON
    (123) declarator -> . pointer direct_declarator
    (124) declarator -> . direct_declarator
    (88) init_declarator_list -> . init_declarator
    (89) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (132) pointer -> . MULTIPLY
    (133) pointer -> . MULTIPLY type_qualifier_list
    (134) pointer -> . MULTIPLY pointer
    (135) pointer -> . MULTIPLY type_qualifier_list pointer
    (125) direct_declarator -> . IDENTIFIER
    (126) direct_declarator -> . LEFT_BRACKET declarator RIGHT_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (128) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (129) direct_declarator -> . direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (130) direct_declarator -> . direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET
    (131) direct_declarator -> . direct_declarator LEFT_BRACKET RIGHT_BRACKET
    (90) init_declarator -> . declarator
    (91) init_declarator -> . declarator EQ initializer

    SEMICOLON       shift and go to state 37
    MULTIPLY        shift and go to state 29
    IDENTIFIER      shift and go to state 30
    LEFT_BRACKET    shift and go to state 31

    declarator                     shift and go to state 36
    init_declarator_list           shift and go to state 38
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12
    init_declarator                shift and go to state 39

state 7

    (202) function_definition -> declarator . declaration_list compound_statement
    (203) function_definition -> declarator . compound_statement
    (180) declaration_list -> . declaration
    (181) declaration_list -> . declaration_list declaration
    (174) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (175) compound_statement -> . LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET
    (80) declaration -> . declaration_specifiers SEMICOLON
    (81) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . AUTO
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list

    LEFT_CURLY_BRACKET shift and go to state 43
    TYPEDEF         shift and go to state 13
    AUTO            shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34

    declaration_list               shift and go to state 40
    compound_statement             shift and go to state 41
    declaration                    shift and go to state 42
    declaration_specifiers         shift and go to state 44
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    class_definition_head          shift and go to state 33

state 8

    (82) declaration_specifiers -> storage_class_specifier . declaration_specifiers
    (83) declaration_specifiers -> storage_class_specifier .
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . AUTO
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list

    SEMICOLON       reduce using rule 83 (declaration_specifiers -> storage_class_specifier .)
    MULTIPLY        reduce using rule 83 (declaration_specifiers -> storage_class_specifier .)
    IDENTIFIER      reduce using rule 83 (declaration_specifiers -> storage_class_specifier .)
    LEFT_BRACKET    reduce using rule 83 (declaration_specifiers -> storage_class_specifier .)
    LEFT_THIRD_BRACKET reduce using rule 83 (declaration_specifiers -> storage_class_specifier .)
    COMMA           reduce using rule 83 (declaration_specifiers -> storage_class_specifier .)
    RIGHT_BRACKET   reduce using rule 83 (declaration_specifiers -> storage_class_specifier .)
    TYPEDEF         shift and go to state 13
    AUTO            shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34

    storage_class_specifier        shift and go to state 8
    declaration_specifiers         shift and go to state 45
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    class_definition_head          shift and go to state 33

state 9

    (84) declaration_specifiers -> type_specifier . declaration_specifiers
    (85) declaration_specifiers -> type_specifier .
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . AUTO
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list

    SEMICOLON       reduce using rule 85 (declaration_specifiers -> type_specifier .)
    MULTIPLY        reduce using rule 85 (declaration_specifiers -> type_specifier .)
    IDENTIFIER      reduce using rule 85 (declaration_specifiers -> type_specifier .)
    LEFT_BRACKET    reduce using rule 85 (declaration_specifiers -> type_specifier .)
    LEFT_THIRD_BRACKET reduce using rule 85 (declaration_specifiers -> type_specifier .)
    COMMA           reduce using rule 85 (declaration_specifiers -> type_specifier .)
    RIGHT_BRACKET   reduce using rule 85 (declaration_specifiers -> type_specifier .)
    TYPEDEF         shift and go to state 13
    AUTO            shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34

    type_specifier                 shift and go to state 9
    declaration_specifiers         shift and go to state 46
    storage_class_specifier        shift and go to state 8
    type_qualifier                 shift and go to state 10
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    class_definition_head          shift and go to state 33

state 10

    (86) declaration_specifiers -> type_qualifier . declaration_specifiers
    (87) declaration_specifiers -> type_qualifier .
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . AUTO
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list

    SEMICOLON       reduce using rule 87 (declaration_specifiers -> type_qualifier .)
    MULTIPLY        reduce using rule 87 (declaration_specifiers -> type_qualifier .)
    IDENTIFIER      reduce using rule 87 (declaration_specifiers -> type_qualifier .)
    LEFT_BRACKET    reduce using rule 87 (declaration_specifiers -> type_qualifier .)
    LEFT_THIRD_BRACKET reduce using rule 87 (declaration_specifiers -> type_qualifier .)
    COMMA           reduce using rule 87 (declaration_specifiers -> type_qualifier .)
    RIGHT_BRACKET   reduce using rule 87 (declaration_specifiers -> type_qualifier .)
    TYPEDEF         shift and go to state 13
    AUTO            shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34

    type_qualifier                 shift and go to state 10
    declaration_specifiers         shift and go to state 47
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    class_definition_head          shift and go to state 33

state 11

    (123) declarator -> pointer . direct_declarator
    (125) direct_declarator -> . IDENTIFIER
    (126) direct_declarator -> . LEFT_BRACKET declarator RIGHT_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (128) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (129) direct_declarator -> . direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (130) direct_declarator -> . direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET
    (131) direct_declarator -> . direct_declarator LEFT_BRACKET RIGHT_BRACKET

    IDENTIFIER      shift and go to state 30
    LEFT_BRACKET    shift and go to state 31

    direct_declarator              shift and go to state 48

state 12

    (124) declarator -> direct_declarator .
    (127) direct_declarator -> direct_declarator . LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (128) direct_declarator -> direct_declarator . LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (129) direct_declarator -> direct_declarator . LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (130) direct_declarator -> direct_declarator . LEFT_BRACKET identifier_list RIGHT_BRACKET
    (131) direct_declarator -> direct_declarator . LEFT_BRACKET RIGHT_BRACKET

    LEFT_CURLY_BRACKET reduce using rule 124 (declarator -> direct_declarator .)
    TYPEDEF         reduce using rule 124 (declarator -> direct_declarator .)
    AUTO            reduce using rule 124 (declarator -> direct_declarator .)
    VOID            reduce using rule 124 (declarator -> direct_declarator .)
    CHAR            reduce using rule 124 (declarator -> direct_declarator .)
    SHORT           reduce using rule 124 (declarator -> direct_declarator .)
    INT             reduce using rule 124 (declarator -> direct_declarator .)
    LONG            reduce using rule 124 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 124 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 124 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 124 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 124 (declarator -> direct_declarator .)
    BOOL            reduce using rule 124 (declarator -> direct_declarator .)
    TYPE_NAME       reduce using rule 124 (declarator -> direct_declarator .)
    CONST           reduce using rule 124 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 124 (declarator -> direct_declarator .)
    CLASS           reduce using rule 124 (declarator -> direct_declarator .)
    EQ              reduce using rule 124 (declarator -> direct_declarator .)
    SEMICOLON       reduce using rule 124 (declarator -> direct_declarator .)
    COMMA           reduce using rule 124 (declarator -> direct_declarator .)
    RIGHT_BRACKET   reduce using rule 124 (declarator -> direct_declarator .)
    COLON           reduce using rule 124 (declarator -> direct_declarator .)
    LEFT_THIRD_BRACKET shift and go to state 49
    LEFT_BRACKET    shift and go to state 50


state 13

    (92) storage_class_specifier -> TYPEDEF .

    TYPEDEF         reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    BOOL            reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    TYPE_NAME       reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    CLASS           reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    SEMICOLON       reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    MULTIPLY        reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    IDENTIFIER      reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    LEFT_BRACKET    reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    LEFT_THIRD_BRACKET reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    COMMA           reduce using rule 92 (storage_class_specifier -> TYPEDEF .)
    RIGHT_BRACKET   reduce using rule 92 (storage_class_specifier -> TYPEDEF .)


state 14

    (93) storage_class_specifier -> AUTO .

    TYPEDEF         reduce using rule 93 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 93 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 93 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 93 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 93 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 93 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 93 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 93 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 93 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 93 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 93 (storage_class_specifier -> AUTO .)
    BOOL            reduce using rule 93 (storage_class_specifier -> AUTO .)
    TYPE_NAME       reduce using rule 93 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 93 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 93 (storage_class_specifier -> AUTO .)
    CLASS           reduce using rule 93 (storage_class_specifier -> AUTO .)
    SEMICOLON       reduce using rule 93 (storage_class_specifier -> AUTO .)
    MULTIPLY        reduce using rule 93 (storage_class_specifier -> AUTO .)
    IDENTIFIER      reduce using rule 93 (storage_class_specifier -> AUTO .)
    LEFT_BRACKET    reduce using rule 93 (storage_class_specifier -> AUTO .)
    LEFT_THIRD_BRACKET reduce using rule 93 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 93 (storage_class_specifier -> AUTO .)
    RIGHT_BRACKET   reduce using rule 93 (storage_class_specifier -> AUTO .)


state 15

    (94) type_specifier -> VOID .

    TYPEDEF         reduce using rule 94 (type_specifier -> VOID .)
    AUTO            reduce using rule 94 (type_specifier -> VOID .)
    VOID            reduce using rule 94 (type_specifier -> VOID .)
    CHAR            reduce using rule 94 (type_specifier -> VOID .)
    SHORT           reduce using rule 94 (type_specifier -> VOID .)
    INT             reduce using rule 94 (type_specifier -> VOID .)
    LONG            reduce using rule 94 (type_specifier -> VOID .)
    FLOAT           reduce using rule 94 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 94 (type_specifier -> VOID .)
    SIGNED          reduce using rule 94 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 94 (type_specifier -> VOID .)
    BOOL            reduce using rule 94 (type_specifier -> VOID .)
    TYPE_NAME       reduce using rule 94 (type_specifier -> VOID .)
    CONST           reduce using rule 94 (type_specifier -> VOID .)
    STRUCT          reduce using rule 94 (type_specifier -> VOID .)
    CLASS           reduce using rule 94 (type_specifier -> VOID .)
    SEMICOLON       reduce using rule 94 (type_specifier -> VOID .)
    MULTIPLY        reduce using rule 94 (type_specifier -> VOID .)
    IDENTIFIER      reduce using rule 94 (type_specifier -> VOID .)
    LEFT_BRACKET    reduce using rule 94 (type_specifier -> VOID .)
    LEFT_THIRD_BRACKET reduce using rule 94 (type_specifier -> VOID .)
    COMMA           reduce using rule 94 (type_specifier -> VOID .)
    RIGHT_BRACKET   reduce using rule 94 (type_specifier -> VOID .)
    COLON           reduce using rule 94 (type_specifier -> VOID .)
    )               reduce using rule 94 (type_specifier -> VOID .)


state 16

    (95) type_specifier -> CHAR .

    TYPEDEF         reduce using rule 95 (type_specifier -> CHAR .)
    AUTO            reduce using rule 95 (type_specifier -> CHAR .)
    VOID            reduce using rule 95 (type_specifier -> CHAR .)
    CHAR            reduce using rule 95 (type_specifier -> CHAR .)
    SHORT           reduce using rule 95 (type_specifier -> CHAR .)
    INT             reduce using rule 95 (type_specifier -> CHAR .)
    LONG            reduce using rule 95 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 95 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 95 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 95 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 95 (type_specifier -> CHAR .)
    BOOL            reduce using rule 95 (type_specifier -> CHAR .)
    TYPE_NAME       reduce using rule 95 (type_specifier -> CHAR .)
    CONST           reduce using rule 95 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 95 (type_specifier -> CHAR .)
    CLASS           reduce using rule 95 (type_specifier -> CHAR .)
    SEMICOLON       reduce using rule 95 (type_specifier -> CHAR .)
    MULTIPLY        reduce using rule 95 (type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 95 (type_specifier -> CHAR .)
    LEFT_BRACKET    reduce using rule 95 (type_specifier -> CHAR .)
    LEFT_THIRD_BRACKET reduce using rule 95 (type_specifier -> CHAR .)
    COMMA           reduce using rule 95 (type_specifier -> CHAR .)
    RIGHT_BRACKET   reduce using rule 95 (type_specifier -> CHAR .)
    COLON           reduce using rule 95 (type_specifier -> CHAR .)
    )               reduce using rule 95 (type_specifier -> CHAR .)


state 17

    (96) type_specifier -> SHORT .

    TYPEDEF         reduce using rule 96 (type_specifier -> SHORT .)
    AUTO            reduce using rule 96 (type_specifier -> SHORT .)
    VOID            reduce using rule 96 (type_specifier -> SHORT .)
    CHAR            reduce using rule 96 (type_specifier -> SHORT .)
    SHORT           reduce using rule 96 (type_specifier -> SHORT .)
    INT             reduce using rule 96 (type_specifier -> SHORT .)
    LONG            reduce using rule 96 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 96 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 96 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 96 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 96 (type_specifier -> SHORT .)
    BOOL            reduce using rule 96 (type_specifier -> SHORT .)
    TYPE_NAME       reduce using rule 96 (type_specifier -> SHORT .)
    CONST           reduce using rule 96 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 96 (type_specifier -> SHORT .)
    CLASS           reduce using rule 96 (type_specifier -> SHORT .)
    SEMICOLON       reduce using rule 96 (type_specifier -> SHORT .)
    MULTIPLY        reduce using rule 96 (type_specifier -> SHORT .)
    IDENTIFIER      reduce using rule 96 (type_specifier -> SHORT .)
    LEFT_BRACKET    reduce using rule 96 (type_specifier -> SHORT .)
    LEFT_THIRD_BRACKET reduce using rule 96 (type_specifier -> SHORT .)
    COMMA           reduce using rule 96 (type_specifier -> SHORT .)
    RIGHT_BRACKET   reduce using rule 96 (type_specifier -> SHORT .)
    COLON           reduce using rule 96 (type_specifier -> SHORT .)
    )               reduce using rule 96 (type_specifier -> SHORT .)


state 18

    (97) type_specifier -> INT .

    TYPEDEF         reduce using rule 97 (type_specifier -> INT .)
    AUTO            reduce using rule 97 (type_specifier -> INT .)
    VOID            reduce using rule 97 (type_specifier -> INT .)
    CHAR            reduce using rule 97 (type_specifier -> INT .)
    SHORT           reduce using rule 97 (type_specifier -> INT .)
    INT             reduce using rule 97 (type_specifier -> INT .)
    LONG            reduce using rule 97 (type_specifier -> INT .)
    FLOAT           reduce using rule 97 (type_specifier -> INT .)
    DOUBLE          reduce using rule 97 (type_specifier -> INT .)
    SIGNED          reduce using rule 97 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 97 (type_specifier -> INT .)
    BOOL            reduce using rule 97 (type_specifier -> INT .)
    TYPE_NAME       reduce using rule 97 (type_specifier -> INT .)
    CONST           reduce using rule 97 (type_specifier -> INT .)
    STRUCT          reduce using rule 97 (type_specifier -> INT .)
    CLASS           reduce using rule 97 (type_specifier -> INT .)
    SEMICOLON       reduce using rule 97 (type_specifier -> INT .)
    MULTIPLY        reduce using rule 97 (type_specifier -> INT .)
    IDENTIFIER      reduce using rule 97 (type_specifier -> INT .)
    LEFT_BRACKET    reduce using rule 97 (type_specifier -> INT .)
    LEFT_THIRD_BRACKET reduce using rule 97 (type_specifier -> INT .)
    COMMA           reduce using rule 97 (type_specifier -> INT .)
    RIGHT_BRACKET   reduce using rule 97 (type_specifier -> INT .)
    COLON           reduce using rule 97 (type_specifier -> INT .)
    )               reduce using rule 97 (type_specifier -> INT .)


state 19

    (98) type_specifier -> LONG .

    TYPEDEF         reduce using rule 98 (type_specifier -> LONG .)
    AUTO            reduce using rule 98 (type_specifier -> LONG .)
    VOID            reduce using rule 98 (type_specifier -> LONG .)
    CHAR            reduce using rule 98 (type_specifier -> LONG .)
    SHORT           reduce using rule 98 (type_specifier -> LONG .)
    INT             reduce using rule 98 (type_specifier -> LONG .)
    LONG            reduce using rule 98 (type_specifier -> LONG .)
    FLOAT           reduce using rule 98 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 98 (type_specifier -> LONG .)
    SIGNED          reduce using rule 98 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 98 (type_specifier -> LONG .)
    BOOL            reduce using rule 98 (type_specifier -> LONG .)
    TYPE_NAME       reduce using rule 98 (type_specifier -> LONG .)
    CONST           reduce using rule 98 (type_specifier -> LONG .)
    STRUCT          reduce using rule 98 (type_specifier -> LONG .)
    CLASS           reduce using rule 98 (type_specifier -> LONG .)
    SEMICOLON       reduce using rule 98 (type_specifier -> LONG .)
    MULTIPLY        reduce using rule 98 (type_specifier -> LONG .)
    IDENTIFIER      reduce using rule 98 (type_specifier -> LONG .)
    LEFT_BRACKET    reduce using rule 98 (type_specifier -> LONG .)
    LEFT_THIRD_BRACKET reduce using rule 98 (type_specifier -> LONG .)
    COMMA           reduce using rule 98 (type_specifier -> LONG .)
    RIGHT_BRACKET   reduce using rule 98 (type_specifier -> LONG .)
    COLON           reduce using rule 98 (type_specifier -> LONG .)
    )               reduce using rule 98 (type_specifier -> LONG .)


state 20

    (99) type_specifier -> FLOAT .

    TYPEDEF         reduce using rule 99 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 99 (type_specifier -> FLOAT .)
    VOID            reduce using rule 99 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 99 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 99 (type_specifier -> FLOAT .)
    INT             reduce using rule 99 (type_specifier -> FLOAT .)
    LONG            reduce using rule 99 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 99 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 99 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 99 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 99 (type_specifier -> FLOAT .)
    BOOL            reduce using rule 99 (type_specifier -> FLOAT .)
    TYPE_NAME       reduce using rule 99 (type_specifier -> FLOAT .)
    CONST           reduce using rule 99 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 99 (type_specifier -> FLOAT .)
    CLASS           reduce using rule 99 (type_specifier -> FLOAT .)
    SEMICOLON       reduce using rule 99 (type_specifier -> FLOAT .)
    MULTIPLY        reduce using rule 99 (type_specifier -> FLOAT .)
    IDENTIFIER      reduce using rule 99 (type_specifier -> FLOAT .)
    LEFT_BRACKET    reduce using rule 99 (type_specifier -> FLOAT .)
    LEFT_THIRD_BRACKET reduce using rule 99 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 99 (type_specifier -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 99 (type_specifier -> FLOAT .)
    COLON           reduce using rule 99 (type_specifier -> FLOAT .)
    )               reduce using rule 99 (type_specifier -> FLOAT .)


state 21

    (100) type_specifier -> DOUBLE .

    TYPEDEF         reduce using rule 100 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 100 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 100 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 100 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 100 (type_specifier -> DOUBLE .)
    INT             reduce using rule 100 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 100 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 100 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 100 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 100 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 100 (type_specifier -> DOUBLE .)
    BOOL            reduce using rule 100 (type_specifier -> DOUBLE .)
    TYPE_NAME       reduce using rule 100 (type_specifier -> DOUBLE .)
    CONST           reduce using rule 100 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 100 (type_specifier -> DOUBLE .)
    CLASS           reduce using rule 100 (type_specifier -> DOUBLE .)
    SEMICOLON       reduce using rule 100 (type_specifier -> DOUBLE .)
    MULTIPLY        reduce using rule 100 (type_specifier -> DOUBLE .)
    IDENTIFIER      reduce using rule 100 (type_specifier -> DOUBLE .)
    LEFT_BRACKET    reduce using rule 100 (type_specifier -> DOUBLE .)
    LEFT_THIRD_BRACKET reduce using rule 100 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 100 (type_specifier -> DOUBLE .)
    RIGHT_BRACKET   reduce using rule 100 (type_specifier -> DOUBLE .)
    COLON           reduce using rule 100 (type_specifier -> DOUBLE .)
    )               reduce using rule 100 (type_specifier -> DOUBLE .)


state 22

    (101) type_specifier -> SIGNED .

    TYPEDEF         reduce using rule 101 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 101 (type_specifier -> SIGNED .)
    VOID            reduce using rule 101 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 101 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 101 (type_specifier -> SIGNED .)
    INT             reduce using rule 101 (type_specifier -> SIGNED .)
    LONG            reduce using rule 101 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 101 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 101 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 101 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 101 (type_specifier -> SIGNED .)
    BOOL            reduce using rule 101 (type_specifier -> SIGNED .)
    TYPE_NAME       reduce using rule 101 (type_specifier -> SIGNED .)
    CONST           reduce using rule 101 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 101 (type_specifier -> SIGNED .)
    CLASS           reduce using rule 101 (type_specifier -> SIGNED .)
    SEMICOLON       reduce using rule 101 (type_specifier -> SIGNED .)
    MULTIPLY        reduce using rule 101 (type_specifier -> SIGNED .)
    IDENTIFIER      reduce using rule 101 (type_specifier -> SIGNED .)
    LEFT_BRACKET    reduce using rule 101 (type_specifier -> SIGNED .)
    LEFT_THIRD_BRACKET reduce using rule 101 (type_specifier -> SIGNED .)
    COMMA           reduce using rule 101 (type_specifier -> SIGNED .)
    RIGHT_BRACKET   reduce using rule 101 (type_specifier -> SIGNED .)
    COLON           reduce using rule 101 (type_specifier -> SIGNED .)
    )               reduce using rule 101 (type_specifier -> SIGNED .)


state 23

    (102) type_specifier -> UNSIGNED .

    TYPEDEF         reduce using rule 102 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 102 (type_specifier -> UNSIGNED .)
    VOID            reduce using rule 102 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 102 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 102 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 102 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 102 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 102 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 102 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 102 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 102 (type_specifier -> UNSIGNED .)
    BOOL            reduce using rule 102 (type_specifier -> UNSIGNED .)
    TYPE_NAME       reduce using rule 102 (type_specifier -> UNSIGNED .)
    CONST           reduce using rule 102 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 102 (type_specifier -> UNSIGNED .)
    CLASS           reduce using rule 102 (type_specifier -> UNSIGNED .)
    SEMICOLON       reduce using rule 102 (type_specifier -> UNSIGNED .)
    MULTIPLY        reduce using rule 102 (type_specifier -> UNSIGNED .)
    IDENTIFIER      reduce using rule 102 (type_specifier -> UNSIGNED .)
    LEFT_BRACKET    reduce using rule 102 (type_specifier -> UNSIGNED .)
    LEFT_THIRD_BRACKET reduce using rule 102 (type_specifier -> UNSIGNED .)
    COMMA           reduce using rule 102 (type_specifier -> UNSIGNED .)
    RIGHT_BRACKET   reduce using rule 102 (type_specifier -> UNSIGNED .)
    COLON           reduce using rule 102 (type_specifier -> UNSIGNED .)
    )               reduce using rule 102 (type_specifier -> UNSIGNED .)


state 24

    (103) type_specifier -> BOOL .

    TYPEDEF         reduce using rule 103 (type_specifier -> BOOL .)
    AUTO            reduce using rule 103 (type_specifier -> BOOL .)
    VOID            reduce using rule 103 (type_specifier -> BOOL .)
    CHAR            reduce using rule 103 (type_specifier -> BOOL .)
    SHORT           reduce using rule 103 (type_specifier -> BOOL .)
    INT             reduce using rule 103 (type_specifier -> BOOL .)
    LONG            reduce using rule 103 (type_specifier -> BOOL .)
    FLOAT           reduce using rule 103 (type_specifier -> BOOL .)
    DOUBLE          reduce using rule 103 (type_specifier -> BOOL .)
    SIGNED          reduce using rule 103 (type_specifier -> BOOL .)
    UNSIGNED        reduce using rule 103 (type_specifier -> BOOL .)
    BOOL            reduce using rule 103 (type_specifier -> BOOL .)
    TYPE_NAME       reduce using rule 103 (type_specifier -> BOOL .)
    CONST           reduce using rule 103 (type_specifier -> BOOL .)
    STRUCT          reduce using rule 103 (type_specifier -> BOOL .)
    CLASS           reduce using rule 103 (type_specifier -> BOOL .)
    SEMICOLON       reduce using rule 103 (type_specifier -> BOOL .)
    MULTIPLY        reduce using rule 103 (type_specifier -> BOOL .)
    IDENTIFIER      reduce using rule 103 (type_specifier -> BOOL .)
    LEFT_BRACKET    reduce using rule 103 (type_specifier -> BOOL .)
    LEFT_THIRD_BRACKET reduce using rule 103 (type_specifier -> BOOL .)
    COMMA           reduce using rule 103 (type_specifier -> BOOL .)
    RIGHT_BRACKET   reduce using rule 103 (type_specifier -> BOOL .)
    COLON           reduce using rule 103 (type_specifier -> BOOL .)
    )               reduce using rule 103 (type_specifier -> BOOL .)


state 25

    (104) type_specifier -> struct_specifier .

    TYPEDEF         reduce using rule 104 (type_specifier -> struct_specifier .)
    AUTO            reduce using rule 104 (type_specifier -> struct_specifier .)
    VOID            reduce using rule 104 (type_specifier -> struct_specifier .)
    CHAR            reduce using rule 104 (type_specifier -> struct_specifier .)
    SHORT           reduce using rule 104 (type_specifier -> struct_specifier .)
    INT             reduce using rule 104 (type_specifier -> struct_specifier .)
    LONG            reduce using rule 104 (type_specifier -> struct_specifier .)
    FLOAT           reduce using rule 104 (type_specifier -> struct_specifier .)
    DOUBLE          reduce using rule 104 (type_specifier -> struct_specifier .)
    SIGNED          reduce using rule 104 (type_specifier -> struct_specifier .)
    UNSIGNED        reduce using rule 104 (type_specifier -> struct_specifier .)
    BOOL            reduce using rule 104 (type_specifier -> struct_specifier .)
    TYPE_NAME       reduce using rule 104 (type_specifier -> struct_specifier .)
    CONST           reduce using rule 104 (type_specifier -> struct_specifier .)
    STRUCT          reduce using rule 104 (type_specifier -> struct_specifier .)
    CLASS           reduce using rule 104 (type_specifier -> struct_specifier .)
    SEMICOLON       reduce using rule 104 (type_specifier -> struct_specifier .)
    MULTIPLY        reduce using rule 104 (type_specifier -> struct_specifier .)
    IDENTIFIER      reduce using rule 104 (type_specifier -> struct_specifier .)
    LEFT_BRACKET    reduce using rule 104 (type_specifier -> struct_specifier .)
    LEFT_THIRD_BRACKET reduce using rule 104 (type_specifier -> struct_specifier .)
    COMMA           reduce using rule 104 (type_specifier -> struct_specifier .)
    RIGHT_BRACKET   reduce using rule 104 (type_specifier -> struct_specifier .)
    COLON           reduce using rule 104 (type_specifier -> struct_specifier .)
    )               reduce using rule 104 (type_specifier -> struct_specifier .)


state 26

    (105) type_specifier -> class_definition .

    TYPEDEF         reduce using rule 105 (type_specifier -> class_definition .)
    AUTO            reduce using rule 105 (type_specifier -> class_definition .)
    VOID            reduce using rule 105 (type_specifier -> class_definition .)
    CHAR            reduce using rule 105 (type_specifier -> class_definition .)
    SHORT           reduce using rule 105 (type_specifier -> class_definition .)
    INT             reduce using rule 105 (type_specifier -> class_definition .)
    LONG            reduce using rule 105 (type_specifier -> class_definition .)
    FLOAT           reduce using rule 105 (type_specifier -> class_definition .)
    DOUBLE          reduce using rule 105 (type_specifier -> class_definition .)
    SIGNED          reduce using rule 105 (type_specifier -> class_definition .)
    UNSIGNED        reduce using rule 105 (type_specifier -> class_definition .)
    BOOL            reduce using rule 105 (type_specifier -> class_definition .)
    TYPE_NAME       reduce using rule 105 (type_specifier -> class_definition .)
    CONST           reduce using rule 105 (type_specifier -> class_definition .)
    STRUCT          reduce using rule 105 (type_specifier -> class_definition .)
    CLASS           reduce using rule 105 (type_specifier -> class_definition .)
    SEMICOLON       reduce using rule 105 (type_specifier -> class_definition .)
    MULTIPLY        reduce using rule 105 (type_specifier -> class_definition .)
    IDENTIFIER      reduce using rule 105 (type_specifier -> class_definition .)
    LEFT_BRACKET    reduce using rule 105 (type_specifier -> class_definition .)
    LEFT_THIRD_BRACKET reduce using rule 105 (type_specifier -> class_definition .)
    COMMA           reduce using rule 105 (type_specifier -> class_definition .)
    RIGHT_BRACKET   reduce using rule 105 (type_specifier -> class_definition .)
    COLON           reduce using rule 105 (type_specifier -> class_definition .)
    )               reduce using rule 105 (type_specifier -> class_definition .)


state 27

    (106) type_specifier -> TYPE_NAME .

    TYPEDEF         reduce using rule 106 (type_specifier -> TYPE_NAME .)
    AUTO            reduce using rule 106 (type_specifier -> TYPE_NAME .)
    VOID            reduce using rule 106 (type_specifier -> TYPE_NAME .)
    CHAR            reduce using rule 106 (type_specifier -> TYPE_NAME .)
    SHORT           reduce using rule 106 (type_specifier -> TYPE_NAME .)
    INT             reduce using rule 106 (type_specifier -> TYPE_NAME .)
    LONG            reduce using rule 106 (type_specifier -> TYPE_NAME .)
    FLOAT           reduce using rule 106 (type_specifier -> TYPE_NAME .)
    DOUBLE          reduce using rule 106 (type_specifier -> TYPE_NAME .)
    SIGNED          reduce using rule 106 (type_specifier -> TYPE_NAME .)
    UNSIGNED        reduce using rule 106 (type_specifier -> TYPE_NAME .)
    BOOL            reduce using rule 106 (type_specifier -> TYPE_NAME .)
    TYPE_NAME       reduce using rule 106 (type_specifier -> TYPE_NAME .)
    CONST           reduce using rule 106 (type_specifier -> TYPE_NAME .)
    STRUCT          reduce using rule 106 (type_specifier -> TYPE_NAME .)
    CLASS           reduce using rule 106 (type_specifier -> TYPE_NAME .)
    SEMICOLON       reduce using rule 106 (type_specifier -> TYPE_NAME .)
    MULTIPLY        reduce using rule 106 (type_specifier -> TYPE_NAME .)
    IDENTIFIER      reduce using rule 106 (type_specifier -> TYPE_NAME .)
    LEFT_BRACKET    reduce using rule 106 (type_specifier -> TYPE_NAME .)
    LEFT_THIRD_BRACKET reduce using rule 106 (type_specifier -> TYPE_NAME .)
    COMMA           reduce using rule 106 (type_specifier -> TYPE_NAME .)
    RIGHT_BRACKET   reduce using rule 106 (type_specifier -> TYPE_NAME .)
    COLON           reduce using rule 106 (type_specifier -> TYPE_NAME .)
    )               reduce using rule 106 (type_specifier -> TYPE_NAME .)


state 28

    (122) type_qualifier -> CONST .

    TYPEDEF         reduce using rule 122 (type_qualifier -> CONST .)
    AUTO            reduce using rule 122 (type_qualifier -> CONST .)
    VOID            reduce using rule 122 (type_qualifier -> CONST .)
    CHAR            reduce using rule 122 (type_qualifier -> CONST .)
    SHORT           reduce using rule 122 (type_qualifier -> CONST .)
    INT             reduce using rule 122 (type_qualifier -> CONST .)
    LONG            reduce using rule 122 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 122 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 122 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 122 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 122 (type_qualifier -> CONST .)
    BOOL            reduce using rule 122 (type_qualifier -> CONST .)
    TYPE_NAME       reduce using rule 122 (type_qualifier -> CONST .)
    CONST           reduce using rule 122 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 122 (type_qualifier -> CONST .)
    CLASS           reduce using rule 122 (type_qualifier -> CONST .)
    SEMICOLON       reduce using rule 122 (type_qualifier -> CONST .)
    MULTIPLY        reduce using rule 122 (type_qualifier -> CONST .)
    IDENTIFIER      reduce using rule 122 (type_qualifier -> CONST .)
    LEFT_BRACKET    reduce using rule 122 (type_qualifier -> CONST .)
    LEFT_THIRD_BRACKET reduce using rule 122 (type_qualifier -> CONST .)
    COMMA           reduce using rule 122 (type_qualifier -> CONST .)
    RIGHT_BRACKET   reduce using rule 122 (type_qualifier -> CONST .)
    )               reduce using rule 122 (type_qualifier -> CONST .)
    COLON           reduce using rule 122 (type_qualifier -> CONST .)


state 29

    (132) pointer -> MULTIPLY .
    (133) pointer -> MULTIPLY . type_qualifier_list
    (134) pointer -> MULTIPLY . pointer
    (135) pointer -> MULTIPLY . type_qualifier_list pointer
    (136) type_qualifier_list -> . type_qualifier
    (137) type_qualifier_list -> . type_qualifier_list type_qualifier
    (132) pointer -> . MULTIPLY
    (133) pointer -> . MULTIPLY type_qualifier_list
    (134) pointer -> . MULTIPLY pointer
    (135) pointer -> . MULTIPLY type_qualifier_list pointer
    (122) type_qualifier -> . CONST

    IDENTIFIER      reduce using rule 132 (pointer -> MULTIPLY .)
    LEFT_BRACKET    reduce using rule 132 (pointer -> MULTIPLY .)
    LEFT_THIRD_BRACKET reduce using rule 132 (pointer -> MULTIPLY .)
    COMMA           reduce using rule 132 (pointer -> MULTIPLY .)
    RIGHT_BRACKET   reduce using rule 132 (pointer -> MULTIPLY .)
    )               reduce using rule 132 (pointer -> MULTIPLY .)
    MULTIPLY        shift and go to state 29
    CONST           shift and go to state 28

    type_qualifier_list            shift and go to state 51
    pointer                        shift and go to state 52
    type_qualifier                 shift and go to state 53

state 30

    (125) direct_declarator -> IDENTIFIER .

    LEFT_THIRD_BRACKET reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    LEFT_CURLY_BRACKET reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    TYPEDEF         reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    AUTO            reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    VOID            reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    CHAR            reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    SHORT           reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    INT             reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    LONG            reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    FLOAT           reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    DOUBLE          reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    SIGNED          reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    UNSIGNED        reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    BOOL            reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    TYPE_NAME       reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    CONST           reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    STRUCT          reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    CLASS           reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    EQ              reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    SEMICOLON       reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    COMMA           reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    COLON           reduce using rule 125 (direct_declarator -> IDENTIFIER .)


state 31

    (126) direct_declarator -> LEFT_BRACKET . declarator RIGHT_BRACKET
    (123) declarator -> . pointer direct_declarator
    (124) declarator -> . direct_declarator
    (132) pointer -> . MULTIPLY
    (133) pointer -> . MULTIPLY type_qualifier_list
    (134) pointer -> . MULTIPLY pointer
    (135) pointer -> . MULTIPLY type_qualifier_list pointer
    (125) direct_declarator -> . IDENTIFIER
    (126) direct_declarator -> . LEFT_BRACKET declarator RIGHT_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (128) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (129) direct_declarator -> . direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (130) direct_declarator -> . direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET
    (131) direct_declarator -> . direct_declarator LEFT_BRACKET RIGHT_BRACKET

    MULTIPLY        shift and go to state 29
    IDENTIFIER      shift and go to state 30
    LEFT_BRACKET    shift and go to state 31

    declarator                     shift and go to state 54
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12

state 32

    (107) struct_specifier -> STRUCT . IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> STRUCT . LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> STRUCT . IDENTIFIER

    IDENTIFIER      shift and go to state 55
    LEFT_CURLY_BRACKET shift and go to state 56


state 33

    (214) class_definition -> class_definition_head . LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> class_definition_head .

    LEFT_CURLY_BRACKET shift and go to state 57
    TYPEDEF         reduce using rule 215 (class_definition -> class_definition_head .)
    AUTO            reduce using rule 215 (class_definition -> class_definition_head .)
    VOID            reduce using rule 215 (class_definition -> class_definition_head .)
    CHAR            reduce using rule 215 (class_definition -> class_definition_head .)
    SHORT           reduce using rule 215 (class_definition -> class_definition_head .)
    INT             reduce using rule 215 (class_definition -> class_definition_head .)
    LONG            reduce using rule 215 (class_definition -> class_definition_head .)
    FLOAT           reduce using rule 215 (class_definition -> class_definition_head .)
    DOUBLE          reduce using rule 215 (class_definition -> class_definition_head .)
    SIGNED          reduce using rule 215 (class_definition -> class_definition_head .)
    UNSIGNED        reduce using rule 215 (class_definition -> class_definition_head .)
    BOOL            reduce using rule 215 (class_definition -> class_definition_head .)
    TYPE_NAME       reduce using rule 215 (class_definition -> class_definition_head .)
    CONST           reduce using rule 215 (class_definition -> class_definition_head .)
    STRUCT          reduce using rule 215 (class_definition -> class_definition_head .)
    CLASS           reduce using rule 215 (class_definition -> class_definition_head .)
    SEMICOLON       reduce using rule 215 (class_definition -> class_definition_head .)
    MULTIPLY        reduce using rule 215 (class_definition -> class_definition_head .)
    IDENTIFIER      reduce using rule 215 (class_definition -> class_definition_head .)
    LEFT_BRACKET    reduce using rule 215 (class_definition -> class_definition_head .)
    LEFT_THIRD_BRACKET reduce using rule 215 (class_definition -> class_definition_head .)
    COMMA           reduce using rule 215 (class_definition -> class_definition_head .)
    RIGHT_BRACKET   reduce using rule 215 (class_definition -> class_definition_head .)
    COLON           reduce using rule 215 (class_definition -> class_definition_head .)
    )               reduce using rule 215 (class_definition -> class_definition_head .)


state 34

    (210) class_definition_head -> CLASS .
    (211) class_definition_head -> CLASS . INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> CLASS . IDENTIFIER
    (213) class_definition_head -> CLASS . IDENTIFIER INHERITANCE_OP inheritance_specifier_list

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LEFT_CURLY_BRACKET reduce using rule 210 (class_definition_head -> CLASS .)
    TYPEDEF         reduce using rule 210 (class_definition_head -> CLASS .)
    AUTO            reduce using rule 210 (class_definition_head -> CLASS .)
    VOID            reduce using rule 210 (class_definition_head -> CLASS .)
    CHAR            reduce using rule 210 (class_definition_head -> CLASS .)
    SHORT           reduce using rule 210 (class_definition_head -> CLASS .)
    INT             reduce using rule 210 (class_definition_head -> CLASS .)
    LONG            reduce using rule 210 (class_definition_head -> CLASS .)
    FLOAT           reduce using rule 210 (class_definition_head -> CLASS .)
    DOUBLE          reduce using rule 210 (class_definition_head -> CLASS .)
    SIGNED          reduce using rule 210 (class_definition_head -> CLASS .)
    UNSIGNED        reduce using rule 210 (class_definition_head -> CLASS .)
    BOOL            reduce using rule 210 (class_definition_head -> CLASS .)
    TYPE_NAME       reduce using rule 210 (class_definition_head -> CLASS .)
    CONST           reduce using rule 210 (class_definition_head -> CLASS .)
    STRUCT          reduce using rule 210 (class_definition_head -> CLASS .)
    CLASS           reduce using rule 210 (class_definition_head -> CLASS .)
    SEMICOLON       reduce using rule 210 (class_definition_head -> CLASS .)
    MULTIPLY        reduce using rule 210 (class_definition_head -> CLASS .)
    LEFT_BRACKET    reduce using rule 210 (class_definition_head -> CLASS .)
    LEFT_THIRD_BRACKET reduce using rule 210 (class_definition_head -> CLASS .)
    COMMA           reduce using rule 210 (class_definition_head -> CLASS .)
    RIGHT_BRACKET   reduce using rule 210 (class_definition_head -> CLASS .)
    COLON           reduce using rule 210 (class_definition_head -> CLASS .)
    )               reduce using rule 210 (class_definition_head -> CLASS .)
    INHERITANCE_OP  shift and go to state 58
    IDENTIFIER      shift and go to state 59

  ! IDENTIFIER      [ reduce using rule 210 (class_definition_head -> CLASS .) ]


state 35

    (197) translation_unit -> translation_unit external_declaration .

    TYPEDEF         reduce using rule 197 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 197 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 197 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 197 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 197 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 197 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 197 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 197 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 197 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 197 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 197 (translation_unit -> translation_unit external_declaration .)
    BOOL            reduce using rule 197 (translation_unit -> translation_unit external_declaration .)
    TYPE_NAME       reduce using rule 197 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 197 (translation_unit -> translation_unit external_declaration .)
    MULTIPLY        reduce using rule 197 (translation_unit -> translation_unit external_declaration .)
    IDENTIFIER      reduce using rule 197 (translation_unit -> translation_unit external_declaration .)
    LEFT_BRACKET    reduce using rule 197 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 197 (translation_unit -> translation_unit external_declaration .)
    CLASS           reduce using rule 197 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 197 (translation_unit -> translation_unit external_declaration .)


state 36

    (200) function_definition -> declaration_specifiers declarator . declaration_list compound_statement
    (201) function_definition -> declaration_specifiers declarator . compound_statement
    (90) init_declarator -> declarator .
    (91) init_declarator -> declarator . EQ initializer
    (180) declaration_list -> . declaration
    (181) declaration_list -> . declaration_list declaration
    (174) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (175) compound_statement -> . LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET
    (80) declaration -> . declaration_specifiers SEMICOLON
    (81) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . AUTO
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list

    SEMICOLON       reduce using rule 90 (init_declarator -> declarator .)
    COMMA           reduce using rule 90 (init_declarator -> declarator .)
    EQ              shift and go to state 62
    LEFT_CURLY_BRACKET shift and go to state 43
    TYPEDEF         shift and go to state 13
    AUTO            shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34

    declaration_specifiers         shift and go to state 44
    declaration_list               shift and go to state 60
    compound_statement             shift and go to state 61
    declaration                    shift and go to state 42
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    class_definition_head          shift and go to state 33

state 37

    (80) declaration -> declaration_specifiers SEMICOLON .

    TYPEDEF         reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    AUTO            reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    VOID            reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    CHAR            reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    SHORT           reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    INT             reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    LONG            reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    FLOAT           reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    DOUBLE          reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    SIGNED          reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    UNSIGNED        reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    BOOL            reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    TYPE_NAME       reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    CONST           reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    MULTIPLY        reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    IDENTIFIER      reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    LEFT_BRACKET    reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    STRUCT          reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    CLASS           reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    $end            reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    CASE            reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    DEFAULT         reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    SEMICOLON       reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    IF              reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    SWITCH          reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    WHILE           reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    DO              reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    FOR             reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    GOTO            reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    CONTINUE        reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    BREAK           reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    RETURN          reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    INC_OP          reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    DEC_OP          reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    SIZEOF          reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    BITWISE_AND     reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    PLUS            reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    MINUS           reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    BITWISE_NOT     reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    LOGICAL_NOT     reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    FLOAT_CONSTANT  reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    HEX_CONSTANT    reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    OCT_CONSTANT    reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    INT_CONSTANT    reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    CHAR_CONSTANT   reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    STRING_LITERAL  reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)
    (               reduce using rule 80 (declaration -> declaration_specifiers SEMICOLON .)


state 38

    (81) declaration -> declaration_specifiers init_declarator_list . SEMICOLON
    (89) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMICOLON       shift and go to state 63
    COMMA           shift and go to state 64


state 39

    (88) init_declarator_list -> init_declarator .

    SEMICOLON       reduce using rule 88 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 88 (init_declarator_list -> init_declarator .)


state 40

    (202) function_definition -> declarator declaration_list . compound_statement
    (181) declaration_list -> declaration_list . declaration
    (174) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (175) compound_statement -> . LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET
    (80) declaration -> . declaration_specifiers SEMICOLON
    (81) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . AUTO
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list

    LEFT_CURLY_BRACKET shift and go to state 43
    TYPEDEF         shift and go to state 13
    AUTO            shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34

    compound_statement             shift and go to state 65
    declaration                    shift and go to state 66
    declaration_specifiers         shift and go to state 44
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    class_definition_head          shift and go to state 33

state 41

    (203) function_definition -> declarator compound_statement .

    TYPEDEF         reduce using rule 203 (function_definition -> declarator compound_statement .)
    AUTO            reduce using rule 203 (function_definition -> declarator compound_statement .)
    VOID            reduce using rule 203 (function_definition -> declarator compound_statement .)
    CHAR            reduce using rule 203 (function_definition -> declarator compound_statement .)
    SHORT           reduce using rule 203 (function_definition -> declarator compound_statement .)
    INT             reduce using rule 203 (function_definition -> declarator compound_statement .)
    LONG            reduce using rule 203 (function_definition -> declarator compound_statement .)
    FLOAT           reduce using rule 203 (function_definition -> declarator compound_statement .)
    DOUBLE          reduce using rule 203 (function_definition -> declarator compound_statement .)
    SIGNED          reduce using rule 203 (function_definition -> declarator compound_statement .)
    UNSIGNED        reduce using rule 203 (function_definition -> declarator compound_statement .)
    BOOL            reduce using rule 203 (function_definition -> declarator compound_statement .)
    TYPE_NAME       reduce using rule 203 (function_definition -> declarator compound_statement .)
    CONST           reduce using rule 203 (function_definition -> declarator compound_statement .)
    MULTIPLY        reduce using rule 203 (function_definition -> declarator compound_statement .)
    IDENTIFIER      reduce using rule 203 (function_definition -> declarator compound_statement .)
    LEFT_BRACKET    reduce using rule 203 (function_definition -> declarator compound_statement .)
    STRUCT          reduce using rule 203 (function_definition -> declarator compound_statement .)
    CLASS           reduce using rule 203 (function_definition -> declarator compound_statement .)
    $end            reduce using rule 203 (function_definition -> declarator compound_statement .)
    RIGHT_CURLY_BRACKET reduce using rule 203 (function_definition -> declarator compound_statement .)


state 42

    (180) declaration_list -> declaration .

    LEFT_CURLY_BRACKET reduce using rule 180 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 180 (declaration_list -> declaration .)
    AUTO            reduce using rule 180 (declaration_list -> declaration .)
    VOID            reduce using rule 180 (declaration_list -> declaration .)
    CHAR            reduce using rule 180 (declaration_list -> declaration .)
    SHORT           reduce using rule 180 (declaration_list -> declaration .)
    INT             reduce using rule 180 (declaration_list -> declaration .)
    LONG            reduce using rule 180 (declaration_list -> declaration .)
    FLOAT           reduce using rule 180 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 180 (declaration_list -> declaration .)
    SIGNED          reduce using rule 180 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 180 (declaration_list -> declaration .)
    BOOL            reduce using rule 180 (declaration_list -> declaration .)
    TYPE_NAME       reduce using rule 180 (declaration_list -> declaration .)
    CONST           reduce using rule 180 (declaration_list -> declaration .)
    STRUCT          reduce using rule 180 (declaration_list -> declaration .)
    CLASS           reduce using rule 180 (declaration_list -> declaration .)


state 43

    (174) compound_statement -> LEFT_CURLY_BRACKET . RIGHT_CURLY_BRACKET
    (175) compound_statement -> LEFT_CURLY_BRACKET . block_item_list RIGHT_CURLY_BRACKET
    (176) block_item_list -> . block_item
    (177) block_item_list -> . block_item_list block_item
    (178) block_item -> . declaration
    (179) block_item -> . statement
    (80) declaration -> . declaration_specifiers SEMICOLON
    (81) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (165) statement -> . labeled_statement
    (166) statement -> . compound_statement
    (167) statement -> . expression_statement
    (168) statement -> . selection_statement
    (169) statement -> . iteration_statement
    (170) statement -> . jump_statement
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (171) labeled_statement -> . IDENTIFIER COLON statement
    (172) labeled_statement -> . CASE constant_expression COLON statement
    (173) labeled_statement -> . DEFAULT COLON statement
    (174) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (175) compound_statement -> . LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET
    (182) expression_statement -> . SEMICOLON
    (183) expression_statement -> . expression SEMICOLON
    (184) selection_statement -> . IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement
    (185) selection_statement -> . IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement
    (186) selection_statement -> . SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement
    (187) iteration_statement -> . WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement
    (188) iteration_statement -> . DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON
    (189) iteration_statement -> . FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement
    (190) iteration_statement -> . FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement
    (191) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (192) jump_statement -> . CONTINUE SEMICOLON
    (193) jump_statement -> . BREAK SEMICOLON
    (194) jump_statement -> . RETURN SEMICOLON
    (195) jump_statement -> . RETURN expression SEMICOLON
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . AUTO
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    RIGHT_CURLY_BRACKET shift and go to state 67
    IDENTIFIER      shift and go to state 79
    CASE            shift and go to state 80
    DEFAULT         shift and go to state 81
    LEFT_CURLY_BRACKET shift and go to state 43
    SEMICOLON       shift and go to state 72
    IF              shift and go to state 83
    SWITCH          shift and go to state 85
    WHILE           shift and go to state 86
    DO              shift and go to state 87
    FOR             shift and go to state 88
    GOTO            shift and go to state 89
    CONTINUE        shift and go to state 90
    BREAK           shift and go to state 91
    RETURN          shift and go to state 92
    TYPEDEF         shift and go to state 13
    AUTO            shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    block_item_list                shift and go to state 68
    block_item                     shift and go to state 69
    declaration                    shift and go to state 70
    statement                      shift and go to state 71
    declaration_specifiers         shift and go to state 44
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    expression                     shift and go to state 82
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    assignment_expression          shift and go to state 93
    class_definition_head          shift and go to state 33
    conditional_expression         shift and go to state 94
    unary_expression               shift and go to state 95
    logical_or_expression          shift and go to state 96
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 44

    (80) declaration -> declaration_specifiers . SEMICOLON
    (81) declaration -> declaration_specifiers . init_declarator_list SEMICOLON
    (88) init_declarator_list -> . init_declarator
    (89) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (90) init_declarator -> . declarator
    (91) init_declarator -> . declarator EQ initializer
    (123) declarator -> . pointer direct_declarator
    (124) declarator -> . direct_declarator
    (132) pointer -> . MULTIPLY
    (133) pointer -> . MULTIPLY type_qualifier_list
    (134) pointer -> . MULTIPLY pointer
    (135) pointer -> . MULTIPLY type_qualifier_list pointer
    (125) direct_declarator -> . IDENTIFIER
    (126) direct_declarator -> . LEFT_BRACKET declarator RIGHT_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (128) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (129) direct_declarator -> . direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (130) direct_declarator -> . direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET
    (131) direct_declarator -> . direct_declarator LEFT_BRACKET RIGHT_BRACKET

    SEMICOLON       shift and go to state 37
    MULTIPLY        shift and go to state 29
    IDENTIFIER      shift and go to state 30
    LEFT_BRACKET    shift and go to state 31

    init_declarator_list           shift and go to state 38
    init_declarator                shift and go to state 39
    declarator                     shift and go to state 126
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12

state 45

    (82) declaration_specifiers -> storage_class_specifier declaration_specifiers .

    SEMICOLON       reduce using rule 82 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    MULTIPLY        reduce using rule 82 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 82 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LEFT_BRACKET    reduce using rule 82 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LEFT_THIRD_BRACKET reduce using rule 82 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    COMMA           reduce using rule 82 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    RIGHT_BRACKET   reduce using rule 82 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)


state 46

    (84) declaration_specifiers -> type_specifier declaration_specifiers .

    SEMICOLON       reduce using rule 84 (declaration_specifiers -> type_specifier declaration_specifiers .)
    MULTIPLY        reduce using rule 84 (declaration_specifiers -> type_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 84 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LEFT_BRACKET    reduce using rule 84 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LEFT_THIRD_BRACKET reduce using rule 84 (declaration_specifiers -> type_specifier declaration_specifiers .)
    COMMA           reduce using rule 84 (declaration_specifiers -> type_specifier declaration_specifiers .)
    RIGHT_BRACKET   reduce using rule 84 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 47

    (86) declaration_specifiers -> type_qualifier declaration_specifiers .

    SEMICOLON       reduce using rule 86 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    MULTIPLY        reduce using rule 86 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 86 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    LEFT_BRACKET    reduce using rule 86 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    LEFT_THIRD_BRACKET reduce using rule 86 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    COMMA           reduce using rule 86 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    RIGHT_BRACKET   reduce using rule 86 (declaration_specifiers -> type_qualifier declaration_specifiers .)


state 48

    (123) declarator -> pointer direct_declarator .
    (127) direct_declarator -> direct_declarator . LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (128) direct_declarator -> direct_declarator . LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (129) direct_declarator -> direct_declarator . LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (130) direct_declarator -> direct_declarator . LEFT_BRACKET identifier_list RIGHT_BRACKET
    (131) direct_declarator -> direct_declarator . LEFT_BRACKET RIGHT_BRACKET

    LEFT_CURLY_BRACKET reduce using rule 123 (declarator -> pointer direct_declarator .)
    TYPEDEF         reduce using rule 123 (declarator -> pointer direct_declarator .)
    AUTO            reduce using rule 123 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 123 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 123 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 123 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 123 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 123 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 123 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 123 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 123 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 123 (declarator -> pointer direct_declarator .)
    BOOL            reduce using rule 123 (declarator -> pointer direct_declarator .)
    TYPE_NAME       reduce using rule 123 (declarator -> pointer direct_declarator .)
    CONST           reduce using rule 123 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 123 (declarator -> pointer direct_declarator .)
    CLASS           reduce using rule 123 (declarator -> pointer direct_declarator .)
    EQ              reduce using rule 123 (declarator -> pointer direct_declarator .)
    SEMICOLON       reduce using rule 123 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 123 (declarator -> pointer direct_declarator .)
    RIGHT_BRACKET   reduce using rule 123 (declarator -> pointer direct_declarator .)
    COLON           reduce using rule 123 (declarator -> pointer direct_declarator .)
    LEFT_THIRD_BRACKET shift and go to state 49
    LEFT_BRACKET    shift and go to state 50


state 49

    (127) direct_declarator -> direct_declarator LEFT_THIRD_BRACKET . constant_expression RIGHT_THIRD_BRACKET
    (128) direct_declarator -> direct_declarator LEFT_THIRD_BRACKET . RIGHT_THIRD_BRACKET
    (79) constant_expression -> . conditional_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    RIGHT_THIRD_BRACKET shift and go to state 128
    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    constant_expression            shift and go to state 127
    conditional_expression         shift and go to state 129
    logical_or_expression          shift and go to state 96
    logical_and_expression         shift and go to state 103
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124
    cast_expression                shift and go to state 101
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 50

    (129) direct_declarator -> direct_declarator LEFT_BRACKET . parameter_type_list RIGHT_BRACKET
    (130) direct_declarator -> direct_declarator LEFT_BRACKET . identifier_list RIGHT_BRACKET
    (131) direct_declarator -> direct_declarator LEFT_BRACKET . RIGHT_BRACKET
    (138) parameter_type_list -> . parameter_list
    (144) identifier_list -> . IDENTIFIER
    (145) identifier_list -> . identifier_list COMMA IDENTIFIER
    (139) parameter_list -> . parameter_declaration
    (140) parameter_list -> . parameter_list COMMA parameter_declaration
    (141) parameter_declaration -> . declaration_specifiers declarator
    (142) parameter_declaration -> . declaration_specifiers abstract_declarator
    (143) parameter_declaration -> . declaration_specifiers
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . AUTO
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list

    RIGHT_BRACKET   shift and go to state 133
    IDENTIFIER      shift and go to state 136
    TYPEDEF         shift and go to state 13
    AUTO            shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34

    parameter_type_list            shift and go to state 132
    identifier_list                shift and go to state 134
    parameter_list                 shift and go to state 135
    parameter_declaration          shift and go to state 137
    declaration_specifiers         shift and go to state 138
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    class_definition_head          shift and go to state 33

state 51

    (133) pointer -> MULTIPLY type_qualifier_list .
    (135) pointer -> MULTIPLY type_qualifier_list . pointer
    (137) type_qualifier_list -> type_qualifier_list . type_qualifier
    (132) pointer -> . MULTIPLY
    (133) pointer -> . MULTIPLY type_qualifier_list
    (134) pointer -> . MULTIPLY pointer
    (135) pointer -> . MULTIPLY type_qualifier_list pointer
    (122) type_qualifier -> . CONST

    IDENTIFIER      reduce using rule 133 (pointer -> MULTIPLY type_qualifier_list .)
    LEFT_BRACKET    reduce using rule 133 (pointer -> MULTIPLY type_qualifier_list .)
    LEFT_THIRD_BRACKET reduce using rule 133 (pointer -> MULTIPLY type_qualifier_list .)
    COMMA           reduce using rule 133 (pointer -> MULTIPLY type_qualifier_list .)
    RIGHT_BRACKET   reduce using rule 133 (pointer -> MULTIPLY type_qualifier_list .)
    )               reduce using rule 133 (pointer -> MULTIPLY type_qualifier_list .)
    MULTIPLY        shift and go to state 29
    CONST           shift and go to state 28

    pointer                        shift and go to state 139
    type_qualifier                 shift and go to state 140

state 52

    (134) pointer -> MULTIPLY pointer .

    IDENTIFIER      reduce using rule 134 (pointer -> MULTIPLY pointer .)
    LEFT_BRACKET    reduce using rule 134 (pointer -> MULTIPLY pointer .)
    LEFT_THIRD_BRACKET reduce using rule 134 (pointer -> MULTIPLY pointer .)
    COMMA           reduce using rule 134 (pointer -> MULTIPLY pointer .)
    RIGHT_BRACKET   reduce using rule 134 (pointer -> MULTIPLY pointer .)
    )               reduce using rule 134 (pointer -> MULTIPLY pointer .)


state 53

    (136) type_qualifier_list -> type_qualifier .

    MULTIPLY        reduce using rule 136 (type_qualifier_list -> type_qualifier .)
    CONST           reduce using rule 136 (type_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 136 (type_qualifier_list -> type_qualifier .)
    LEFT_BRACKET    reduce using rule 136 (type_qualifier_list -> type_qualifier .)
    LEFT_THIRD_BRACKET reduce using rule 136 (type_qualifier_list -> type_qualifier .)
    COMMA           reduce using rule 136 (type_qualifier_list -> type_qualifier .)
    RIGHT_BRACKET   reduce using rule 136 (type_qualifier_list -> type_qualifier .)
    )               reduce using rule 136 (type_qualifier_list -> type_qualifier .)


state 54

    (126) direct_declarator -> LEFT_BRACKET declarator . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 141


state 55

    (107) struct_specifier -> STRUCT IDENTIFIER . LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> STRUCT IDENTIFIER .

    LEFT_CURLY_BRACKET shift and go to state 142
    TYPEDEF         reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    AUTO            reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    VOID            reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    CHAR            reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    SHORT           reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    INT             reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    LONG            reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    FLOAT           reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    DOUBLE          reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    SIGNED          reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    UNSIGNED        reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    BOOL            reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    TYPE_NAME       reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    CONST           reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    STRUCT          reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    CLASS           reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    SEMICOLON       reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    MULTIPLY        reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    IDENTIFIER      reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    LEFT_THIRD_BRACKET reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    COMMA           reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    COLON           reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)
    )               reduce using rule 109 (struct_specifier -> STRUCT IDENTIFIER .)


state 56

    (108) struct_specifier -> STRUCT LEFT_CURLY_BRACKET . struct_declaration_list RIGHT_CURLY_BRACKET
    (110) struct_declaration_list -> . struct_declaration
    (111) struct_declaration_list -> . struct_declaration_list struct_declaration
    (112) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (113) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (114) specifier_qualifier_list -> . type_specifier
    (115) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (116) specifier_qualifier_list -> . type_qualifier
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34

    struct_declaration_list        shift and go to state 143
    struct_declaration             shift and go to state 144
    specifier_qualifier_list       shift and go to state 145
    type_specifier                 shift and go to state 146
    type_qualifier                 shift and go to state 147
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    class_definition_head          shift and go to state 33

state 57

    (214) class_definition -> class_definition_head LEFT_CURLY_BRACKET . class_internal_definition_list RIGHT_CURLY_BRACKET
    (216) class_internal_definition_list -> . class_internal_definition
    (217) class_internal_definition_list -> . class_internal_definition_list class_internal_definition
    (218) class_internal_definition -> . access_specifier LEFT_CURLY_BRACKET class_member_list RIGHT_CURLY_BRACKET SEMICOLON
    (207) access_specifier -> . PRIVATE
    (208) access_specifier -> . PUBLIC
    (209) access_specifier -> . PROTECTED

    PRIVATE         shift and go to state 151
    PUBLIC          shift and go to state 152
    PROTECTED       shift and go to state 153

    class_internal_definition_list shift and go to state 148
    class_internal_definition      shift and go to state 149
    access_specifier               shift and go to state 150

state 58

    (211) class_definition_head -> CLASS INHERITANCE_OP . inheritance_specifier_list
    (205) inheritance_specifier_list -> . inheritance_specifier
    (206) inheritance_specifier_list -> . inheritance_specifier_list COMMA inheritance_specifier
    (204) inheritance_specifier -> . access_specifier IDENTIFIER
    (207) access_specifier -> . PRIVATE
    (208) access_specifier -> . PUBLIC
    (209) access_specifier -> . PROTECTED

    PRIVATE         shift and go to state 151
    PUBLIC          shift and go to state 152
    PROTECTED       shift and go to state 153

    inheritance_specifier_list     shift and go to state 154
    inheritance_specifier          shift and go to state 155
    access_specifier               shift and go to state 156

state 59

    (212) class_definition_head -> CLASS IDENTIFIER .
    (213) class_definition_head -> CLASS IDENTIFIER . INHERITANCE_OP inheritance_specifier_list

    LEFT_CURLY_BRACKET reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    TYPEDEF         reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    AUTO            reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    VOID            reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    CHAR            reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    SHORT           reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    INT             reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    LONG            reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    FLOAT           reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    DOUBLE          reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    SIGNED          reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    UNSIGNED        reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    BOOL            reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    TYPE_NAME       reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    CONST           reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    STRUCT          reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    CLASS           reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    SEMICOLON       reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    MULTIPLY        reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    IDENTIFIER      reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    LEFT_THIRD_BRACKET reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    COMMA           reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    COLON           reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    )               reduce using rule 212 (class_definition_head -> CLASS IDENTIFIER .)
    INHERITANCE_OP  shift and go to state 157


state 60

    (200) function_definition -> declaration_specifiers declarator declaration_list . compound_statement
    (181) declaration_list -> declaration_list . declaration
    (174) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (175) compound_statement -> . LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET
    (80) declaration -> . declaration_specifiers SEMICOLON
    (81) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . AUTO
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list

    LEFT_CURLY_BRACKET shift and go to state 43
    TYPEDEF         shift and go to state 13
    AUTO            shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34

    declaration_specifiers         shift and go to state 44
    compound_statement             shift and go to state 158
    declaration                    shift and go to state 66
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    class_definition_head          shift and go to state 33

state 61

    (201) function_definition -> declaration_specifiers declarator compound_statement .

    TYPEDEF         reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    AUTO            reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOID            reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    CHAR            reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    SHORT           reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    LONG            reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    FLOAT           reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    DOUBLE          reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    SIGNED          reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNSIGNED        reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    BOOL            reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    TYPE_NAME       reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    CONST           reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    MULTIPLY        reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    IDENTIFIER      reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    LEFT_BRACKET    reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    STRUCT          reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    CLASS           reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    $end            reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    RIGHT_CURLY_BRACKET reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)


state 62

    (91) init_declarator -> declarator EQ . initializer
    (160) initializer -> . assignment_expression
    (161) initializer -> . LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET
    (162) initializer -> . LEFT_CURLY_BRACKET initializer_list COMMA RIGHT_CURLY_BRACKET
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    LEFT_CURLY_BRACKET shift and go to state 161
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    initializer                    shift and go to state 159
    assignment_expression          shift and go to state 160
    conditional_expression         shift and go to state 94
    unary_expression               shift and go to state 95
    logical_or_expression          shift and go to state 96
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 63

    (81) declaration -> declaration_specifiers init_declarator_list SEMICOLON .

    TYPEDEF         reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    AUTO            reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    VOID            reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CHAR            reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SHORT           reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    INT             reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    LONG            reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    BOOL            reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    TYPE_NAME       reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CONST           reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    MULTIPLY        reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    LEFT_BRACKET    reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CLASS           reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    $end            reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CASE            reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DEFAULT         reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SEMICOLON       reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    IF              reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SWITCH          reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    WHILE           reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DO              reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    FOR             reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    GOTO            reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CONTINUE        reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    BREAK           reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    RETURN          reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    INC_OP          reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DEC_OP          reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SIZEOF          reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    BITWISE_AND     reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    PLUS            reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    MINUS           reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    BITWISE_NOT     reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    LOGICAL_NOT     reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    FLOAT_CONSTANT  reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    HEX_CONSTANT    reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    OCT_CONSTANT    reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    INT_CONSTANT    reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CHAR_CONSTANT   reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    STRING_LITERAL  reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    (               reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)


state 64

    (89) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (90) init_declarator -> . declarator
    (91) init_declarator -> . declarator EQ initializer
    (123) declarator -> . pointer direct_declarator
    (124) declarator -> . direct_declarator
    (132) pointer -> . MULTIPLY
    (133) pointer -> . MULTIPLY type_qualifier_list
    (134) pointer -> . MULTIPLY pointer
    (135) pointer -> . MULTIPLY type_qualifier_list pointer
    (125) direct_declarator -> . IDENTIFIER
    (126) direct_declarator -> . LEFT_BRACKET declarator RIGHT_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (128) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (129) direct_declarator -> . direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (130) direct_declarator -> . direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET
    (131) direct_declarator -> . direct_declarator LEFT_BRACKET RIGHT_BRACKET

    MULTIPLY        shift and go to state 29
    IDENTIFIER      shift and go to state 30
    LEFT_BRACKET    shift and go to state 31

    init_declarator                shift and go to state 162
    declarator                     shift and go to state 126
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12

state 65

    (202) function_definition -> declarator declaration_list compound_statement .

    TYPEDEF         reduce using rule 202 (function_definition -> declarator declaration_list compound_statement .)
    AUTO            reduce using rule 202 (function_definition -> declarator declaration_list compound_statement .)
    VOID            reduce using rule 202 (function_definition -> declarator declaration_list compound_statement .)
    CHAR            reduce using rule 202 (function_definition -> declarator declaration_list compound_statement .)
    SHORT           reduce using rule 202 (function_definition -> declarator declaration_list compound_statement .)
    INT             reduce using rule 202 (function_definition -> declarator declaration_list compound_statement .)
    LONG            reduce using rule 202 (function_definition -> declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 202 (function_definition -> declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 202 (function_definition -> declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 202 (function_definition -> declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 202 (function_definition -> declarator declaration_list compound_statement .)
    BOOL            reduce using rule 202 (function_definition -> declarator declaration_list compound_statement .)
    TYPE_NAME       reduce using rule 202 (function_definition -> declarator declaration_list compound_statement .)
    CONST           reduce using rule 202 (function_definition -> declarator declaration_list compound_statement .)
    MULTIPLY        reduce using rule 202 (function_definition -> declarator declaration_list compound_statement .)
    IDENTIFIER      reduce using rule 202 (function_definition -> declarator declaration_list compound_statement .)
    LEFT_BRACKET    reduce using rule 202 (function_definition -> declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 202 (function_definition -> declarator declaration_list compound_statement .)
    CLASS           reduce using rule 202 (function_definition -> declarator declaration_list compound_statement .)
    $end            reduce using rule 202 (function_definition -> declarator declaration_list compound_statement .)
    RIGHT_CURLY_BRACKET reduce using rule 202 (function_definition -> declarator declaration_list compound_statement .)


state 66

    (181) declaration_list -> declaration_list declaration .

    LEFT_CURLY_BRACKET reduce using rule 181 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 181 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 181 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 181 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 181 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 181 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 181 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 181 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 181 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 181 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 181 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 181 (declaration_list -> declaration_list declaration .)
    BOOL            reduce using rule 181 (declaration_list -> declaration_list declaration .)
    TYPE_NAME       reduce using rule 181 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 181 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 181 (declaration_list -> declaration_list declaration .)
    CLASS           reduce using rule 181 (declaration_list -> declaration_list declaration .)


state 67

    (174) compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .

    TYPEDEF         reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    AUTO            reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    VOID            reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CHAR            reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SHORT           reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    INT             reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    LONG            reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    FLOAT           reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    DOUBLE          reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SIGNED          reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    UNSIGNED        reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    TYPE_NAME       reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CONST           reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    MULTIPLY        reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    LEFT_BRACKET    reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRUCT          reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CLASS           reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CASE            reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    DEFAULT         reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SEMICOLON       reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SWITCH          reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    DO              reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    FOR             reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    GOTO            reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CONTINUE        reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    BREAK           reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    INC_OP          reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    DEC_OP          reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SIZEOF          reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    BITWISE_AND     reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    PLUS            reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    MINUS           reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    BITWISE_NOT     reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    LOGICAL_NOT     reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    FLOAT_CONSTANT  reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    HEX_CONSTANT    reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    OCT_CONSTANT    reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    INT_CONSTANT    reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CHAR_CONSTANT   reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_LITERAL  reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    (               reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    ELSE            reduce using rule 174 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)


state 68

    (175) compound_statement -> LEFT_CURLY_BRACKET block_item_list . RIGHT_CURLY_BRACKET
    (177) block_item_list -> block_item_list . block_item
    (178) block_item -> . declaration
    (179) block_item -> . statement
    (80) declaration -> . declaration_specifiers SEMICOLON
    (81) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (165) statement -> . labeled_statement
    (166) statement -> . compound_statement
    (167) statement -> . expression_statement
    (168) statement -> . selection_statement
    (169) statement -> . iteration_statement
    (170) statement -> . jump_statement
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (171) labeled_statement -> . IDENTIFIER COLON statement
    (172) labeled_statement -> . CASE constant_expression COLON statement
    (173) labeled_statement -> . DEFAULT COLON statement
    (174) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (175) compound_statement -> . LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET
    (182) expression_statement -> . SEMICOLON
    (183) expression_statement -> . expression SEMICOLON
    (184) selection_statement -> . IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement
    (185) selection_statement -> . IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement
    (186) selection_statement -> . SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement
    (187) iteration_statement -> . WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement
    (188) iteration_statement -> . DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON
    (189) iteration_statement -> . FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement
    (190) iteration_statement -> . FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement
    (191) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (192) jump_statement -> . CONTINUE SEMICOLON
    (193) jump_statement -> . BREAK SEMICOLON
    (194) jump_statement -> . RETURN SEMICOLON
    (195) jump_statement -> . RETURN expression SEMICOLON
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . AUTO
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    RIGHT_CURLY_BRACKET shift and go to state 163
    IDENTIFIER      shift and go to state 79
    CASE            shift and go to state 80
    DEFAULT         shift and go to state 81
    LEFT_CURLY_BRACKET shift and go to state 43
    SEMICOLON       shift and go to state 72
    IF              shift and go to state 83
    SWITCH          shift and go to state 85
    WHILE           shift and go to state 86
    DO              shift and go to state 87
    FOR             shift and go to state 88
    GOTO            shift and go to state 89
    CONTINUE        shift and go to state 90
    BREAK           shift and go to state 91
    RETURN          shift and go to state 92
    TYPEDEF         shift and go to state 13
    AUTO            shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    block_item                     shift and go to state 164
    declaration                    shift and go to state 70
    statement                      shift and go to state 71
    declaration_specifiers         shift and go to state 44
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    expression                     shift and go to state 82
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    assignment_expression          shift and go to state 93
    class_definition_head          shift and go to state 33
    conditional_expression         shift and go to state 94
    unary_expression               shift and go to state 95
    logical_or_expression          shift and go to state 96
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 69

    (176) block_item_list -> block_item .

    RIGHT_CURLY_BRACKET reduce using rule 176 (block_item_list -> block_item .)
    IDENTIFIER      reduce using rule 176 (block_item_list -> block_item .)
    CASE            reduce using rule 176 (block_item_list -> block_item .)
    DEFAULT         reduce using rule 176 (block_item_list -> block_item .)
    LEFT_CURLY_BRACKET reduce using rule 176 (block_item_list -> block_item .)
    SEMICOLON       reduce using rule 176 (block_item_list -> block_item .)
    IF              reduce using rule 176 (block_item_list -> block_item .)
    SWITCH          reduce using rule 176 (block_item_list -> block_item .)
    WHILE           reduce using rule 176 (block_item_list -> block_item .)
    DO              reduce using rule 176 (block_item_list -> block_item .)
    FOR             reduce using rule 176 (block_item_list -> block_item .)
    GOTO            reduce using rule 176 (block_item_list -> block_item .)
    CONTINUE        reduce using rule 176 (block_item_list -> block_item .)
    BREAK           reduce using rule 176 (block_item_list -> block_item .)
    RETURN          reduce using rule 176 (block_item_list -> block_item .)
    TYPEDEF         reduce using rule 176 (block_item_list -> block_item .)
    AUTO            reduce using rule 176 (block_item_list -> block_item .)
    VOID            reduce using rule 176 (block_item_list -> block_item .)
    CHAR            reduce using rule 176 (block_item_list -> block_item .)
    SHORT           reduce using rule 176 (block_item_list -> block_item .)
    INT             reduce using rule 176 (block_item_list -> block_item .)
    LONG            reduce using rule 176 (block_item_list -> block_item .)
    FLOAT           reduce using rule 176 (block_item_list -> block_item .)
    DOUBLE          reduce using rule 176 (block_item_list -> block_item .)
    SIGNED          reduce using rule 176 (block_item_list -> block_item .)
    UNSIGNED        reduce using rule 176 (block_item_list -> block_item .)
    BOOL            reduce using rule 176 (block_item_list -> block_item .)
    TYPE_NAME       reduce using rule 176 (block_item_list -> block_item .)
    CONST           reduce using rule 176 (block_item_list -> block_item .)
    STRUCT          reduce using rule 176 (block_item_list -> block_item .)
    CLASS           reduce using rule 176 (block_item_list -> block_item .)
    INC_OP          reduce using rule 176 (block_item_list -> block_item .)
    DEC_OP          reduce using rule 176 (block_item_list -> block_item .)
    SIZEOF          reduce using rule 176 (block_item_list -> block_item .)
    BITWISE_AND     reduce using rule 176 (block_item_list -> block_item .)
    MULTIPLY        reduce using rule 176 (block_item_list -> block_item .)
    PLUS            reduce using rule 176 (block_item_list -> block_item .)
    MINUS           reduce using rule 176 (block_item_list -> block_item .)
    BITWISE_NOT     reduce using rule 176 (block_item_list -> block_item .)
    LOGICAL_NOT     reduce using rule 176 (block_item_list -> block_item .)
    FLOAT_CONSTANT  reduce using rule 176 (block_item_list -> block_item .)
    HEX_CONSTANT    reduce using rule 176 (block_item_list -> block_item .)
    OCT_CONSTANT    reduce using rule 176 (block_item_list -> block_item .)
    INT_CONSTANT    reduce using rule 176 (block_item_list -> block_item .)
    CHAR_CONSTANT   reduce using rule 176 (block_item_list -> block_item .)
    STRING_LITERAL  reduce using rule 176 (block_item_list -> block_item .)
    LEFT_BRACKET    reduce using rule 176 (block_item_list -> block_item .)
    (               reduce using rule 176 (block_item_list -> block_item .)


state 70

    (178) block_item -> declaration .

    RIGHT_CURLY_BRACKET reduce using rule 178 (block_item -> declaration .)
    IDENTIFIER      reduce using rule 178 (block_item -> declaration .)
    CASE            reduce using rule 178 (block_item -> declaration .)
    DEFAULT         reduce using rule 178 (block_item -> declaration .)
    LEFT_CURLY_BRACKET reduce using rule 178 (block_item -> declaration .)
    SEMICOLON       reduce using rule 178 (block_item -> declaration .)
    IF              reduce using rule 178 (block_item -> declaration .)
    SWITCH          reduce using rule 178 (block_item -> declaration .)
    WHILE           reduce using rule 178 (block_item -> declaration .)
    DO              reduce using rule 178 (block_item -> declaration .)
    FOR             reduce using rule 178 (block_item -> declaration .)
    GOTO            reduce using rule 178 (block_item -> declaration .)
    CONTINUE        reduce using rule 178 (block_item -> declaration .)
    BREAK           reduce using rule 178 (block_item -> declaration .)
    RETURN          reduce using rule 178 (block_item -> declaration .)
    TYPEDEF         reduce using rule 178 (block_item -> declaration .)
    AUTO            reduce using rule 178 (block_item -> declaration .)
    VOID            reduce using rule 178 (block_item -> declaration .)
    CHAR            reduce using rule 178 (block_item -> declaration .)
    SHORT           reduce using rule 178 (block_item -> declaration .)
    INT             reduce using rule 178 (block_item -> declaration .)
    LONG            reduce using rule 178 (block_item -> declaration .)
    FLOAT           reduce using rule 178 (block_item -> declaration .)
    DOUBLE          reduce using rule 178 (block_item -> declaration .)
    SIGNED          reduce using rule 178 (block_item -> declaration .)
    UNSIGNED        reduce using rule 178 (block_item -> declaration .)
    BOOL            reduce using rule 178 (block_item -> declaration .)
    TYPE_NAME       reduce using rule 178 (block_item -> declaration .)
    CONST           reduce using rule 178 (block_item -> declaration .)
    STRUCT          reduce using rule 178 (block_item -> declaration .)
    CLASS           reduce using rule 178 (block_item -> declaration .)
    INC_OP          reduce using rule 178 (block_item -> declaration .)
    DEC_OP          reduce using rule 178 (block_item -> declaration .)
    SIZEOF          reduce using rule 178 (block_item -> declaration .)
    BITWISE_AND     reduce using rule 178 (block_item -> declaration .)
    MULTIPLY        reduce using rule 178 (block_item -> declaration .)
    PLUS            reduce using rule 178 (block_item -> declaration .)
    MINUS           reduce using rule 178 (block_item -> declaration .)
    BITWISE_NOT     reduce using rule 178 (block_item -> declaration .)
    LOGICAL_NOT     reduce using rule 178 (block_item -> declaration .)
    FLOAT_CONSTANT  reduce using rule 178 (block_item -> declaration .)
    HEX_CONSTANT    reduce using rule 178 (block_item -> declaration .)
    OCT_CONSTANT    reduce using rule 178 (block_item -> declaration .)
    INT_CONSTANT    reduce using rule 178 (block_item -> declaration .)
    CHAR_CONSTANT   reduce using rule 178 (block_item -> declaration .)
    STRING_LITERAL  reduce using rule 178 (block_item -> declaration .)
    LEFT_BRACKET    reduce using rule 178 (block_item -> declaration .)
    (               reduce using rule 178 (block_item -> declaration .)


state 71

    (179) block_item -> statement .

    RIGHT_CURLY_BRACKET reduce using rule 179 (block_item -> statement .)
    IDENTIFIER      reduce using rule 179 (block_item -> statement .)
    CASE            reduce using rule 179 (block_item -> statement .)
    DEFAULT         reduce using rule 179 (block_item -> statement .)
    LEFT_CURLY_BRACKET reduce using rule 179 (block_item -> statement .)
    SEMICOLON       reduce using rule 179 (block_item -> statement .)
    IF              reduce using rule 179 (block_item -> statement .)
    SWITCH          reduce using rule 179 (block_item -> statement .)
    WHILE           reduce using rule 179 (block_item -> statement .)
    DO              reduce using rule 179 (block_item -> statement .)
    FOR             reduce using rule 179 (block_item -> statement .)
    GOTO            reduce using rule 179 (block_item -> statement .)
    CONTINUE        reduce using rule 179 (block_item -> statement .)
    BREAK           reduce using rule 179 (block_item -> statement .)
    RETURN          reduce using rule 179 (block_item -> statement .)
    TYPEDEF         reduce using rule 179 (block_item -> statement .)
    AUTO            reduce using rule 179 (block_item -> statement .)
    VOID            reduce using rule 179 (block_item -> statement .)
    CHAR            reduce using rule 179 (block_item -> statement .)
    SHORT           reduce using rule 179 (block_item -> statement .)
    INT             reduce using rule 179 (block_item -> statement .)
    LONG            reduce using rule 179 (block_item -> statement .)
    FLOAT           reduce using rule 179 (block_item -> statement .)
    DOUBLE          reduce using rule 179 (block_item -> statement .)
    SIGNED          reduce using rule 179 (block_item -> statement .)
    UNSIGNED        reduce using rule 179 (block_item -> statement .)
    BOOL            reduce using rule 179 (block_item -> statement .)
    TYPE_NAME       reduce using rule 179 (block_item -> statement .)
    CONST           reduce using rule 179 (block_item -> statement .)
    STRUCT          reduce using rule 179 (block_item -> statement .)
    CLASS           reduce using rule 179 (block_item -> statement .)
    INC_OP          reduce using rule 179 (block_item -> statement .)
    DEC_OP          reduce using rule 179 (block_item -> statement .)
    SIZEOF          reduce using rule 179 (block_item -> statement .)
    BITWISE_AND     reduce using rule 179 (block_item -> statement .)
    MULTIPLY        reduce using rule 179 (block_item -> statement .)
    PLUS            reduce using rule 179 (block_item -> statement .)
    MINUS           reduce using rule 179 (block_item -> statement .)
    BITWISE_NOT     reduce using rule 179 (block_item -> statement .)
    LOGICAL_NOT     reduce using rule 179 (block_item -> statement .)
    FLOAT_CONSTANT  reduce using rule 179 (block_item -> statement .)
    HEX_CONSTANT    reduce using rule 179 (block_item -> statement .)
    OCT_CONSTANT    reduce using rule 179 (block_item -> statement .)
    INT_CONSTANT    reduce using rule 179 (block_item -> statement .)
    CHAR_CONSTANT   reduce using rule 179 (block_item -> statement .)
    STRING_LITERAL  reduce using rule 179 (block_item -> statement .)
    LEFT_BRACKET    reduce using rule 179 (block_item -> statement .)
    (               reduce using rule 179 (block_item -> statement .)


state 72

    (182) expression_statement -> SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 182 (expression_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 182 (expression_statement -> SEMICOLON .)
    CASE            reduce using rule 182 (expression_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 182 (expression_statement -> SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 182 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 182 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 182 (expression_statement -> SEMICOLON .)
    SWITCH          reduce using rule 182 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 182 (expression_statement -> SEMICOLON .)
    DO              reduce using rule 182 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 182 (expression_statement -> SEMICOLON .)
    GOTO            reduce using rule 182 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 182 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 182 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 182 (expression_statement -> SEMICOLON .)
    TYPEDEF         reduce using rule 182 (expression_statement -> SEMICOLON .)
    AUTO            reduce using rule 182 (expression_statement -> SEMICOLON .)
    VOID            reduce using rule 182 (expression_statement -> SEMICOLON .)
    CHAR            reduce using rule 182 (expression_statement -> SEMICOLON .)
    SHORT           reduce using rule 182 (expression_statement -> SEMICOLON .)
    INT             reduce using rule 182 (expression_statement -> SEMICOLON .)
    LONG            reduce using rule 182 (expression_statement -> SEMICOLON .)
    FLOAT           reduce using rule 182 (expression_statement -> SEMICOLON .)
    DOUBLE          reduce using rule 182 (expression_statement -> SEMICOLON .)
    SIGNED          reduce using rule 182 (expression_statement -> SEMICOLON .)
    UNSIGNED        reduce using rule 182 (expression_statement -> SEMICOLON .)
    BOOL            reduce using rule 182 (expression_statement -> SEMICOLON .)
    TYPE_NAME       reduce using rule 182 (expression_statement -> SEMICOLON .)
    CONST           reduce using rule 182 (expression_statement -> SEMICOLON .)
    STRUCT          reduce using rule 182 (expression_statement -> SEMICOLON .)
    CLASS           reduce using rule 182 (expression_statement -> SEMICOLON .)
    INC_OP          reduce using rule 182 (expression_statement -> SEMICOLON .)
    DEC_OP          reduce using rule 182 (expression_statement -> SEMICOLON .)
    SIZEOF          reduce using rule 182 (expression_statement -> SEMICOLON .)
    BITWISE_AND     reduce using rule 182 (expression_statement -> SEMICOLON .)
    MULTIPLY        reduce using rule 182 (expression_statement -> SEMICOLON .)
    PLUS            reduce using rule 182 (expression_statement -> SEMICOLON .)
    MINUS           reduce using rule 182 (expression_statement -> SEMICOLON .)
    BITWISE_NOT     reduce using rule 182 (expression_statement -> SEMICOLON .)
    LOGICAL_NOT     reduce using rule 182 (expression_statement -> SEMICOLON .)
    FLOAT_CONSTANT  reduce using rule 182 (expression_statement -> SEMICOLON .)
    HEX_CONSTANT    reduce using rule 182 (expression_statement -> SEMICOLON .)
    OCT_CONSTANT    reduce using rule 182 (expression_statement -> SEMICOLON .)
    INT_CONSTANT    reduce using rule 182 (expression_statement -> SEMICOLON .)
    CHAR_CONSTANT   reduce using rule 182 (expression_statement -> SEMICOLON .)
    STRING_LITERAL  reduce using rule 182 (expression_statement -> SEMICOLON .)
    LEFT_BRACKET    reduce using rule 182 (expression_statement -> SEMICOLON .)
    (               reduce using rule 182 (expression_statement -> SEMICOLON .)
    RIGHT_BRACKET   reduce using rule 182 (expression_statement -> SEMICOLON .)


state 73

    (165) statement -> labeled_statement .

    RIGHT_CURLY_BRACKET reduce using rule 165 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 165 (statement -> labeled_statement .)
    CASE            reduce using rule 165 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 165 (statement -> labeled_statement .)
    LEFT_CURLY_BRACKET reduce using rule 165 (statement -> labeled_statement .)
    SEMICOLON       reduce using rule 165 (statement -> labeled_statement .)
    IF              reduce using rule 165 (statement -> labeled_statement .)
    SWITCH          reduce using rule 165 (statement -> labeled_statement .)
    WHILE           reduce using rule 165 (statement -> labeled_statement .)
    DO              reduce using rule 165 (statement -> labeled_statement .)
    FOR             reduce using rule 165 (statement -> labeled_statement .)
    GOTO            reduce using rule 165 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 165 (statement -> labeled_statement .)
    BREAK           reduce using rule 165 (statement -> labeled_statement .)
    RETURN          reduce using rule 165 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 165 (statement -> labeled_statement .)
    AUTO            reduce using rule 165 (statement -> labeled_statement .)
    VOID            reduce using rule 165 (statement -> labeled_statement .)
    CHAR            reduce using rule 165 (statement -> labeled_statement .)
    SHORT           reduce using rule 165 (statement -> labeled_statement .)
    INT             reduce using rule 165 (statement -> labeled_statement .)
    LONG            reduce using rule 165 (statement -> labeled_statement .)
    FLOAT           reduce using rule 165 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 165 (statement -> labeled_statement .)
    SIGNED          reduce using rule 165 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 165 (statement -> labeled_statement .)
    BOOL            reduce using rule 165 (statement -> labeled_statement .)
    TYPE_NAME       reduce using rule 165 (statement -> labeled_statement .)
    CONST           reduce using rule 165 (statement -> labeled_statement .)
    STRUCT          reduce using rule 165 (statement -> labeled_statement .)
    CLASS           reduce using rule 165 (statement -> labeled_statement .)
    INC_OP          reduce using rule 165 (statement -> labeled_statement .)
    DEC_OP          reduce using rule 165 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 165 (statement -> labeled_statement .)
    BITWISE_AND     reduce using rule 165 (statement -> labeled_statement .)
    MULTIPLY        reduce using rule 165 (statement -> labeled_statement .)
    PLUS            reduce using rule 165 (statement -> labeled_statement .)
    MINUS           reduce using rule 165 (statement -> labeled_statement .)
    BITWISE_NOT     reduce using rule 165 (statement -> labeled_statement .)
    LOGICAL_NOT     reduce using rule 165 (statement -> labeled_statement .)
    FLOAT_CONSTANT  reduce using rule 165 (statement -> labeled_statement .)
    HEX_CONSTANT    reduce using rule 165 (statement -> labeled_statement .)
    OCT_CONSTANT    reduce using rule 165 (statement -> labeled_statement .)
    INT_CONSTANT    reduce using rule 165 (statement -> labeled_statement .)
    CHAR_CONSTANT   reduce using rule 165 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 165 (statement -> labeled_statement .)
    LEFT_BRACKET    reduce using rule 165 (statement -> labeled_statement .)
    (               reduce using rule 165 (statement -> labeled_statement .)


state 74

    (166) statement -> compound_statement .

    RIGHT_CURLY_BRACKET reduce using rule 166 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 166 (statement -> compound_statement .)
    CASE            reduce using rule 166 (statement -> compound_statement .)
    DEFAULT         reduce using rule 166 (statement -> compound_statement .)
    LEFT_CURLY_BRACKET reduce using rule 166 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 166 (statement -> compound_statement .)
    IF              reduce using rule 166 (statement -> compound_statement .)
    SWITCH          reduce using rule 166 (statement -> compound_statement .)
    WHILE           reduce using rule 166 (statement -> compound_statement .)
    DO              reduce using rule 166 (statement -> compound_statement .)
    FOR             reduce using rule 166 (statement -> compound_statement .)
    GOTO            reduce using rule 166 (statement -> compound_statement .)
    CONTINUE        reduce using rule 166 (statement -> compound_statement .)
    BREAK           reduce using rule 166 (statement -> compound_statement .)
    RETURN          reduce using rule 166 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 166 (statement -> compound_statement .)
    AUTO            reduce using rule 166 (statement -> compound_statement .)
    VOID            reduce using rule 166 (statement -> compound_statement .)
    CHAR            reduce using rule 166 (statement -> compound_statement .)
    SHORT           reduce using rule 166 (statement -> compound_statement .)
    INT             reduce using rule 166 (statement -> compound_statement .)
    LONG            reduce using rule 166 (statement -> compound_statement .)
    FLOAT           reduce using rule 166 (statement -> compound_statement .)
    DOUBLE          reduce using rule 166 (statement -> compound_statement .)
    SIGNED          reduce using rule 166 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 166 (statement -> compound_statement .)
    BOOL            reduce using rule 166 (statement -> compound_statement .)
    TYPE_NAME       reduce using rule 166 (statement -> compound_statement .)
    CONST           reduce using rule 166 (statement -> compound_statement .)
    STRUCT          reduce using rule 166 (statement -> compound_statement .)
    CLASS           reduce using rule 166 (statement -> compound_statement .)
    INC_OP          reduce using rule 166 (statement -> compound_statement .)
    DEC_OP          reduce using rule 166 (statement -> compound_statement .)
    SIZEOF          reduce using rule 166 (statement -> compound_statement .)
    BITWISE_AND     reduce using rule 166 (statement -> compound_statement .)
    MULTIPLY        reduce using rule 166 (statement -> compound_statement .)
    PLUS            reduce using rule 166 (statement -> compound_statement .)
    MINUS           reduce using rule 166 (statement -> compound_statement .)
    BITWISE_NOT     reduce using rule 166 (statement -> compound_statement .)
    LOGICAL_NOT     reduce using rule 166 (statement -> compound_statement .)
    FLOAT_CONSTANT  reduce using rule 166 (statement -> compound_statement .)
    HEX_CONSTANT    reduce using rule 166 (statement -> compound_statement .)
    OCT_CONSTANT    reduce using rule 166 (statement -> compound_statement .)
    INT_CONSTANT    reduce using rule 166 (statement -> compound_statement .)
    CHAR_CONSTANT   reduce using rule 166 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 166 (statement -> compound_statement .)
    LEFT_BRACKET    reduce using rule 166 (statement -> compound_statement .)
    (               reduce using rule 166 (statement -> compound_statement .)


state 75

    (167) statement -> expression_statement .

    RIGHT_CURLY_BRACKET reduce using rule 167 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 167 (statement -> expression_statement .)
    CASE            reduce using rule 167 (statement -> expression_statement .)
    DEFAULT         reduce using rule 167 (statement -> expression_statement .)
    LEFT_CURLY_BRACKET reduce using rule 167 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 167 (statement -> expression_statement .)
    IF              reduce using rule 167 (statement -> expression_statement .)
    SWITCH          reduce using rule 167 (statement -> expression_statement .)
    WHILE           reduce using rule 167 (statement -> expression_statement .)
    DO              reduce using rule 167 (statement -> expression_statement .)
    FOR             reduce using rule 167 (statement -> expression_statement .)
    GOTO            reduce using rule 167 (statement -> expression_statement .)
    CONTINUE        reduce using rule 167 (statement -> expression_statement .)
    BREAK           reduce using rule 167 (statement -> expression_statement .)
    RETURN          reduce using rule 167 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 167 (statement -> expression_statement .)
    AUTO            reduce using rule 167 (statement -> expression_statement .)
    VOID            reduce using rule 167 (statement -> expression_statement .)
    CHAR            reduce using rule 167 (statement -> expression_statement .)
    SHORT           reduce using rule 167 (statement -> expression_statement .)
    INT             reduce using rule 167 (statement -> expression_statement .)
    LONG            reduce using rule 167 (statement -> expression_statement .)
    FLOAT           reduce using rule 167 (statement -> expression_statement .)
    DOUBLE          reduce using rule 167 (statement -> expression_statement .)
    SIGNED          reduce using rule 167 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 167 (statement -> expression_statement .)
    BOOL            reduce using rule 167 (statement -> expression_statement .)
    TYPE_NAME       reduce using rule 167 (statement -> expression_statement .)
    CONST           reduce using rule 167 (statement -> expression_statement .)
    STRUCT          reduce using rule 167 (statement -> expression_statement .)
    CLASS           reduce using rule 167 (statement -> expression_statement .)
    INC_OP          reduce using rule 167 (statement -> expression_statement .)
    DEC_OP          reduce using rule 167 (statement -> expression_statement .)
    SIZEOF          reduce using rule 167 (statement -> expression_statement .)
    BITWISE_AND     reduce using rule 167 (statement -> expression_statement .)
    MULTIPLY        reduce using rule 167 (statement -> expression_statement .)
    PLUS            reduce using rule 167 (statement -> expression_statement .)
    MINUS           reduce using rule 167 (statement -> expression_statement .)
    BITWISE_NOT     reduce using rule 167 (statement -> expression_statement .)
    LOGICAL_NOT     reduce using rule 167 (statement -> expression_statement .)
    FLOAT_CONSTANT  reduce using rule 167 (statement -> expression_statement .)
    HEX_CONSTANT    reduce using rule 167 (statement -> expression_statement .)
    OCT_CONSTANT    reduce using rule 167 (statement -> expression_statement .)
    INT_CONSTANT    reduce using rule 167 (statement -> expression_statement .)
    CHAR_CONSTANT   reduce using rule 167 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 167 (statement -> expression_statement .)
    LEFT_BRACKET    reduce using rule 167 (statement -> expression_statement .)
    (               reduce using rule 167 (statement -> expression_statement .)


state 76

    (168) statement -> selection_statement .

    RIGHT_CURLY_BRACKET reduce using rule 168 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 168 (statement -> selection_statement .)
    CASE            reduce using rule 168 (statement -> selection_statement .)
    DEFAULT         reduce using rule 168 (statement -> selection_statement .)
    LEFT_CURLY_BRACKET reduce using rule 168 (statement -> selection_statement .)
    SEMICOLON       reduce using rule 168 (statement -> selection_statement .)
    IF              reduce using rule 168 (statement -> selection_statement .)
    SWITCH          reduce using rule 168 (statement -> selection_statement .)
    WHILE           reduce using rule 168 (statement -> selection_statement .)
    DO              reduce using rule 168 (statement -> selection_statement .)
    FOR             reduce using rule 168 (statement -> selection_statement .)
    GOTO            reduce using rule 168 (statement -> selection_statement .)
    CONTINUE        reduce using rule 168 (statement -> selection_statement .)
    BREAK           reduce using rule 168 (statement -> selection_statement .)
    RETURN          reduce using rule 168 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 168 (statement -> selection_statement .)
    AUTO            reduce using rule 168 (statement -> selection_statement .)
    VOID            reduce using rule 168 (statement -> selection_statement .)
    CHAR            reduce using rule 168 (statement -> selection_statement .)
    SHORT           reduce using rule 168 (statement -> selection_statement .)
    INT             reduce using rule 168 (statement -> selection_statement .)
    LONG            reduce using rule 168 (statement -> selection_statement .)
    FLOAT           reduce using rule 168 (statement -> selection_statement .)
    DOUBLE          reduce using rule 168 (statement -> selection_statement .)
    SIGNED          reduce using rule 168 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 168 (statement -> selection_statement .)
    BOOL            reduce using rule 168 (statement -> selection_statement .)
    TYPE_NAME       reduce using rule 168 (statement -> selection_statement .)
    CONST           reduce using rule 168 (statement -> selection_statement .)
    STRUCT          reduce using rule 168 (statement -> selection_statement .)
    CLASS           reduce using rule 168 (statement -> selection_statement .)
    INC_OP          reduce using rule 168 (statement -> selection_statement .)
    DEC_OP          reduce using rule 168 (statement -> selection_statement .)
    SIZEOF          reduce using rule 168 (statement -> selection_statement .)
    BITWISE_AND     reduce using rule 168 (statement -> selection_statement .)
    MULTIPLY        reduce using rule 168 (statement -> selection_statement .)
    PLUS            reduce using rule 168 (statement -> selection_statement .)
    MINUS           reduce using rule 168 (statement -> selection_statement .)
    BITWISE_NOT     reduce using rule 168 (statement -> selection_statement .)
    LOGICAL_NOT     reduce using rule 168 (statement -> selection_statement .)
    FLOAT_CONSTANT  reduce using rule 168 (statement -> selection_statement .)
    HEX_CONSTANT    reduce using rule 168 (statement -> selection_statement .)
    OCT_CONSTANT    reduce using rule 168 (statement -> selection_statement .)
    INT_CONSTANT    reduce using rule 168 (statement -> selection_statement .)
    CHAR_CONSTANT   reduce using rule 168 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 168 (statement -> selection_statement .)
    LEFT_BRACKET    reduce using rule 168 (statement -> selection_statement .)
    (               reduce using rule 168 (statement -> selection_statement .)


state 77

    (169) statement -> iteration_statement .

    RIGHT_CURLY_BRACKET reduce using rule 169 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 169 (statement -> iteration_statement .)
    CASE            reduce using rule 169 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 169 (statement -> iteration_statement .)
    LEFT_CURLY_BRACKET reduce using rule 169 (statement -> iteration_statement .)
    SEMICOLON       reduce using rule 169 (statement -> iteration_statement .)
    IF              reduce using rule 169 (statement -> iteration_statement .)
    SWITCH          reduce using rule 169 (statement -> iteration_statement .)
    WHILE           reduce using rule 169 (statement -> iteration_statement .)
    DO              reduce using rule 169 (statement -> iteration_statement .)
    FOR             reduce using rule 169 (statement -> iteration_statement .)
    GOTO            reduce using rule 169 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 169 (statement -> iteration_statement .)
    BREAK           reduce using rule 169 (statement -> iteration_statement .)
    RETURN          reduce using rule 169 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 169 (statement -> iteration_statement .)
    AUTO            reduce using rule 169 (statement -> iteration_statement .)
    VOID            reduce using rule 169 (statement -> iteration_statement .)
    CHAR            reduce using rule 169 (statement -> iteration_statement .)
    SHORT           reduce using rule 169 (statement -> iteration_statement .)
    INT             reduce using rule 169 (statement -> iteration_statement .)
    LONG            reduce using rule 169 (statement -> iteration_statement .)
    FLOAT           reduce using rule 169 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 169 (statement -> iteration_statement .)
    SIGNED          reduce using rule 169 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 169 (statement -> iteration_statement .)
    BOOL            reduce using rule 169 (statement -> iteration_statement .)
    TYPE_NAME       reduce using rule 169 (statement -> iteration_statement .)
    CONST           reduce using rule 169 (statement -> iteration_statement .)
    STRUCT          reduce using rule 169 (statement -> iteration_statement .)
    CLASS           reduce using rule 169 (statement -> iteration_statement .)
    INC_OP          reduce using rule 169 (statement -> iteration_statement .)
    DEC_OP          reduce using rule 169 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 169 (statement -> iteration_statement .)
    BITWISE_AND     reduce using rule 169 (statement -> iteration_statement .)
    MULTIPLY        reduce using rule 169 (statement -> iteration_statement .)
    PLUS            reduce using rule 169 (statement -> iteration_statement .)
    MINUS           reduce using rule 169 (statement -> iteration_statement .)
    BITWISE_NOT     reduce using rule 169 (statement -> iteration_statement .)
    LOGICAL_NOT     reduce using rule 169 (statement -> iteration_statement .)
    FLOAT_CONSTANT  reduce using rule 169 (statement -> iteration_statement .)
    HEX_CONSTANT    reduce using rule 169 (statement -> iteration_statement .)
    OCT_CONSTANT    reduce using rule 169 (statement -> iteration_statement .)
    INT_CONSTANT    reduce using rule 169 (statement -> iteration_statement .)
    CHAR_CONSTANT   reduce using rule 169 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 169 (statement -> iteration_statement .)
    LEFT_BRACKET    reduce using rule 169 (statement -> iteration_statement .)
    (               reduce using rule 169 (statement -> iteration_statement .)


state 78

    (170) statement -> jump_statement .

    RIGHT_CURLY_BRACKET reduce using rule 170 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 170 (statement -> jump_statement .)
    CASE            reduce using rule 170 (statement -> jump_statement .)
    DEFAULT         reduce using rule 170 (statement -> jump_statement .)
    LEFT_CURLY_BRACKET reduce using rule 170 (statement -> jump_statement .)
    SEMICOLON       reduce using rule 170 (statement -> jump_statement .)
    IF              reduce using rule 170 (statement -> jump_statement .)
    SWITCH          reduce using rule 170 (statement -> jump_statement .)
    WHILE           reduce using rule 170 (statement -> jump_statement .)
    DO              reduce using rule 170 (statement -> jump_statement .)
    FOR             reduce using rule 170 (statement -> jump_statement .)
    GOTO            reduce using rule 170 (statement -> jump_statement .)
    CONTINUE        reduce using rule 170 (statement -> jump_statement .)
    BREAK           reduce using rule 170 (statement -> jump_statement .)
    RETURN          reduce using rule 170 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 170 (statement -> jump_statement .)
    AUTO            reduce using rule 170 (statement -> jump_statement .)
    VOID            reduce using rule 170 (statement -> jump_statement .)
    CHAR            reduce using rule 170 (statement -> jump_statement .)
    SHORT           reduce using rule 170 (statement -> jump_statement .)
    INT             reduce using rule 170 (statement -> jump_statement .)
    LONG            reduce using rule 170 (statement -> jump_statement .)
    FLOAT           reduce using rule 170 (statement -> jump_statement .)
    DOUBLE          reduce using rule 170 (statement -> jump_statement .)
    SIGNED          reduce using rule 170 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 170 (statement -> jump_statement .)
    BOOL            reduce using rule 170 (statement -> jump_statement .)
    TYPE_NAME       reduce using rule 170 (statement -> jump_statement .)
    CONST           reduce using rule 170 (statement -> jump_statement .)
    STRUCT          reduce using rule 170 (statement -> jump_statement .)
    CLASS           reduce using rule 170 (statement -> jump_statement .)
    INC_OP          reduce using rule 170 (statement -> jump_statement .)
    DEC_OP          reduce using rule 170 (statement -> jump_statement .)
    SIZEOF          reduce using rule 170 (statement -> jump_statement .)
    BITWISE_AND     reduce using rule 170 (statement -> jump_statement .)
    MULTIPLY        reduce using rule 170 (statement -> jump_statement .)
    PLUS            reduce using rule 170 (statement -> jump_statement .)
    MINUS           reduce using rule 170 (statement -> jump_statement .)
    BITWISE_NOT     reduce using rule 170 (statement -> jump_statement .)
    LOGICAL_NOT     reduce using rule 170 (statement -> jump_statement .)
    FLOAT_CONSTANT  reduce using rule 170 (statement -> jump_statement .)
    HEX_CONSTANT    reduce using rule 170 (statement -> jump_statement .)
    OCT_CONSTANT    reduce using rule 170 (statement -> jump_statement .)
    INT_CONSTANT    reduce using rule 170 (statement -> jump_statement .)
    CHAR_CONSTANT   reduce using rule 170 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 170 (statement -> jump_statement .)
    LEFT_BRACKET    reduce using rule 170 (statement -> jump_statement .)
    (               reduce using rule 170 (statement -> jump_statement .)


state 79

    (171) labeled_statement -> IDENTIFIER . COLON statement
    (2) primary_expression -> IDENTIFIER .

    COLON           shift and go to state 165
    LEFT_THIRD_BRACKET reduce using rule 2 (primary_expression -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 2 (primary_expression -> IDENTIFIER .)
    DOT             reduce using rule 2 (primary_expression -> IDENTIFIER .)
    PTR_OP          reduce using rule 2 (primary_expression -> IDENTIFIER .)
    INC_OP          reduce using rule 2 (primary_expression -> IDENTIFIER .)
    DEC_OP          reduce using rule 2 (primary_expression -> IDENTIFIER .)
    EQ              reduce using rule 2 (primary_expression -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 2 (primary_expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 2 (primary_expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 2 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 2 (primary_expression -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 2 (primary_expression -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 2 (primary_expression -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 2 (primary_expression -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 2 (primary_expression -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 2 (primary_expression -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 2 (primary_expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 2 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 2 (primary_expression -> IDENTIFIER .)
    MOD             reduce using rule 2 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 2 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 2 (primary_expression -> IDENTIFIER .)
    LEFT_OP         reduce using rule 2 (primary_expression -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 2 (primary_expression -> IDENTIFIER .)
    LESS            reduce using rule 2 (primary_expression -> IDENTIFIER .)
    GREATER         reduce using rule 2 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 2 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 2 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 2 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 2 (primary_expression -> IDENTIFIER .)
    BITWISE_AND     reduce using rule 2 (primary_expression -> IDENTIFIER .)
    BITWISE_XOR     reduce using rule 2 (primary_expression -> IDENTIFIER .)
    BITWISE_OR      reduce using rule 2 (primary_expression -> IDENTIFIER .)
    LOGICAL_AND_OP  reduce using rule 2 (primary_expression -> IDENTIFIER .)
    QUESTION        reduce using rule 2 (primary_expression -> IDENTIFIER .)
    LOGICAL_OR_OP   reduce using rule 2 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 2 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 2 (primary_expression -> IDENTIFIER .)


state 80

    (172) labeled_statement -> CASE . constant_expression COLON statement
    (79) constant_expression -> . conditional_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    constant_expression            shift and go to state 166
    conditional_expression         shift and go to state 129
    logical_or_expression          shift and go to state 96
    logical_and_expression         shift and go to state 103
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124
    cast_expression                shift and go to state 101
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 81

    (173) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 167


state 82

    (183) expression_statement -> expression . SEMICOLON
    (78) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 168
    COMMA           shift and go to state 169


state 83

    (184) selection_statement -> IF . LEFT_BRACKET expression RIGHT_BRACKET compound_statement
    (185) selection_statement -> IF . LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement

    LEFT_BRACKET    shift and go to state 170


state 84

    (9) primary_expression -> LEFT_BRACKET . expression RIGHT_BRACKET
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    expression                     shift and go to state 171
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 94
    unary_expression               shift and go to state 95
    logical_or_expression          shift and go to state 96
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 85

    (186) selection_statement -> SWITCH . LEFT_BRACKET expression RIGHT_BRACKET compound_statement

    LEFT_BRACKET    shift and go to state 172


state 86

    (187) iteration_statement -> WHILE . LEFT_BRACKET expression RIGHT_BRACKET compound_statement

    LEFT_BRACKET    shift and go to state 173


state 87

    (188) iteration_statement -> DO . compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON
    (174) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (175) compound_statement -> . LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 43

    compound_statement             shift and go to state 174

state 88

    (189) iteration_statement -> FOR . LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement
    (190) iteration_statement -> FOR . LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement

    LEFT_BRACKET    shift and go to state 175


state 89

    (191) jump_statement -> GOTO . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 176


state 90

    (192) jump_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 177


state 91

    (193) jump_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 178


state 92

    (194) jump_statement -> RETURN . SEMICOLON
    (195) jump_statement -> RETURN . expression SEMICOLON
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    SEMICOLON       shift and go to state 179
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    expression                     shift and go to state 180
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 94
    unary_expression               shift and go to state 95
    logical_or_expression          shift and go to state 96
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 93

    (77) expression -> assignment_expression .

    SEMICOLON       reduce using rule 77 (expression -> assignment_expression .)
    COMMA           reduce using rule 77 (expression -> assignment_expression .)
    RIGHT_BRACKET   reduce using rule 77 (expression -> assignment_expression .)
    COLON           reduce using rule 77 (expression -> assignment_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 77 (expression -> assignment_expression .)


state 94

    (64) assignment_expression -> conditional_expression .

    SEMICOLON       reduce using rule 64 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 64 (assignment_expression -> conditional_expression .)
    RIGHT_BRACKET   reduce using rule 64 (assignment_expression -> conditional_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 64 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 64 (assignment_expression -> conditional_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 64 (assignment_expression -> conditional_expression .)


state 95

    (65) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (32) cast_expression -> unary_expression .
    (66) assignment_operator -> . EQ
    (67) assignment_operator -> . MUL_ASSIGN
    (68) assignment_operator -> . DIV_ASSIGN
    (69) assignment_operator -> . MOD_ASSIGN
    (70) assignment_operator -> . ADD_ASSIGN
    (71) assignment_operator -> . SUB_ASSIGN
    (72) assignment_operator -> . LEFT_ASSIGN
    (73) assignment_operator -> . RIGHT_ASSIGN
    (74) assignment_operator -> . AND_ASSIGN
    (75) assignment_operator -> . XOR_ASSIGN
    (76) assignment_operator -> . OR_ASSIGN

    MULTIPLY        reduce using rule 32 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 32 (cast_expression -> unary_expression .)
    MOD             reduce using rule 32 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 32 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 32 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 32 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 32 (cast_expression -> unary_expression .)
    LESS            reduce using rule 32 (cast_expression -> unary_expression .)
    GREATER         reduce using rule 32 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 32 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 32 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 32 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 32 (cast_expression -> unary_expression .)
    BITWISE_AND     reduce using rule 32 (cast_expression -> unary_expression .)
    BITWISE_XOR     reduce using rule 32 (cast_expression -> unary_expression .)
    BITWISE_OR      reduce using rule 32 (cast_expression -> unary_expression .)
    LOGICAL_AND_OP  reduce using rule 32 (cast_expression -> unary_expression .)
    QUESTION        reduce using rule 32 (cast_expression -> unary_expression .)
    LOGICAL_OR_OP   reduce using rule 32 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 32 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 32 (cast_expression -> unary_expression .)
    RIGHT_BRACKET   reduce using rule 32 (cast_expression -> unary_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 32 (cast_expression -> unary_expression .)
    COLON           reduce using rule 32 (cast_expression -> unary_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 32 (cast_expression -> unary_expression .)
    EQ              shift and go to state 182
    MUL_ASSIGN      shift and go to state 183
    DIV_ASSIGN      shift and go to state 184
    MOD_ASSIGN      shift and go to state 185
    ADD_ASSIGN      shift and go to state 186
    SUB_ASSIGN      shift and go to state 187
    LEFT_ASSIGN     shift and go to state 188
    RIGHT_ASSIGN    shift and go to state 189
    AND_ASSIGN      shift and go to state 190
    XOR_ASSIGN      shift and go to state 191
    OR_ASSIGN       shift and go to state 192

    assignment_operator            shift and go to state 181

state 96

    (62) conditional_expression -> logical_or_expression .
    (63) conditional_expression -> logical_or_expression . QUESTION expression COLON conditional_expression
    (61) logical_or_expression -> logical_or_expression . LOGICAL_OR_OP logical_and_expression

    SEMICOLON       reduce using rule 62 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 62 (conditional_expression -> logical_or_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 62 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 62 (conditional_expression -> logical_or_expression .)
    RIGHT_BRACKET   reduce using rule 62 (conditional_expression -> logical_or_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 62 (conditional_expression -> logical_or_expression .)
    QUESTION        shift and go to state 193
    LOGICAL_OR_OP   shift and go to state 194


state 97

    (20) unary_expression -> postfix_expression .
    (11) postfix_expression -> postfix_expression . LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> postfix_expression . LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> postfix_expression . LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> postfix_expression . DOT IDENTIFIER
    (15) postfix_expression -> postfix_expression . PTR_OP IDENTIFIER
    (16) postfix_expression -> postfix_expression . INC_OP
    (17) postfix_expression -> postfix_expression . DEC_OP

    EQ              reduce using rule 20 (unary_expression -> postfix_expression .)
    MUL_ASSIGN      reduce using rule 20 (unary_expression -> postfix_expression .)
    DIV_ASSIGN      reduce using rule 20 (unary_expression -> postfix_expression .)
    MOD_ASSIGN      reduce using rule 20 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 20 (unary_expression -> postfix_expression .)
    SUB_ASSIGN      reduce using rule 20 (unary_expression -> postfix_expression .)
    LEFT_ASSIGN     reduce using rule 20 (unary_expression -> postfix_expression .)
    RIGHT_ASSIGN    reduce using rule 20 (unary_expression -> postfix_expression .)
    AND_ASSIGN      reduce using rule 20 (unary_expression -> postfix_expression .)
    XOR_ASSIGN      reduce using rule 20 (unary_expression -> postfix_expression .)
    OR_ASSIGN       reduce using rule 20 (unary_expression -> postfix_expression .)
    MULTIPLY        reduce using rule 20 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 20 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 20 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 20 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 20 (unary_expression -> postfix_expression .)
    LEFT_OP         reduce using rule 20 (unary_expression -> postfix_expression .)
    RIGHT_OP        reduce using rule 20 (unary_expression -> postfix_expression .)
    LESS            reduce using rule 20 (unary_expression -> postfix_expression .)
    GREATER         reduce using rule 20 (unary_expression -> postfix_expression .)
    LE_OP           reduce using rule 20 (unary_expression -> postfix_expression .)
    GE_OP           reduce using rule 20 (unary_expression -> postfix_expression .)
    EQ_OP           reduce using rule 20 (unary_expression -> postfix_expression .)
    NE_OP           reduce using rule 20 (unary_expression -> postfix_expression .)
    BITWISE_AND     reduce using rule 20 (unary_expression -> postfix_expression .)
    BITWISE_XOR     reduce using rule 20 (unary_expression -> postfix_expression .)
    BITWISE_OR      reduce using rule 20 (unary_expression -> postfix_expression .)
    LOGICAL_AND_OP  reduce using rule 20 (unary_expression -> postfix_expression .)
    QUESTION        reduce using rule 20 (unary_expression -> postfix_expression .)
    LOGICAL_OR_OP   reduce using rule 20 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 20 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 20 (unary_expression -> postfix_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 20 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 20 (unary_expression -> postfix_expression .)
    RIGHT_BRACKET   reduce using rule 20 (unary_expression -> postfix_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 20 (unary_expression -> postfix_expression .)
    LEFT_THIRD_BRACKET shift and go to state 195
    LEFT_BRACKET    shift and go to state 196
    DOT             shift and go to state 197
    PTR_OP          shift and go to state 198
    INC_OP          shift and go to state 199
    DEC_OP          shift and go to state 200


state 98

    (21) unary_expression -> INC_OP . unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    unary_expression               shift and go to state 201
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 99

    (22) unary_expression -> DEC_OP . unary_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    unary_expression               shift and go to state 202
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 100

    (23) unary_expression -> unary_operator . cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 203
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    primary_expression             shift and go to state 104

state 101

    (34) multiplicative_expression -> cast_expression .

    MULTIPLY        reduce using rule 34 (multiplicative_expression -> cast_expression .)
    DIVIDE          reduce using rule 34 (multiplicative_expression -> cast_expression .)
    MOD             reduce using rule 34 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 34 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 34 (multiplicative_expression -> cast_expression .)
    LEFT_OP         reduce using rule 34 (multiplicative_expression -> cast_expression .)
    RIGHT_OP        reduce using rule 34 (multiplicative_expression -> cast_expression .)
    LESS            reduce using rule 34 (multiplicative_expression -> cast_expression .)
    GREATER         reduce using rule 34 (multiplicative_expression -> cast_expression .)
    LE_OP           reduce using rule 34 (multiplicative_expression -> cast_expression .)
    GE_OP           reduce using rule 34 (multiplicative_expression -> cast_expression .)
    EQ_OP           reduce using rule 34 (multiplicative_expression -> cast_expression .)
    NE_OP           reduce using rule 34 (multiplicative_expression -> cast_expression .)
    BITWISE_AND     reduce using rule 34 (multiplicative_expression -> cast_expression .)
    BITWISE_XOR     reduce using rule 34 (multiplicative_expression -> cast_expression .)
    BITWISE_OR      reduce using rule 34 (multiplicative_expression -> cast_expression .)
    LOGICAL_AND_OP  reduce using rule 34 (multiplicative_expression -> cast_expression .)
    QUESTION        reduce using rule 34 (multiplicative_expression -> cast_expression .)
    LOGICAL_OR_OP   reduce using rule 34 (multiplicative_expression -> cast_expression .)
    SEMICOLON       reduce using rule 34 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 34 (multiplicative_expression -> cast_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 34 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 34 (multiplicative_expression -> cast_expression .)
    RIGHT_BRACKET   reduce using rule 34 (multiplicative_expression -> cast_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 34 (multiplicative_expression -> cast_expression .)


state 102

    (24) unary_expression -> SIZEOF . unary_expression
    (25) unary_expression -> SIZEOF . LEFT_BRACKET type_name RIGHT_BRACKET
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    LEFT_BRACKET    shift and go to state 205
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117

    unary_expression               shift and go to state 204
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 103

    (60) logical_or_expression -> logical_and_expression .
    (59) logical_and_expression -> logical_and_expression . LOGICAL_AND_OP inclusive_or_expression

    QUESTION        reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    LOGICAL_OR_OP   reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    SEMICOLON       reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    RIGHT_BRACKET   reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 60 (logical_or_expression -> logical_and_expression .)
    LOGICAL_AND_OP  shift and go to state 206


state 104

    (10) postfix_expression -> primary_expression .

    LEFT_THIRD_BRACKET reduce using rule 10 (postfix_expression -> primary_expression .)
    LEFT_BRACKET    reduce using rule 10 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 10 (postfix_expression -> primary_expression .)
    PTR_OP          reduce using rule 10 (postfix_expression -> primary_expression .)
    INC_OP          reduce using rule 10 (postfix_expression -> primary_expression .)
    DEC_OP          reduce using rule 10 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 10 (postfix_expression -> primary_expression .)
    MUL_ASSIGN      reduce using rule 10 (postfix_expression -> primary_expression .)
    DIV_ASSIGN      reduce using rule 10 (postfix_expression -> primary_expression .)
    MOD_ASSIGN      reduce using rule 10 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 10 (postfix_expression -> primary_expression .)
    SUB_ASSIGN      reduce using rule 10 (postfix_expression -> primary_expression .)
    LEFT_ASSIGN     reduce using rule 10 (postfix_expression -> primary_expression .)
    RIGHT_ASSIGN    reduce using rule 10 (postfix_expression -> primary_expression .)
    AND_ASSIGN      reduce using rule 10 (postfix_expression -> primary_expression .)
    XOR_ASSIGN      reduce using rule 10 (postfix_expression -> primary_expression .)
    OR_ASSIGN       reduce using rule 10 (postfix_expression -> primary_expression .)
    MULTIPLY        reduce using rule 10 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 10 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 10 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 10 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 10 (postfix_expression -> primary_expression .)
    LEFT_OP         reduce using rule 10 (postfix_expression -> primary_expression .)
    RIGHT_OP        reduce using rule 10 (postfix_expression -> primary_expression .)
    LESS            reduce using rule 10 (postfix_expression -> primary_expression .)
    GREATER         reduce using rule 10 (postfix_expression -> primary_expression .)
    LE_OP           reduce using rule 10 (postfix_expression -> primary_expression .)
    GE_OP           reduce using rule 10 (postfix_expression -> primary_expression .)
    EQ_OP           reduce using rule 10 (postfix_expression -> primary_expression .)
    NE_OP           reduce using rule 10 (postfix_expression -> primary_expression .)
    BITWISE_AND     reduce using rule 10 (postfix_expression -> primary_expression .)
    BITWISE_XOR     reduce using rule 10 (postfix_expression -> primary_expression .)
    BITWISE_OR      reduce using rule 10 (postfix_expression -> primary_expression .)
    LOGICAL_AND_OP  reduce using rule 10 (postfix_expression -> primary_expression .)
    QUESTION        reduce using rule 10 (postfix_expression -> primary_expression .)
    LOGICAL_OR_OP   reduce using rule 10 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 10 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 10 (postfix_expression -> primary_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 10 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 10 (postfix_expression -> primary_expression .)
    RIGHT_BRACKET   reduce using rule 10 (postfix_expression -> primary_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 10 (postfix_expression -> primary_expression .)


state 105

    (26) unary_operator -> BITWISE_AND .

    (               reduce using rule 26 (unary_operator -> BITWISE_AND .)
    INC_OP          reduce using rule 26 (unary_operator -> BITWISE_AND .)
    DEC_OP          reduce using rule 26 (unary_operator -> BITWISE_AND .)
    SIZEOF          reduce using rule 26 (unary_operator -> BITWISE_AND .)
    BITWISE_AND     reduce using rule 26 (unary_operator -> BITWISE_AND .)
    MULTIPLY        reduce using rule 26 (unary_operator -> BITWISE_AND .)
    PLUS            reduce using rule 26 (unary_operator -> BITWISE_AND .)
    MINUS           reduce using rule 26 (unary_operator -> BITWISE_AND .)
    BITWISE_NOT     reduce using rule 26 (unary_operator -> BITWISE_AND .)
    LOGICAL_NOT     reduce using rule 26 (unary_operator -> BITWISE_AND .)
    IDENTIFIER      reduce using rule 26 (unary_operator -> BITWISE_AND .)
    FLOAT_CONSTANT  reduce using rule 26 (unary_operator -> BITWISE_AND .)
    HEX_CONSTANT    reduce using rule 26 (unary_operator -> BITWISE_AND .)
    OCT_CONSTANT    reduce using rule 26 (unary_operator -> BITWISE_AND .)
    INT_CONSTANT    reduce using rule 26 (unary_operator -> BITWISE_AND .)
    CHAR_CONSTANT   reduce using rule 26 (unary_operator -> BITWISE_AND .)
    STRING_LITERAL  reduce using rule 26 (unary_operator -> BITWISE_AND .)
    LEFT_BRACKET    reduce using rule 26 (unary_operator -> BITWISE_AND .)


state 106

    (27) unary_operator -> MULTIPLY .

    (               reduce using rule 27 (unary_operator -> MULTIPLY .)
    INC_OP          reduce using rule 27 (unary_operator -> MULTIPLY .)
    DEC_OP          reduce using rule 27 (unary_operator -> MULTIPLY .)
    SIZEOF          reduce using rule 27 (unary_operator -> MULTIPLY .)
    BITWISE_AND     reduce using rule 27 (unary_operator -> MULTIPLY .)
    MULTIPLY        reduce using rule 27 (unary_operator -> MULTIPLY .)
    PLUS            reduce using rule 27 (unary_operator -> MULTIPLY .)
    MINUS           reduce using rule 27 (unary_operator -> MULTIPLY .)
    BITWISE_NOT     reduce using rule 27 (unary_operator -> MULTIPLY .)
    LOGICAL_NOT     reduce using rule 27 (unary_operator -> MULTIPLY .)
    IDENTIFIER      reduce using rule 27 (unary_operator -> MULTIPLY .)
    FLOAT_CONSTANT  reduce using rule 27 (unary_operator -> MULTIPLY .)
    HEX_CONSTANT    reduce using rule 27 (unary_operator -> MULTIPLY .)
    OCT_CONSTANT    reduce using rule 27 (unary_operator -> MULTIPLY .)
    INT_CONSTANT    reduce using rule 27 (unary_operator -> MULTIPLY .)
    CHAR_CONSTANT   reduce using rule 27 (unary_operator -> MULTIPLY .)
    STRING_LITERAL  reduce using rule 27 (unary_operator -> MULTIPLY .)
    LEFT_BRACKET    reduce using rule 27 (unary_operator -> MULTIPLY .)


state 107

    (28) unary_operator -> PLUS .

    (               reduce using rule 28 (unary_operator -> PLUS .)
    INC_OP          reduce using rule 28 (unary_operator -> PLUS .)
    DEC_OP          reduce using rule 28 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 28 (unary_operator -> PLUS .)
    BITWISE_AND     reduce using rule 28 (unary_operator -> PLUS .)
    MULTIPLY        reduce using rule 28 (unary_operator -> PLUS .)
    PLUS            reduce using rule 28 (unary_operator -> PLUS .)
    MINUS           reduce using rule 28 (unary_operator -> PLUS .)
    BITWISE_NOT     reduce using rule 28 (unary_operator -> PLUS .)
    LOGICAL_NOT     reduce using rule 28 (unary_operator -> PLUS .)
    IDENTIFIER      reduce using rule 28 (unary_operator -> PLUS .)
    FLOAT_CONSTANT  reduce using rule 28 (unary_operator -> PLUS .)
    HEX_CONSTANT    reduce using rule 28 (unary_operator -> PLUS .)
    OCT_CONSTANT    reduce using rule 28 (unary_operator -> PLUS .)
    INT_CONSTANT    reduce using rule 28 (unary_operator -> PLUS .)
    CHAR_CONSTANT   reduce using rule 28 (unary_operator -> PLUS .)
    STRING_LITERAL  reduce using rule 28 (unary_operator -> PLUS .)
    LEFT_BRACKET    reduce using rule 28 (unary_operator -> PLUS .)


state 108

    (29) unary_operator -> MINUS .

    (               reduce using rule 29 (unary_operator -> MINUS .)
    INC_OP          reduce using rule 29 (unary_operator -> MINUS .)
    DEC_OP          reduce using rule 29 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 29 (unary_operator -> MINUS .)
    BITWISE_AND     reduce using rule 29 (unary_operator -> MINUS .)
    MULTIPLY        reduce using rule 29 (unary_operator -> MINUS .)
    PLUS            reduce using rule 29 (unary_operator -> MINUS .)
    MINUS           reduce using rule 29 (unary_operator -> MINUS .)
    BITWISE_NOT     reduce using rule 29 (unary_operator -> MINUS .)
    LOGICAL_NOT     reduce using rule 29 (unary_operator -> MINUS .)
    IDENTIFIER      reduce using rule 29 (unary_operator -> MINUS .)
    FLOAT_CONSTANT  reduce using rule 29 (unary_operator -> MINUS .)
    HEX_CONSTANT    reduce using rule 29 (unary_operator -> MINUS .)
    OCT_CONSTANT    reduce using rule 29 (unary_operator -> MINUS .)
    INT_CONSTANT    reduce using rule 29 (unary_operator -> MINUS .)
    CHAR_CONSTANT   reduce using rule 29 (unary_operator -> MINUS .)
    STRING_LITERAL  reduce using rule 29 (unary_operator -> MINUS .)
    LEFT_BRACKET    reduce using rule 29 (unary_operator -> MINUS .)


state 109

    (30) unary_operator -> BITWISE_NOT .

    (               reduce using rule 30 (unary_operator -> BITWISE_NOT .)
    INC_OP          reduce using rule 30 (unary_operator -> BITWISE_NOT .)
    DEC_OP          reduce using rule 30 (unary_operator -> BITWISE_NOT .)
    SIZEOF          reduce using rule 30 (unary_operator -> BITWISE_NOT .)
    BITWISE_AND     reduce using rule 30 (unary_operator -> BITWISE_NOT .)
    MULTIPLY        reduce using rule 30 (unary_operator -> BITWISE_NOT .)
    PLUS            reduce using rule 30 (unary_operator -> BITWISE_NOT .)
    MINUS           reduce using rule 30 (unary_operator -> BITWISE_NOT .)
    BITWISE_NOT     reduce using rule 30 (unary_operator -> BITWISE_NOT .)
    LOGICAL_NOT     reduce using rule 30 (unary_operator -> BITWISE_NOT .)
    IDENTIFIER      reduce using rule 30 (unary_operator -> BITWISE_NOT .)
    FLOAT_CONSTANT  reduce using rule 30 (unary_operator -> BITWISE_NOT .)
    HEX_CONSTANT    reduce using rule 30 (unary_operator -> BITWISE_NOT .)
    OCT_CONSTANT    reduce using rule 30 (unary_operator -> BITWISE_NOT .)
    INT_CONSTANT    reduce using rule 30 (unary_operator -> BITWISE_NOT .)
    CHAR_CONSTANT   reduce using rule 30 (unary_operator -> BITWISE_NOT .)
    STRING_LITERAL  reduce using rule 30 (unary_operator -> BITWISE_NOT .)
    LEFT_BRACKET    reduce using rule 30 (unary_operator -> BITWISE_NOT .)


state 110

    (31) unary_operator -> LOGICAL_NOT .

    (               reduce using rule 31 (unary_operator -> LOGICAL_NOT .)
    INC_OP          reduce using rule 31 (unary_operator -> LOGICAL_NOT .)
    DEC_OP          reduce using rule 31 (unary_operator -> LOGICAL_NOT .)
    SIZEOF          reduce using rule 31 (unary_operator -> LOGICAL_NOT .)
    BITWISE_AND     reduce using rule 31 (unary_operator -> LOGICAL_NOT .)
    MULTIPLY        reduce using rule 31 (unary_operator -> LOGICAL_NOT .)
    PLUS            reduce using rule 31 (unary_operator -> LOGICAL_NOT .)
    MINUS           reduce using rule 31 (unary_operator -> LOGICAL_NOT .)
    BITWISE_NOT     reduce using rule 31 (unary_operator -> LOGICAL_NOT .)
    LOGICAL_NOT     reduce using rule 31 (unary_operator -> LOGICAL_NOT .)
    IDENTIFIER      reduce using rule 31 (unary_operator -> LOGICAL_NOT .)
    FLOAT_CONSTANT  reduce using rule 31 (unary_operator -> LOGICAL_NOT .)
    HEX_CONSTANT    reduce using rule 31 (unary_operator -> LOGICAL_NOT .)
    OCT_CONSTANT    reduce using rule 31 (unary_operator -> LOGICAL_NOT .)
    INT_CONSTANT    reduce using rule 31 (unary_operator -> LOGICAL_NOT .)
    CHAR_CONSTANT   reduce using rule 31 (unary_operator -> LOGICAL_NOT .)
    STRING_LITERAL  reduce using rule 31 (unary_operator -> LOGICAL_NOT .)
    LEFT_BRACKET    reduce using rule 31 (unary_operator -> LOGICAL_NOT .)


state 111

    (58) logical_and_expression -> inclusive_or_expression .
    (57) inclusive_or_expression -> inclusive_or_expression . BITWISE_OR exclusive_or_expression

    LOGICAL_AND_OP  reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    QUESTION        reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    LOGICAL_OR_OP   reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    SEMICOLON       reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    RIGHT_BRACKET   reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 58 (logical_and_expression -> inclusive_or_expression .)
    BITWISE_OR      shift and go to state 207


state 112

    (3) primary_expression -> FLOAT_CONSTANT .

    LEFT_THIRD_BRACKET reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    LEFT_BRACKET    reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    DOT             reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    PTR_OP          reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    INC_OP          reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    DEC_OP          reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    EQ              reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    MUL_ASSIGN      reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    DIV_ASSIGN      reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    MOD_ASSIGN      reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    ADD_ASSIGN      reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    SUB_ASSIGN      reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    LEFT_ASSIGN     reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    AND_ASSIGN      reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    XOR_ASSIGN      reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    OR_ASSIGN       reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    MULTIPLY        reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    DIVIDE          reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    MOD             reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    PLUS            reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    MINUS           reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    LEFT_OP         reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    RIGHT_OP        reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    LESS            reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    GREATER         reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    LE_OP           reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    GE_OP           reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    EQ_OP           reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    NE_OP           reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    BITWISE_AND     reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    BITWISE_XOR     reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    BITWISE_OR      reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    LOGICAL_AND_OP  reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    QUESTION        reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    LOGICAL_OR_OP   reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    SEMICOLON       reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    COMMA           reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    RIGHT_THIRD_BRACKET reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    COLON           reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    RIGHT_BRACKET   reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)
    RIGHT_CURLY_BRACKET reduce using rule 3 (primary_expression -> FLOAT_CONSTANT .)


state 113

    (4) primary_expression -> HEX_CONSTANT .

    LEFT_THIRD_BRACKET reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    LEFT_BRACKET    reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    DOT             reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    PTR_OP          reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    INC_OP          reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    DEC_OP          reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    EQ              reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    MUL_ASSIGN      reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    DIV_ASSIGN      reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    MOD_ASSIGN      reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    ADD_ASSIGN      reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    SUB_ASSIGN      reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    LEFT_ASSIGN     reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    AND_ASSIGN      reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    XOR_ASSIGN      reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    OR_ASSIGN       reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    MULTIPLY        reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    DIVIDE          reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    MOD             reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    PLUS            reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    MINUS           reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    LEFT_OP         reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    RIGHT_OP        reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    LESS            reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    GREATER         reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    LE_OP           reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    GE_OP           reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    EQ_OP           reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    NE_OP           reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    BITWISE_AND     reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    BITWISE_XOR     reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    BITWISE_OR      reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    LOGICAL_AND_OP  reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    QUESTION        reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    LOGICAL_OR_OP   reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    SEMICOLON       reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    COMMA           reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    RIGHT_THIRD_BRACKET reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    COLON           reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    RIGHT_BRACKET   reduce using rule 4 (primary_expression -> HEX_CONSTANT .)
    RIGHT_CURLY_BRACKET reduce using rule 4 (primary_expression -> HEX_CONSTANT .)


state 114

    (5) primary_expression -> OCT_CONSTANT .

    LEFT_THIRD_BRACKET reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    LEFT_BRACKET    reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    DOT             reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    PTR_OP          reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    INC_OP          reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    DEC_OP          reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    EQ              reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    MUL_ASSIGN      reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    DIV_ASSIGN      reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    MOD_ASSIGN      reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    ADD_ASSIGN      reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    SUB_ASSIGN      reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    LEFT_ASSIGN     reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    AND_ASSIGN      reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    XOR_ASSIGN      reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    OR_ASSIGN       reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    MULTIPLY        reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    DIVIDE          reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    MOD             reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    PLUS            reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    MINUS           reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    LEFT_OP         reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    RIGHT_OP        reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    LESS            reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    GREATER         reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    LE_OP           reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    GE_OP           reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    EQ_OP           reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    NE_OP           reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    BITWISE_AND     reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    BITWISE_XOR     reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    BITWISE_OR      reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    LOGICAL_AND_OP  reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    QUESTION        reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    LOGICAL_OR_OP   reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    SEMICOLON       reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    COMMA           reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    RIGHT_THIRD_BRACKET reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    COLON           reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    RIGHT_BRACKET   reduce using rule 5 (primary_expression -> OCT_CONSTANT .)
    RIGHT_CURLY_BRACKET reduce using rule 5 (primary_expression -> OCT_CONSTANT .)


state 115

    (6) primary_expression -> INT_CONSTANT .

    LEFT_THIRD_BRACKET reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    LEFT_BRACKET    reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    DOT             reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    PTR_OP          reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    INC_OP          reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    DEC_OP          reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    EQ              reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    MUL_ASSIGN      reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    DIV_ASSIGN      reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    MOD_ASSIGN      reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    ADD_ASSIGN      reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    SUB_ASSIGN      reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    LEFT_ASSIGN     reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    AND_ASSIGN      reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    XOR_ASSIGN      reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    OR_ASSIGN       reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    MULTIPLY        reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    DIVIDE          reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    MOD             reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    PLUS            reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    MINUS           reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    LEFT_OP         reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    RIGHT_OP        reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    LESS            reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    GREATER         reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    LE_OP           reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    GE_OP           reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    EQ_OP           reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    NE_OP           reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    BITWISE_AND     reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    BITWISE_XOR     reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    BITWISE_OR      reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    LOGICAL_AND_OP  reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    QUESTION        reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    LOGICAL_OR_OP   reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    SEMICOLON       reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    COMMA           reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    RIGHT_THIRD_BRACKET reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    COLON           reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    RIGHT_BRACKET   reduce using rule 6 (primary_expression -> INT_CONSTANT .)
    RIGHT_CURLY_BRACKET reduce using rule 6 (primary_expression -> INT_CONSTANT .)


state 116

    (7) primary_expression -> CHAR_CONSTANT .

    LEFT_THIRD_BRACKET reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    LEFT_BRACKET    reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    DOT             reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    PTR_OP          reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    INC_OP          reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    DEC_OP          reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    EQ              reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    MUL_ASSIGN      reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    DIV_ASSIGN      reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    MOD_ASSIGN      reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    ADD_ASSIGN      reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    SUB_ASSIGN      reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    LEFT_ASSIGN     reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    AND_ASSIGN      reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    XOR_ASSIGN      reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    OR_ASSIGN       reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    MULTIPLY        reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    DIVIDE          reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    MOD             reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    PLUS            reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    MINUS           reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    LEFT_OP         reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    RIGHT_OP        reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    LESS            reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    GREATER         reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    LE_OP           reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    GE_OP           reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    EQ_OP           reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    NE_OP           reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    BITWISE_AND     reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    BITWISE_XOR     reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    BITWISE_OR      reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    LOGICAL_AND_OP  reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    QUESTION        reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    LOGICAL_OR_OP   reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    SEMICOLON       reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    COMMA           reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    RIGHT_THIRD_BRACKET reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    COLON           reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    RIGHT_BRACKET   reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)
    RIGHT_CURLY_BRACKET reduce using rule 7 (primary_expression -> CHAR_CONSTANT .)


state 117

    (8) primary_expression -> STRING_LITERAL .

    LEFT_THIRD_BRACKET reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    LEFT_BRACKET    reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    DOT             reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    PTR_OP          reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    INC_OP          reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    DEC_OP          reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    EQ              reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    MUL_ASSIGN      reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    DIV_ASSIGN      reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    MOD_ASSIGN      reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    ADD_ASSIGN      reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    SUB_ASSIGN      reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    LEFT_ASSIGN     reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    RIGHT_ASSIGN    reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    AND_ASSIGN      reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    XOR_ASSIGN      reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    OR_ASSIGN       reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    MULTIPLY        reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    DIVIDE          reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    MOD             reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    PLUS            reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    MINUS           reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    LEFT_OP         reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    RIGHT_OP        reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    LESS            reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    GREATER         reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    LE_OP           reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    GE_OP           reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    EQ_OP           reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    NE_OP           reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    BITWISE_AND     reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    BITWISE_XOR     reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    BITWISE_OR      reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    LOGICAL_AND_OP  reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    QUESTION        reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    LOGICAL_OR_OP   reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    COMMA           reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    RIGHT_THIRD_BRACKET reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    COLON           reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    RIGHT_BRACKET   reduce using rule 8 (primary_expression -> STRING_LITERAL .)
    RIGHT_CURLY_BRACKET reduce using rule 8 (primary_expression -> STRING_LITERAL .)


state 118

    (56) inclusive_or_expression -> exclusive_or_expression .
    (55) exclusive_or_expression -> exclusive_or_expression . BITWISE_XOR and_expression

    BITWISE_OR      reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    LOGICAL_AND_OP  reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    QUESTION        reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    LOGICAL_OR_OP   reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    SEMICOLON       reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    RIGHT_BRACKET   reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 56 (inclusive_or_expression -> exclusive_or_expression .)
    BITWISE_XOR     shift and go to state 208


state 119

    (54) exclusive_or_expression -> and_expression .
    (53) and_expression -> and_expression . BITWISE_AND equality_expression

    BITWISE_XOR     reduce using rule 54 (exclusive_or_expression -> and_expression .)
    BITWISE_OR      reduce using rule 54 (exclusive_or_expression -> and_expression .)
    LOGICAL_AND_OP  reduce using rule 54 (exclusive_or_expression -> and_expression .)
    QUESTION        reduce using rule 54 (exclusive_or_expression -> and_expression .)
    LOGICAL_OR_OP   reduce using rule 54 (exclusive_or_expression -> and_expression .)
    SEMICOLON       reduce using rule 54 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 54 (exclusive_or_expression -> and_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 54 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 54 (exclusive_or_expression -> and_expression .)
    RIGHT_BRACKET   reduce using rule 54 (exclusive_or_expression -> and_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 54 (exclusive_or_expression -> and_expression .)
    BITWISE_AND     shift and go to state 209


state 120

    (52) and_expression -> equality_expression .
    (50) equality_expression -> equality_expression . EQ_OP relational_expression
    (51) equality_expression -> equality_expression . NE_OP relational_expression

    BITWISE_AND     reduce using rule 52 (and_expression -> equality_expression .)
    BITWISE_XOR     reduce using rule 52 (and_expression -> equality_expression .)
    BITWISE_OR      reduce using rule 52 (and_expression -> equality_expression .)
    LOGICAL_AND_OP  reduce using rule 52 (and_expression -> equality_expression .)
    QUESTION        reduce using rule 52 (and_expression -> equality_expression .)
    LOGICAL_OR_OP   reduce using rule 52 (and_expression -> equality_expression .)
    SEMICOLON       reduce using rule 52 (and_expression -> equality_expression .)
    COMMA           reduce using rule 52 (and_expression -> equality_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 52 (and_expression -> equality_expression .)
    COLON           reduce using rule 52 (and_expression -> equality_expression .)
    RIGHT_BRACKET   reduce using rule 52 (and_expression -> equality_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 52 (and_expression -> equality_expression .)
    EQ_OP           shift and go to state 210
    NE_OP           shift and go to state 211


state 121

    (49) equality_expression -> relational_expression .
    (45) relational_expression -> relational_expression . LESS shift_expression
    (46) relational_expression -> relational_expression . GREATER shift_expression
    (47) relational_expression -> relational_expression . LE_OP shift_expression
    (48) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 49 (equality_expression -> relational_expression .)
    NE_OP           reduce using rule 49 (equality_expression -> relational_expression .)
    BITWISE_AND     reduce using rule 49 (equality_expression -> relational_expression .)
    BITWISE_XOR     reduce using rule 49 (equality_expression -> relational_expression .)
    BITWISE_OR      reduce using rule 49 (equality_expression -> relational_expression .)
    LOGICAL_AND_OP  reduce using rule 49 (equality_expression -> relational_expression .)
    QUESTION        reduce using rule 49 (equality_expression -> relational_expression .)
    LOGICAL_OR_OP   reduce using rule 49 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 49 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 49 (equality_expression -> relational_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 49 (equality_expression -> relational_expression .)
    COLON           reduce using rule 49 (equality_expression -> relational_expression .)
    RIGHT_BRACKET   reduce using rule 49 (equality_expression -> relational_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 49 (equality_expression -> relational_expression .)
    LESS            shift and go to state 212
    GREATER         shift and go to state 213
    LE_OP           shift and go to state 214
    GE_OP           shift and go to state 215


state 122

    (44) relational_expression -> shift_expression .
    (42) shift_expression -> shift_expression . LEFT_OP additive_expression
    (43) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LESS            reduce using rule 44 (relational_expression -> shift_expression .)
    GREATER         reduce using rule 44 (relational_expression -> shift_expression .)
    LE_OP           reduce using rule 44 (relational_expression -> shift_expression .)
    GE_OP           reduce using rule 44 (relational_expression -> shift_expression .)
    EQ_OP           reduce using rule 44 (relational_expression -> shift_expression .)
    NE_OP           reduce using rule 44 (relational_expression -> shift_expression .)
    BITWISE_AND     reduce using rule 44 (relational_expression -> shift_expression .)
    BITWISE_XOR     reduce using rule 44 (relational_expression -> shift_expression .)
    BITWISE_OR      reduce using rule 44 (relational_expression -> shift_expression .)
    LOGICAL_AND_OP  reduce using rule 44 (relational_expression -> shift_expression .)
    QUESTION        reduce using rule 44 (relational_expression -> shift_expression .)
    LOGICAL_OR_OP   reduce using rule 44 (relational_expression -> shift_expression .)
    SEMICOLON       reduce using rule 44 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 44 (relational_expression -> shift_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 44 (relational_expression -> shift_expression .)
    COLON           reduce using rule 44 (relational_expression -> shift_expression .)
    RIGHT_BRACKET   reduce using rule 44 (relational_expression -> shift_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 44 (relational_expression -> shift_expression .)
    LEFT_OP         shift and go to state 216
    RIGHT_OP        shift and go to state 217


state 123

    (41) shift_expression -> additive_expression .
    (39) additive_expression -> additive_expression . PLUS multiplicative_expression
    (40) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 41 (shift_expression -> additive_expression .)
    RIGHT_OP        reduce using rule 41 (shift_expression -> additive_expression .)
    LESS            reduce using rule 41 (shift_expression -> additive_expression .)
    GREATER         reduce using rule 41 (shift_expression -> additive_expression .)
    LE_OP           reduce using rule 41 (shift_expression -> additive_expression .)
    GE_OP           reduce using rule 41 (shift_expression -> additive_expression .)
    EQ_OP           reduce using rule 41 (shift_expression -> additive_expression .)
    NE_OP           reduce using rule 41 (shift_expression -> additive_expression .)
    BITWISE_AND     reduce using rule 41 (shift_expression -> additive_expression .)
    BITWISE_XOR     reduce using rule 41 (shift_expression -> additive_expression .)
    BITWISE_OR      reduce using rule 41 (shift_expression -> additive_expression .)
    LOGICAL_AND_OP  reduce using rule 41 (shift_expression -> additive_expression .)
    QUESTION        reduce using rule 41 (shift_expression -> additive_expression .)
    LOGICAL_OR_OP   reduce using rule 41 (shift_expression -> additive_expression .)
    SEMICOLON       reduce using rule 41 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 41 (shift_expression -> additive_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 41 (shift_expression -> additive_expression .)
    COLON           reduce using rule 41 (shift_expression -> additive_expression .)
    RIGHT_BRACKET   reduce using rule 41 (shift_expression -> additive_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 41 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 218
    MINUS           shift and go to state 219


state 124

    (38) additive_expression -> multiplicative_expression .
    (35) multiplicative_expression -> multiplicative_expression . MULTIPLY cast_expression
    (36) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (37) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 38 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 38 (additive_expression -> multiplicative_expression .)
    LEFT_OP         reduce using rule 38 (additive_expression -> multiplicative_expression .)
    RIGHT_OP        reduce using rule 38 (additive_expression -> multiplicative_expression .)
    LESS            reduce using rule 38 (additive_expression -> multiplicative_expression .)
    GREATER         reduce using rule 38 (additive_expression -> multiplicative_expression .)
    LE_OP           reduce using rule 38 (additive_expression -> multiplicative_expression .)
    GE_OP           reduce using rule 38 (additive_expression -> multiplicative_expression .)
    EQ_OP           reduce using rule 38 (additive_expression -> multiplicative_expression .)
    NE_OP           reduce using rule 38 (additive_expression -> multiplicative_expression .)
    BITWISE_AND     reduce using rule 38 (additive_expression -> multiplicative_expression .)
    BITWISE_XOR     reduce using rule 38 (additive_expression -> multiplicative_expression .)
    BITWISE_OR      reduce using rule 38 (additive_expression -> multiplicative_expression .)
    LOGICAL_AND_OP  reduce using rule 38 (additive_expression -> multiplicative_expression .)
    QUESTION        reduce using rule 38 (additive_expression -> multiplicative_expression .)
    LOGICAL_OR_OP   reduce using rule 38 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 38 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 38 (additive_expression -> multiplicative_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 38 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 38 (additive_expression -> multiplicative_expression .)
    RIGHT_BRACKET   reduce using rule 38 (additive_expression -> multiplicative_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 38 (additive_expression -> multiplicative_expression .)
    MULTIPLY        shift and go to state 220
    DIVIDE          shift and go to state 221
    MOD             shift and go to state 222


state 125

    (33) cast_expression -> ( . type_name ) cast_expression
    (146) type_name -> . specifier_qualifier_list
    (147) type_name -> . specifier_qualifier_list abstract_declarator
    (113) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (114) specifier_qualifier_list -> . type_specifier
    (115) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (116) specifier_qualifier_list -> . type_qualifier
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34

    type_name                      shift and go to state 223
    specifier_qualifier_list       shift and go to state 224
    type_specifier                 shift and go to state 146
    type_qualifier                 shift and go to state 147
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    class_definition_head          shift and go to state 33

state 126

    (90) init_declarator -> declarator .
    (91) init_declarator -> declarator . EQ initializer

    SEMICOLON       reduce using rule 90 (init_declarator -> declarator .)
    COMMA           reduce using rule 90 (init_declarator -> declarator .)
    EQ              shift and go to state 62


state 127

    (127) direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression . RIGHT_THIRD_BRACKET

    RIGHT_THIRD_BRACKET shift and go to state 225


state 128

    (128) direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .

    LEFT_THIRD_BRACKET reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    LEFT_BRACKET    reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    TYPEDEF         reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    AUTO            reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    VOID            reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    CHAR            reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    SHORT           reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    INT             reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    LONG            reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    FLOAT           reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    DOUBLE          reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    SIGNED          reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    UNSIGNED        reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    BOOL            reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    TYPE_NAME       reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    CONST           reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    STRUCT          reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    CLASS           reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    EQ              reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    SEMICOLON       reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    COMMA           reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    RIGHT_BRACKET   reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    COLON           reduce using rule 128 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)


state 129

    (79) constant_expression -> conditional_expression .

    RIGHT_THIRD_BRACKET reduce using rule 79 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 79 (constant_expression -> conditional_expression .)
    SEMICOLON       reduce using rule 79 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 79 (constant_expression -> conditional_expression .)


state 130

    (32) cast_expression -> unary_expression .

    MULTIPLY        reduce using rule 32 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 32 (cast_expression -> unary_expression .)
    MOD             reduce using rule 32 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 32 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 32 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 32 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 32 (cast_expression -> unary_expression .)
    LESS            reduce using rule 32 (cast_expression -> unary_expression .)
    GREATER         reduce using rule 32 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 32 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 32 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 32 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 32 (cast_expression -> unary_expression .)
    BITWISE_AND     reduce using rule 32 (cast_expression -> unary_expression .)
    BITWISE_XOR     reduce using rule 32 (cast_expression -> unary_expression .)
    BITWISE_OR      reduce using rule 32 (cast_expression -> unary_expression .)
    LOGICAL_AND_OP  reduce using rule 32 (cast_expression -> unary_expression .)
    QUESTION        reduce using rule 32 (cast_expression -> unary_expression .)
    LOGICAL_OR_OP   reduce using rule 32 (cast_expression -> unary_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 32 (cast_expression -> unary_expression .)
    COLON           reduce using rule 32 (cast_expression -> unary_expression .)
    EQ              reduce using rule 32 (cast_expression -> unary_expression .)
    MUL_ASSIGN      reduce using rule 32 (cast_expression -> unary_expression .)
    DIV_ASSIGN      reduce using rule 32 (cast_expression -> unary_expression .)
    MOD_ASSIGN      reduce using rule 32 (cast_expression -> unary_expression .)
    ADD_ASSIGN      reduce using rule 32 (cast_expression -> unary_expression .)
    SUB_ASSIGN      reduce using rule 32 (cast_expression -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 32 (cast_expression -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 32 (cast_expression -> unary_expression .)
    AND_ASSIGN      reduce using rule 32 (cast_expression -> unary_expression .)
    XOR_ASSIGN      reduce using rule 32 (cast_expression -> unary_expression .)
    OR_ASSIGN       reduce using rule 32 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 32 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 32 (cast_expression -> unary_expression .)
    RIGHT_BRACKET   reduce using rule 32 (cast_expression -> unary_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 32 (cast_expression -> unary_expression .)


state 131

    (2) primary_expression -> IDENTIFIER .

    LEFT_THIRD_BRACKET reduce using rule 2 (primary_expression -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 2 (primary_expression -> IDENTIFIER .)
    DOT             reduce using rule 2 (primary_expression -> IDENTIFIER .)
    PTR_OP          reduce using rule 2 (primary_expression -> IDENTIFIER .)
    INC_OP          reduce using rule 2 (primary_expression -> IDENTIFIER .)
    DEC_OP          reduce using rule 2 (primary_expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 2 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 2 (primary_expression -> IDENTIFIER .)
    MOD             reduce using rule 2 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 2 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 2 (primary_expression -> IDENTIFIER .)
    LEFT_OP         reduce using rule 2 (primary_expression -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 2 (primary_expression -> IDENTIFIER .)
    LESS            reduce using rule 2 (primary_expression -> IDENTIFIER .)
    GREATER         reduce using rule 2 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 2 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 2 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 2 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 2 (primary_expression -> IDENTIFIER .)
    BITWISE_AND     reduce using rule 2 (primary_expression -> IDENTIFIER .)
    BITWISE_XOR     reduce using rule 2 (primary_expression -> IDENTIFIER .)
    BITWISE_OR      reduce using rule 2 (primary_expression -> IDENTIFIER .)
    LOGICAL_AND_OP  reduce using rule 2 (primary_expression -> IDENTIFIER .)
    QUESTION        reduce using rule 2 (primary_expression -> IDENTIFIER .)
    LOGICAL_OR_OP   reduce using rule 2 (primary_expression -> IDENTIFIER .)
    RIGHT_THIRD_BRACKET reduce using rule 2 (primary_expression -> IDENTIFIER .)
    EQ              reduce using rule 2 (primary_expression -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 2 (primary_expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 2 (primary_expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 2 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 2 (primary_expression -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 2 (primary_expression -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 2 (primary_expression -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 2 (primary_expression -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 2 (primary_expression -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 2 (primary_expression -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 2 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 2 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 2 (primary_expression -> IDENTIFIER .)
    COLON           reduce using rule 2 (primary_expression -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 2 (primary_expression -> IDENTIFIER .)
    RIGHT_CURLY_BRACKET reduce using rule 2 (primary_expression -> IDENTIFIER .)


state 132

    (129) direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 226


state 133

    (131) direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .

    LEFT_THIRD_BRACKET reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)
    TYPEDEF         reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)
    AUTO            reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)
    VOID            reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)
    CHAR            reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)
    SHORT           reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)
    INT             reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)
    LONG            reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)
    FLOAT           reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)
    DOUBLE          reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)
    SIGNED          reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)
    UNSIGNED        reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)
    BOOL            reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)
    TYPE_NAME       reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)
    CONST           reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)
    STRUCT          reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)
    CLASS           reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)
    EQ              reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)
    COMMA           reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)
    COLON           reduce using rule 131 (direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET .)


state 134

    (130) direct_declarator -> direct_declarator LEFT_BRACKET identifier_list . RIGHT_BRACKET
    (145) identifier_list -> identifier_list . COMMA IDENTIFIER

    RIGHT_BRACKET   shift and go to state 227
    COMMA           shift and go to state 228


state 135

    (138) parameter_type_list -> parameter_list .
    (140) parameter_list -> parameter_list . COMMA parameter_declaration

    RIGHT_BRACKET   reduce using rule 138 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 229


state 136

    (144) identifier_list -> IDENTIFIER .

    RIGHT_BRACKET   reduce using rule 144 (identifier_list -> IDENTIFIER .)
    COMMA           reduce using rule 144 (identifier_list -> IDENTIFIER .)


state 137

    (139) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 139 (parameter_list -> parameter_declaration .)
    RIGHT_BRACKET   reduce using rule 139 (parameter_list -> parameter_declaration .)


state 138

    (141) parameter_declaration -> declaration_specifiers . declarator
    (142) parameter_declaration -> declaration_specifiers . abstract_declarator
    (143) parameter_declaration -> declaration_specifiers .
    (123) declarator -> . pointer direct_declarator
    (124) declarator -> . direct_declarator
    (148) abstract_declarator -> . pointer
    (149) abstract_declarator -> . direct_abstract_declarator
    (150) abstract_declarator -> . pointer direct_abstract_declarator
    (132) pointer -> . MULTIPLY
    (133) pointer -> . MULTIPLY type_qualifier_list
    (134) pointer -> . MULTIPLY pointer
    (135) pointer -> . MULTIPLY type_qualifier_list pointer
    (125) direct_declarator -> . IDENTIFIER
    (126) direct_declarator -> . LEFT_BRACKET declarator RIGHT_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (128) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (129) direct_declarator -> . direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (130) direct_declarator -> . direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET
    (131) direct_declarator -> . direct_declarator LEFT_BRACKET RIGHT_BRACKET
    (151) direct_abstract_declarator -> . LEFT_BRACKET abstract_declarator RIGHT_BRACKET
    (152) direct_abstract_declarator -> . LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (153) direct_abstract_declarator -> . LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (154) direct_abstract_declarator -> . direct_abstract_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (155) direct_abstract_declarator -> . direct_abstract_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (156) direct_abstract_declarator -> . LEFT_BRACKET RIGHT_BRACKET
    (157) direct_abstract_declarator -> . LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (158) direct_abstract_declarator -> . direct_abstract_declarator LEFT_BRACKET RIGHT_BRACKET
    (159) direct_abstract_declarator -> . direct_abstract_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET

    COMMA           reduce using rule 143 (parameter_declaration -> declaration_specifiers .)
    RIGHT_BRACKET   reduce using rule 143 (parameter_declaration -> declaration_specifiers .)
    MULTIPLY        shift and go to state 29
    IDENTIFIER      shift and go to state 30
    LEFT_BRACKET    shift and go to state 234
    LEFT_THIRD_BRACKET shift and go to state 235

    declarator                     shift and go to state 230
    abstract_declarator            shift and go to state 231
    pointer                        shift and go to state 232
    direct_declarator              shift and go to state 12
    direct_abstract_declarator     shift and go to state 233

state 139

    (135) pointer -> MULTIPLY type_qualifier_list pointer .

    IDENTIFIER      reduce using rule 135 (pointer -> MULTIPLY type_qualifier_list pointer .)
    LEFT_BRACKET    reduce using rule 135 (pointer -> MULTIPLY type_qualifier_list pointer .)
    LEFT_THIRD_BRACKET reduce using rule 135 (pointer -> MULTIPLY type_qualifier_list pointer .)
    COMMA           reduce using rule 135 (pointer -> MULTIPLY type_qualifier_list pointer .)
    RIGHT_BRACKET   reduce using rule 135 (pointer -> MULTIPLY type_qualifier_list pointer .)
    )               reduce using rule 135 (pointer -> MULTIPLY type_qualifier_list pointer .)


state 140

    (137) type_qualifier_list -> type_qualifier_list type_qualifier .

    MULTIPLY        reduce using rule 137 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONST           reduce using rule 137 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    IDENTIFIER      reduce using rule 137 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LEFT_BRACKET    reduce using rule 137 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LEFT_THIRD_BRACKET reduce using rule 137 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COMMA           reduce using rule 137 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RIGHT_BRACKET   reduce using rule 137 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    )               reduce using rule 137 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 141

    (126) direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .

    LEFT_THIRD_BRACKET reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)
    TYPEDEF         reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)
    AUTO            reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)
    VOID            reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)
    CHAR            reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)
    SHORT           reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)
    INT             reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)
    LONG            reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)
    FLOAT           reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)
    DOUBLE          reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)
    SIGNED          reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)
    UNSIGNED        reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)
    BOOL            reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)
    TYPE_NAME       reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)
    CONST           reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)
    STRUCT          reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)
    CLASS           reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)
    EQ              reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)
    COMMA           reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)
    COLON           reduce using rule 126 (direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET .)


state 142

    (107) struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET . struct_declaration_list RIGHT_CURLY_BRACKET
    (110) struct_declaration_list -> . struct_declaration
    (111) struct_declaration_list -> . struct_declaration_list struct_declaration
    (112) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (113) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (114) specifier_qualifier_list -> . type_specifier
    (115) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (116) specifier_qualifier_list -> . type_qualifier
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34

    struct_declaration_list        shift and go to state 236
    struct_declaration             shift and go to state 144
    specifier_qualifier_list       shift and go to state 145
    type_specifier                 shift and go to state 146
    type_qualifier                 shift and go to state 147
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    class_definition_head          shift and go to state 33

state 143

    (108) struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list . RIGHT_CURLY_BRACKET
    (111) struct_declaration_list -> struct_declaration_list . struct_declaration
    (112) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (113) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (114) specifier_qualifier_list -> . type_specifier
    (115) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (116) specifier_qualifier_list -> . type_qualifier
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list

    RIGHT_CURLY_BRACKET shift and go to state 237
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34

    struct_declaration             shift and go to state 238
    specifier_qualifier_list       shift and go to state 145
    type_specifier                 shift and go to state 146
    type_qualifier                 shift and go to state 147
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    class_definition_head          shift and go to state 33

state 144

    (110) struct_declaration_list -> struct_declaration .

    RIGHT_CURLY_BRACKET reduce using rule 110 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 110 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 110 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 110 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 110 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 110 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 110 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 110 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 110 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 110 (struct_declaration_list -> struct_declaration .)
    BOOL            reduce using rule 110 (struct_declaration_list -> struct_declaration .)
    TYPE_NAME       reduce using rule 110 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 110 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 110 (struct_declaration_list -> struct_declaration .)
    CLASS           reduce using rule 110 (struct_declaration_list -> struct_declaration .)


state 145

    (112) struct_declaration -> specifier_qualifier_list . struct_declarator_list SEMICOLON
    (117) struct_declarator_list -> . struct_declarator
    (118) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (119) struct_declarator -> . declarator
    (120) struct_declarator -> . COLON constant_expression
    (121) struct_declarator -> . declarator COLON constant_expression
    (123) declarator -> . pointer direct_declarator
    (124) declarator -> . direct_declarator
    (132) pointer -> . MULTIPLY
    (133) pointer -> . MULTIPLY type_qualifier_list
    (134) pointer -> . MULTIPLY pointer
    (135) pointer -> . MULTIPLY type_qualifier_list pointer
    (125) direct_declarator -> . IDENTIFIER
    (126) direct_declarator -> . LEFT_BRACKET declarator RIGHT_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (128) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (129) direct_declarator -> . direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (130) direct_declarator -> . direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET
    (131) direct_declarator -> . direct_declarator LEFT_BRACKET RIGHT_BRACKET

    COLON           shift and go to state 242
    MULTIPLY        shift and go to state 29
    IDENTIFIER      shift and go to state 30
    LEFT_BRACKET    shift and go to state 31

    struct_declarator_list         shift and go to state 239
    struct_declarator              shift and go to state 240
    declarator                     shift and go to state 241
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12

state 146

    (113) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (114) specifier_qualifier_list -> type_specifier .
    (113) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (114) specifier_qualifier_list -> . type_specifier
    (115) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (116) specifier_qualifier_list -> . type_qualifier
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list

    COLON           reduce using rule 114 (specifier_qualifier_list -> type_specifier .)
    MULTIPLY        reduce using rule 114 (specifier_qualifier_list -> type_specifier .)
    IDENTIFIER      reduce using rule 114 (specifier_qualifier_list -> type_specifier .)
    LEFT_BRACKET    reduce using rule 114 (specifier_qualifier_list -> type_specifier .)
    LEFT_THIRD_BRACKET reduce using rule 114 (specifier_qualifier_list -> type_specifier .)
    )               reduce using rule 114 (specifier_qualifier_list -> type_specifier .)
    RIGHT_BRACKET   reduce using rule 114 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34

    type_specifier                 shift and go to state 146
    specifier_qualifier_list       shift and go to state 243
    type_qualifier                 shift and go to state 147
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    class_definition_head          shift and go to state 33

state 147

    (115) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (116) specifier_qualifier_list -> type_qualifier .
    (113) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (114) specifier_qualifier_list -> . type_specifier
    (115) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (116) specifier_qualifier_list -> . type_qualifier
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list

    COLON           reduce using rule 116 (specifier_qualifier_list -> type_qualifier .)
    MULTIPLY        reduce using rule 116 (specifier_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 116 (specifier_qualifier_list -> type_qualifier .)
    LEFT_BRACKET    reduce using rule 116 (specifier_qualifier_list -> type_qualifier .)
    LEFT_THIRD_BRACKET reduce using rule 116 (specifier_qualifier_list -> type_qualifier .)
    )               reduce using rule 116 (specifier_qualifier_list -> type_qualifier .)
    RIGHT_BRACKET   reduce using rule 116 (specifier_qualifier_list -> type_qualifier .)
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34

    type_qualifier                 shift and go to state 147
    specifier_qualifier_list       shift and go to state 244
    type_specifier                 shift and go to state 146
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    class_definition_head          shift and go to state 33

state 148

    (214) class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list . RIGHT_CURLY_BRACKET
    (217) class_internal_definition_list -> class_internal_definition_list . class_internal_definition
    (218) class_internal_definition -> . access_specifier LEFT_CURLY_BRACKET class_member_list RIGHT_CURLY_BRACKET SEMICOLON
    (207) access_specifier -> . PRIVATE
    (208) access_specifier -> . PUBLIC
    (209) access_specifier -> . PROTECTED

    RIGHT_CURLY_BRACKET shift and go to state 245
    PRIVATE         shift and go to state 151
    PUBLIC          shift and go to state 152
    PROTECTED       shift and go to state 153

    class_internal_definition      shift and go to state 246
    access_specifier               shift and go to state 150

state 149

    (216) class_internal_definition_list -> class_internal_definition .

    RIGHT_CURLY_BRACKET reduce using rule 216 (class_internal_definition_list -> class_internal_definition .)
    PRIVATE         reduce using rule 216 (class_internal_definition_list -> class_internal_definition .)
    PUBLIC          reduce using rule 216 (class_internal_definition_list -> class_internal_definition .)
    PROTECTED       reduce using rule 216 (class_internal_definition_list -> class_internal_definition .)


state 150

    (218) class_internal_definition -> access_specifier . LEFT_CURLY_BRACKET class_member_list RIGHT_CURLY_BRACKET SEMICOLON

    LEFT_CURLY_BRACKET shift and go to state 247


state 151

    (207) access_specifier -> PRIVATE .

    LEFT_CURLY_BRACKET reduce using rule 207 (access_specifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 207 (access_specifier -> PRIVATE .)


state 152

    (208) access_specifier -> PUBLIC .

    LEFT_CURLY_BRACKET reduce using rule 208 (access_specifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 208 (access_specifier -> PUBLIC .)


state 153

    (209) access_specifier -> PROTECTED .

    LEFT_CURLY_BRACKET reduce using rule 209 (access_specifier -> PROTECTED .)
    IDENTIFIER      reduce using rule 209 (access_specifier -> PROTECTED .)


state 154

    (211) class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .
    (206) inheritance_specifier_list -> inheritance_specifier_list . COMMA inheritance_specifier

  ! shift/reduce conflict for COMMA resolved as shift
    LEFT_CURLY_BRACKET reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    TYPEDEF         reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    AUTO            reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    VOID            reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    CHAR            reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    SHORT           reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    INT             reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    LONG            reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    FLOAT           reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    DOUBLE          reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    SIGNED          reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    UNSIGNED        reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    BOOL            reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    TYPE_NAME       reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    CONST           reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    STRUCT          reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    CLASS           reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    SEMICOLON       reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    MULTIPLY        reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    IDENTIFIER      reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    LEFT_BRACKET    reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    LEFT_THIRD_BRACKET reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    RIGHT_BRACKET   reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    COLON           reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    )               reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .)
    COMMA           shift and go to state 248

  ! COMMA           [ reduce using rule 211 (class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list .) ]


state 155

    (205) inheritance_specifier_list -> inheritance_specifier .

    COMMA           reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    LEFT_CURLY_BRACKET reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    TYPEDEF         reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    AUTO            reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    VOID            reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    CHAR            reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    SHORT           reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    INT             reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    LONG            reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    FLOAT           reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    DOUBLE          reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    SIGNED          reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    UNSIGNED        reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    BOOL            reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    TYPE_NAME       reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    CONST           reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    STRUCT          reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    CLASS           reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    SEMICOLON       reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    MULTIPLY        reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    IDENTIFIER      reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    LEFT_BRACKET    reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    LEFT_THIRD_BRACKET reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    RIGHT_BRACKET   reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    COLON           reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)
    )               reduce using rule 205 (inheritance_specifier_list -> inheritance_specifier .)


state 156

    (204) inheritance_specifier -> access_specifier . IDENTIFIER

    IDENTIFIER      shift and go to state 249


state 157

    (213) class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP . inheritance_specifier_list
    (205) inheritance_specifier_list -> . inheritance_specifier
    (206) inheritance_specifier_list -> . inheritance_specifier_list COMMA inheritance_specifier
    (204) inheritance_specifier -> . access_specifier IDENTIFIER
    (207) access_specifier -> . PRIVATE
    (208) access_specifier -> . PUBLIC
    (209) access_specifier -> . PROTECTED

    PRIVATE         shift and go to state 151
    PUBLIC          shift and go to state 152
    PROTECTED       shift and go to state 153

    inheritance_specifier_list     shift and go to state 250
    inheritance_specifier          shift and go to state 155
    access_specifier               shift and go to state 156

state 158

    (200) function_definition -> declaration_specifiers declarator declaration_list compound_statement .

    TYPEDEF         reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    AUTO            reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOID            reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CHAR            reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SHORT           reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INT             reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LONG            reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    BOOL            reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    TYPE_NAME       reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CONST           reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    MULTIPLY        reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    IDENTIFIER      reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LEFT_BRACKET    reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CLASS           reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    $end            reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    RIGHT_CURLY_BRACKET reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)


state 159

    (91) init_declarator -> declarator EQ initializer .

    SEMICOLON       reduce using rule 91 (init_declarator -> declarator EQ initializer .)
    COMMA           reduce using rule 91 (init_declarator -> declarator EQ initializer .)


state 160

    (160) initializer -> assignment_expression .

    SEMICOLON       reduce using rule 160 (initializer -> assignment_expression .)
    COMMA           reduce using rule 160 (initializer -> assignment_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 160 (initializer -> assignment_expression .)


state 161

    (161) initializer -> LEFT_CURLY_BRACKET . initializer_list RIGHT_CURLY_BRACKET
    (162) initializer -> LEFT_CURLY_BRACKET . initializer_list COMMA RIGHT_CURLY_BRACKET
    (163) initializer_list -> . initializer
    (164) initializer_list -> . initializer_list COMMA initializer
    (160) initializer -> . assignment_expression
    (161) initializer -> . LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET
    (162) initializer -> . LEFT_CURLY_BRACKET initializer_list COMMA RIGHT_CURLY_BRACKET
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    LEFT_CURLY_BRACKET shift and go to state 161
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    initializer_list               shift and go to state 251
    initializer                    shift and go to state 252
    assignment_expression          shift and go to state 160
    conditional_expression         shift and go to state 94
    unary_expression               shift and go to state 95
    logical_or_expression          shift and go to state 96
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 162

    (89) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMICOLON       reduce using rule 89 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 89 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 163

    (175) compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .

    TYPEDEF         reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    AUTO            reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    VOID            reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    CHAR            reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    SHORT           reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    INT             reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    LONG            reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    FLOAT           reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    DOUBLE          reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    SIGNED          reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    UNSIGNED        reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    TYPE_NAME       reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    CONST           reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    MULTIPLY        reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    LEFT_BRACKET    reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    STRUCT          reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    CLASS           reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    CASE            reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    DEFAULT         reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    SEMICOLON       reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    SWITCH          reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    DO              reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    FOR             reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    GOTO            reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    CONTINUE        reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    BREAK           reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    INC_OP          reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    DEC_OP          reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    SIZEOF          reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    BITWISE_AND     reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    PLUS            reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    MINUS           reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    BITWISE_NOT     reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    LOGICAL_NOT     reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    FLOAT_CONSTANT  reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    HEX_CONSTANT    reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    OCT_CONSTANT    reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    INT_CONSTANT    reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    CHAR_CONSTANT   reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    STRING_LITERAL  reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    (               reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)
    ELSE            reduce using rule 175 (compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET .)


state 164

    (177) block_item_list -> block_item_list block_item .

    RIGHT_CURLY_BRACKET reduce using rule 177 (block_item_list -> block_item_list block_item .)
    IDENTIFIER      reduce using rule 177 (block_item_list -> block_item_list block_item .)
    CASE            reduce using rule 177 (block_item_list -> block_item_list block_item .)
    DEFAULT         reduce using rule 177 (block_item_list -> block_item_list block_item .)
    LEFT_CURLY_BRACKET reduce using rule 177 (block_item_list -> block_item_list block_item .)
    SEMICOLON       reduce using rule 177 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 177 (block_item_list -> block_item_list block_item .)
    SWITCH          reduce using rule 177 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 177 (block_item_list -> block_item_list block_item .)
    DO              reduce using rule 177 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 177 (block_item_list -> block_item_list block_item .)
    GOTO            reduce using rule 177 (block_item_list -> block_item_list block_item .)
    CONTINUE        reduce using rule 177 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 177 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 177 (block_item_list -> block_item_list block_item .)
    TYPEDEF         reduce using rule 177 (block_item_list -> block_item_list block_item .)
    AUTO            reduce using rule 177 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 177 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 177 (block_item_list -> block_item_list block_item .)
    SHORT           reduce using rule 177 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 177 (block_item_list -> block_item_list block_item .)
    LONG            reduce using rule 177 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 177 (block_item_list -> block_item_list block_item .)
    DOUBLE          reduce using rule 177 (block_item_list -> block_item_list block_item .)
    SIGNED          reduce using rule 177 (block_item_list -> block_item_list block_item .)
    UNSIGNED        reduce using rule 177 (block_item_list -> block_item_list block_item .)
    BOOL            reduce using rule 177 (block_item_list -> block_item_list block_item .)
    TYPE_NAME       reduce using rule 177 (block_item_list -> block_item_list block_item .)
    CONST           reduce using rule 177 (block_item_list -> block_item_list block_item .)
    STRUCT          reduce using rule 177 (block_item_list -> block_item_list block_item .)
    CLASS           reduce using rule 177 (block_item_list -> block_item_list block_item .)
    INC_OP          reduce using rule 177 (block_item_list -> block_item_list block_item .)
    DEC_OP          reduce using rule 177 (block_item_list -> block_item_list block_item .)
    SIZEOF          reduce using rule 177 (block_item_list -> block_item_list block_item .)
    BITWISE_AND     reduce using rule 177 (block_item_list -> block_item_list block_item .)
    MULTIPLY        reduce using rule 177 (block_item_list -> block_item_list block_item .)
    PLUS            reduce using rule 177 (block_item_list -> block_item_list block_item .)
    MINUS           reduce using rule 177 (block_item_list -> block_item_list block_item .)
    BITWISE_NOT     reduce using rule 177 (block_item_list -> block_item_list block_item .)
    LOGICAL_NOT     reduce using rule 177 (block_item_list -> block_item_list block_item .)
    FLOAT_CONSTANT  reduce using rule 177 (block_item_list -> block_item_list block_item .)
    HEX_CONSTANT    reduce using rule 177 (block_item_list -> block_item_list block_item .)
    OCT_CONSTANT    reduce using rule 177 (block_item_list -> block_item_list block_item .)
    INT_CONSTANT    reduce using rule 177 (block_item_list -> block_item_list block_item .)
    CHAR_CONSTANT   reduce using rule 177 (block_item_list -> block_item_list block_item .)
    STRING_LITERAL  reduce using rule 177 (block_item_list -> block_item_list block_item .)
    LEFT_BRACKET    reduce using rule 177 (block_item_list -> block_item_list block_item .)
    (               reduce using rule 177 (block_item_list -> block_item_list block_item .)


state 165

    (171) labeled_statement -> IDENTIFIER COLON . statement
    (165) statement -> . labeled_statement
    (166) statement -> . compound_statement
    (167) statement -> . expression_statement
    (168) statement -> . selection_statement
    (169) statement -> . iteration_statement
    (170) statement -> . jump_statement
    (171) labeled_statement -> . IDENTIFIER COLON statement
    (172) labeled_statement -> . CASE constant_expression COLON statement
    (173) labeled_statement -> . DEFAULT COLON statement
    (174) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (175) compound_statement -> . LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET
    (182) expression_statement -> . SEMICOLON
    (183) expression_statement -> . expression SEMICOLON
    (184) selection_statement -> . IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement
    (185) selection_statement -> . IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement
    (186) selection_statement -> . SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement
    (187) iteration_statement -> . WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement
    (188) iteration_statement -> . DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON
    (189) iteration_statement -> . FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement
    (190) iteration_statement -> . FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement
    (191) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (192) jump_statement -> . CONTINUE SEMICOLON
    (193) jump_statement -> . BREAK SEMICOLON
    (194) jump_statement -> . RETURN SEMICOLON
    (195) jump_statement -> . RETURN expression SEMICOLON
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 79
    CASE            shift and go to state 80
    DEFAULT         shift and go to state 81
    LEFT_CURLY_BRACKET shift and go to state 43
    SEMICOLON       shift and go to state 72
    IF              shift and go to state 83
    SWITCH          shift and go to state 85
    WHILE           shift and go to state 86
    DO              shift and go to state 87
    FOR             shift and go to state 88
    GOTO            shift and go to state 89
    CONTINUE        shift and go to state 90
    BREAK           shift and go to state 91
    RETURN          shift and go to state 92
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    statement                      shift and go to state 253
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    expression                     shift and go to state 82
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 94
    unary_expression               shift and go to state 95
    logical_or_expression          shift and go to state 96
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 166

    (172) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 254


state 167

    (173) labeled_statement -> DEFAULT COLON . statement
    (165) statement -> . labeled_statement
    (166) statement -> . compound_statement
    (167) statement -> . expression_statement
    (168) statement -> . selection_statement
    (169) statement -> . iteration_statement
    (170) statement -> . jump_statement
    (171) labeled_statement -> . IDENTIFIER COLON statement
    (172) labeled_statement -> . CASE constant_expression COLON statement
    (173) labeled_statement -> . DEFAULT COLON statement
    (174) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (175) compound_statement -> . LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET
    (182) expression_statement -> . SEMICOLON
    (183) expression_statement -> . expression SEMICOLON
    (184) selection_statement -> . IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement
    (185) selection_statement -> . IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement
    (186) selection_statement -> . SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement
    (187) iteration_statement -> . WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement
    (188) iteration_statement -> . DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON
    (189) iteration_statement -> . FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement
    (190) iteration_statement -> . FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement
    (191) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (192) jump_statement -> . CONTINUE SEMICOLON
    (193) jump_statement -> . BREAK SEMICOLON
    (194) jump_statement -> . RETURN SEMICOLON
    (195) jump_statement -> . RETURN expression SEMICOLON
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 79
    CASE            shift and go to state 80
    DEFAULT         shift and go to state 81
    LEFT_CURLY_BRACKET shift and go to state 43
    SEMICOLON       shift and go to state 72
    IF              shift and go to state 83
    SWITCH          shift and go to state 85
    WHILE           shift and go to state 86
    DO              shift and go to state 87
    FOR             shift and go to state 88
    GOTO            shift and go to state 89
    CONTINUE        shift and go to state 90
    BREAK           shift and go to state 91
    RETURN          shift and go to state 92
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    statement                      shift and go to state 255
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    expression                     shift and go to state 82
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 94
    unary_expression               shift and go to state 95
    logical_or_expression          shift and go to state 96
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 168

    (183) expression_statement -> expression SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    CASE            reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    DO              reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    GOTO            reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    TYPEDEF         reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    AUTO            reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    VOID            reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    SHORT           reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    INT             reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    LONG            reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    DOUBLE          reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    SIGNED          reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    UNSIGNED        reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    BOOL            reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    TYPE_NAME       reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    CONST           reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    STRUCT          reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    CLASS           reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    INC_OP          reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    DEC_OP          reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    SIZEOF          reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    BITWISE_AND     reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    MULTIPLY        reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    PLUS            reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    BITWISE_NOT     reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    LOGICAL_NOT     reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    FLOAT_CONSTANT  reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    HEX_CONSTANT    reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    OCT_CONSTANT    reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    INT_CONSTANT    reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    CHAR_CONSTANT   reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    LEFT_BRACKET    reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    (               reduce using rule 183 (expression_statement -> expression SEMICOLON .)
    RIGHT_BRACKET   reduce using rule 183 (expression_statement -> expression SEMICOLON .)


state 169

    (78) expression -> expression COMMA . assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    assignment_expression          shift and go to state 256
    conditional_expression         shift and go to state 94
    unary_expression               shift and go to state 95
    logical_or_expression          shift and go to state 96
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 170

    (184) selection_statement -> IF LEFT_BRACKET . expression RIGHT_BRACKET compound_statement
    (185) selection_statement -> IF LEFT_BRACKET . expression RIGHT_BRACKET compound_statement ELSE compound_statement
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    expression                     shift and go to state 257
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 94
    unary_expression               shift and go to state 95
    logical_or_expression          shift and go to state 96
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 171

    (9) primary_expression -> LEFT_BRACKET expression . RIGHT_BRACKET
    (78) expression -> expression . COMMA assignment_expression

    RIGHT_BRACKET   shift and go to state 258
    COMMA           shift and go to state 169


state 172

    (186) selection_statement -> SWITCH LEFT_BRACKET . expression RIGHT_BRACKET compound_statement
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    expression                     shift and go to state 259
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 94
    unary_expression               shift and go to state 95
    logical_or_expression          shift and go to state 96
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 173

    (187) iteration_statement -> WHILE LEFT_BRACKET . expression RIGHT_BRACKET compound_statement
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    expression                     shift and go to state 260
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 94
    unary_expression               shift and go to state 95
    logical_or_expression          shift and go to state 96
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 174

    (188) iteration_statement -> DO compound_statement . WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON

    WHILE           shift and go to state 261


state 175

    (189) iteration_statement -> FOR LEFT_BRACKET . expression_statement expression_statement RIGHT_BRACKET compound_statement
    (190) iteration_statement -> FOR LEFT_BRACKET . expression_statement expression_statement expression RIGHT_BRACKET compound_statement
    (182) expression_statement -> . SEMICOLON
    (183) expression_statement -> . expression SEMICOLON
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    SEMICOLON       shift and go to state 72
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    expression_statement           shift and go to state 262
    expression                     shift and go to state 82
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 94
    unary_expression               shift and go to state 95
    logical_or_expression          shift and go to state 96
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 176

    (191) jump_statement -> GOTO IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 263


state 177

    (192) jump_statement -> CONTINUE SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    GOTO            reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    TYPEDEF         reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    AUTO            reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    SHORT           reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    LONG            reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    SIGNED          reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    UNSIGNED        reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    BOOL            reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    TYPE_NAME       reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    STRUCT          reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    CLASS           reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    INC_OP          reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    DEC_OP          reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    SIZEOF          reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    BITWISE_AND     reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    MULTIPLY        reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    BITWISE_NOT     reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    LOGICAL_NOT     reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    FLOAT_CONSTANT  reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    HEX_CONSTANT    reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    OCT_CONSTANT    reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    INT_CONSTANT    reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    CHAR_CONSTANT   reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    STRING_LITERAL  reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    LEFT_BRACKET    reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)
    (               reduce using rule 192 (jump_statement -> CONTINUE SEMICOLON .)


state 178

    (193) jump_statement -> BREAK SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    GOTO            reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    TYPEDEF         reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    AUTO            reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    SHORT           reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    INT             reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    LONG            reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    SIGNED          reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    UNSIGNED        reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    BOOL            reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    TYPE_NAME       reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    CONST           reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    STRUCT          reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    CLASS           reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    INC_OP          reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    DEC_OP          reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    SIZEOF          reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    BITWISE_AND     reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    MULTIPLY        reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    BITWISE_NOT     reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    LOGICAL_NOT     reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    FLOAT_CONSTANT  reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    HEX_CONSTANT    reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    OCT_CONSTANT    reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    INT_CONSTANT    reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    CHAR_CONSTANT   reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    STRING_LITERAL  reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    LEFT_BRACKET    reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)
    (               reduce using rule 193 (jump_statement -> BREAK SEMICOLON .)


state 179

    (194) jump_statement -> RETURN SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    CASE            reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    GOTO            reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    TYPEDEF         reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    AUTO            reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    VOID            reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    SHORT           reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    INT             reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    LONG            reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    DOUBLE          reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    SIGNED          reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    UNSIGNED        reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    BOOL            reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    TYPE_NAME       reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    CONST           reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    STRUCT          reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    CLASS           reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    INC_OP          reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    DEC_OP          reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    SIZEOF          reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    BITWISE_AND     reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    MULTIPLY        reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    BITWISE_NOT     reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    LOGICAL_NOT     reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    FLOAT_CONSTANT  reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    HEX_CONSTANT    reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    OCT_CONSTANT    reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    INT_CONSTANT    reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    CHAR_CONSTANT   reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    STRING_LITERAL  reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)
    (               reduce using rule 194 (jump_statement -> RETURN SEMICOLON .)


state 180

    (195) jump_statement -> RETURN expression . SEMICOLON
    (78) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 264
    COMMA           shift and go to state 169


state 181

    (65) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    unary_expression               shift and go to state 95
    assignment_expression          shift and go to state 265
    conditional_expression         shift and go to state 94
    logical_or_expression          shift and go to state 96
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 182

    (66) assignment_operator -> EQ .

    INC_OP          reduce using rule 66 (assignment_operator -> EQ .)
    DEC_OP          reduce using rule 66 (assignment_operator -> EQ .)
    SIZEOF          reduce using rule 66 (assignment_operator -> EQ .)
    BITWISE_AND     reduce using rule 66 (assignment_operator -> EQ .)
    MULTIPLY        reduce using rule 66 (assignment_operator -> EQ .)
    PLUS            reduce using rule 66 (assignment_operator -> EQ .)
    MINUS           reduce using rule 66 (assignment_operator -> EQ .)
    BITWISE_NOT     reduce using rule 66 (assignment_operator -> EQ .)
    LOGICAL_NOT     reduce using rule 66 (assignment_operator -> EQ .)
    IDENTIFIER      reduce using rule 66 (assignment_operator -> EQ .)
    FLOAT_CONSTANT  reduce using rule 66 (assignment_operator -> EQ .)
    HEX_CONSTANT    reduce using rule 66 (assignment_operator -> EQ .)
    OCT_CONSTANT    reduce using rule 66 (assignment_operator -> EQ .)
    INT_CONSTANT    reduce using rule 66 (assignment_operator -> EQ .)
    CHAR_CONSTANT   reduce using rule 66 (assignment_operator -> EQ .)
    STRING_LITERAL  reduce using rule 66 (assignment_operator -> EQ .)
    LEFT_BRACKET    reduce using rule 66 (assignment_operator -> EQ .)
    (               reduce using rule 66 (assignment_operator -> EQ .)


state 183

    (67) assignment_operator -> MUL_ASSIGN .

    INC_OP          reduce using rule 67 (assignment_operator -> MUL_ASSIGN .)
    DEC_OP          reduce using rule 67 (assignment_operator -> MUL_ASSIGN .)
    SIZEOF          reduce using rule 67 (assignment_operator -> MUL_ASSIGN .)
    BITWISE_AND     reduce using rule 67 (assignment_operator -> MUL_ASSIGN .)
    MULTIPLY        reduce using rule 67 (assignment_operator -> MUL_ASSIGN .)
    PLUS            reduce using rule 67 (assignment_operator -> MUL_ASSIGN .)
    MINUS           reduce using rule 67 (assignment_operator -> MUL_ASSIGN .)
    BITWISE_NOT     reduce using rule 67 (assignment_operator -> MUL_ASSIGN .)
    LOGICAL_NOT     reduce using rule 67 (assignment_operator -> MUL_ASSIGN .)
    IDENTIFIER      reduce using rule 67 (assignment_operator -> MUL_ASSIGN .)
    FLOAT_CONSTANT  reduce using rule 67 (assignment_operator -> MUL_ASSIGN .)
    HEX_CONSTANT    reduce using rule 67 (assignment_operator -> MUL_ASSIGN .)
    OCT_CONSTANT    reduce using rule 67 (assignment_operator -> MUL_ASSIGN .)
    INT_CONSTANT    reduce using rule 67 (assignment_operator -> MUL_ASSIGN .)
    CHAR_CONSTANT   reduce using rule 67 (assignment_operator -> MUL_ASSIGN .)
    STRING_LITERAL  reduce using rule 67 (assignment_operator -> MUL_ASSIGN .)
    LEFT_BRACKET    reduce using rule 67 (assignment_operator -> MUL_ASSIGN .)
    (               reduce using rule 67 (assignment_operator -> MUL_ASSIGN .)


state 184

    (68) assignment_operator -> DIV_ASSIGN .

    INC_OP          reduce using rule 68 (assignment_operator -> DIV_ASSIGN .)
    DEC_OP          reduce using rule 68 (assignment_operator -> DIV_ASSIGN .)
    SIZEOF          reduce using rule 68 (assignment_operator -> DIV_ASSIGN .)
    BITWISE_AND     reduce using rule 68 (assignment_operator -> DIV_ASSIGN .)
    MULTIPLY        reduce using rule 68 (assignment_operator -> DIV_ASSIGN .)
    PLUS            reduce using rule 68 (assignment_operator -> DIV_ASSIGN .)
    MINUS           reduce using rule 68 (assignment_operator -> DIV_ASSIGN .)
    BITWISE_NOT     reduce using rule 68 (assignment_operator -> DIV_ASSIGN .)
    LOGICAL_NOT     reduce using rule 68 (assignment_operator -> DIV_ASSIGN .)
    IDENTIFIER      reduce using rule 68 (assignment_operator -> DIV_ASSIGN .)
    FLOAT_CONSTANT  reduce using rule 68 (assignment_operator -> DIV_ASSIGN .)
    HEX_CONSTANT    reduce using rule 68 (assignment_operator -> DIV_ASSIGN .)
    OCT_CONSTANT    reduce using rule 68 (assignment_operator -> DIV_ASSIGN .)
    INT_CONSTANT    reduce using rule 68 (assignment_operator -> DIV_ASSIGN .)
    CHAR_CONSTANT   reduce using rule 68 (assignment_operator -> DIV_ASSIGN .)
    STRING_LITERAL  reduce using rule 68 (assignment_operator -> DIV_ASSIGN .)
    LEFT_BRACKET    reduce using rule 68 (assignment_operator -> DIV_ASSIGN .)
    (               reduce using rule 68 (assignment_operator -> DIV_ASSIGN .)


state 185

    (69) assignment_operator -> MOD_ASSIGN .

    INC_OP          reduce using rule 69 (assignment_operator -> MOD_ASSIGN .)
    DEC_OP          reduce using rule 69 (assignment_operator -> MOD_ASSIGN .)
    SIZEOF          reduce using rule 69 (assignment_operator -> MOD_ASSIGN .)
    BITWISE_AND     reduce using rule 69 (assignment_operator -> MOD_ASSIGN .)
    MULTIPLY        reduce using rule 69 (assignment_operator -> MOD_ASSIGN .)
    PLUS            reduce using rule 69 (assignment_operator -> MOD_ASSIGN .)
    MINUS           reduce using rule 69 (assignment_operator -> MOD_ASSIGN .)
    BITWISE_NOT     reduce using rule 69 (assignment_operator -> MOD_ASSIGN .)
    LOGICAL_NOT     reduce using rule 69 (assignment_operator -> MOD_ASSIGN .)
    IDENTIFIER      reduce using rule 69 (assignment_operator -> MOD_ASSIGN .)
    FLOAT_CONSTANT  reduce using rule 69 (assignment_operator -> MOD_ASSIGN .)
    HEX_CONSTANT    reduce using rule 69 (assignment_operator -> MOD_ASSIGN .)
    OCT_CONSTANT    reduce using rule 69 (assignment_operator -> MOD_ASSIGN .)
    INT_CONSTANT    reduce using rule 69 (assignment_operator -> MOD_ASSIGN .)
    CHAR_CONSTANT   reduce using rule 69 (assignment_operator -> MOD_ASSIGN .)
    STRING_LITERAL  reduce using rule 69 (assignment_operator -> MOD_ASSIGN .)
    LEFT_BRACKET    reduce using rule 69 (assignment_operator -> MOD_ASSIGN .)
    (               reduce using rule 69 (assignment_operator -> MOD_ASSIGN .)


state 186

    (70) assignment_operator -> ADD_ASSIGN .

    INC_OP          reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    DEC_OP          reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    SIZEOF          reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    BITWISE_AND     reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    MULTIPLY        reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    PLUS            reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    MINUS           reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    BITWISE_NOT     reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    LOGICAL_NOT     reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    IDENTIFIER      reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    FLOAT_CONSTANT  reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    HEX_CONSTANT    reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    OCT_CONSTANT    reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    INT_CONSTANT    reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    CHAR_CONSTANT   reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    STRING_LITERAL  reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    LEFT_BRACKET    reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    (               reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)


state 187

    (71) assignment_operator -> SUB_ASSIGN .

    INC_OP          reduce using rule 71 (assignment_operator -> SUB_ASSIGN .)
    DEC_OP          reduce using rule 71 (assignment_operator -> SUB_ASSIGN .)
    SIZEOF          reduce using rule 71 (assignment_operator -> SUB_ASSIGN .)
    BITWISE_AND     reduce using rule 71 (assignment_operator -> SUB_ASSIGN .)
    MULTIPLY        reduce using rule 71 (assignment_operator -> SUB_ASSIGN .)
    PLUS            reduce using rule 71 (assignment_operator -> SUB_ASSIGN .)
    MINUS           reduce using rule 71 (assignment_operator -> SUB_ASSIGN .)
    BITWISE_NOT     reduce using rule 71 (assignment_operator -> SUB_ASSIGN .)
    LOGICAL_NOT     reduce using rule 71 (assignment_operator -> SUB_ASSIGN .)
    IDENTIFIER      reduce using rule 71 (assignment_operator -> SUB_ASSIGN .)
    FLOAT_CONSTANT  reduce using rule 71 (assignment_operator -> SUB_ASSIGN .)
    HEX_CONSTANT    reduce using rule 71 (assignment_operator -> SUB_ASSIGN .)
    OCT_CONSTANT    reduce using rule 71 (assignment_operator -> SUB_ASSIGN .)
    INT_CONSTANT    reduce using rule 71 (assignment_operator -> SUB_ASSIGN .)
    CHAR_CONSTANT   reduce using rule 71 (assignment_operator -> SUB_ASSIGN .)
    STRING_LITERAL  reduce using rule 71 (assignment_operator -> SUB_ASSIGN .)
    LEFT_BRACKET    reduce using rule 71 (assignment_operator -> SUB_ASSIGN .)
    (               reduce using rule 71 (assignment_operator -> SUB_ASSIGN .)


state 188

    (72) assignment_operator -> LEFT_ASSIGN .

    INC_OP          reduce using rule 72 (assignment_operator -> LEFT_ASSIGN .)
    DEC_OP          reduce using rule 72 (assignment_operator -> LEFT_ASSIGN .)
    SIZEOF          reduce using rule 72 (assignment_operator -> LEFT_ASSIGN .)
    BITWISE_AND     reduce using rule 72 (assignment_operator -> LEFT_ASSIGN .)
    MULTIPLY        reduce using rule 72 (assignment_operator -> LEFT_ASSIGN .)
    PLUS            reduce using rule 72 (assignment_operator -> LEFT_ASSIGN .)
    MINUS           reduce using rule 72 (assignment_operator -> LEFT_ASSIGN .)
    BITWISE_NOT     reduce using rule 72 (assignment_operator -> LEFT_ASSIGN .)
    LOGICAL_NOT     reduce using rule 72 (assignment_operator -> LEFT_ASSIGN .)
    IDENTIFIER      reduce using rule 72 (assignment_operator -> LEFT_ASSIGN .)
    FLOAT_CONSTANT  reduce using rule 72 (assignment_operator -> LEFT_ASSIGN .)
    HEX_CONSTANT    reduce using rule 72 (assignment_operator -> LEFT_ASSIGN .)
    OCT_CONSTANT    reduce using rule 72 (assignment_operator -> LEFT_ASSIGN .)
    INT_CONSTANT    reduce using rule 72 (assignment_operator -> LEFT_ASSIGN .)
    CHAR_CONSTANT   reduce using rule 72 (assignment_operator -> LEFT_ASSIGN .)
    STRING_LITERAL  reduce using rule 72 (assignment_operator -> LEFT_ASSIGN .)
    LEFT_BRACKET    reduce using rule 72 (assignment_operator -> LEFT_ASSIGN .)
    (               reduce using rule 72 (assignment_operator -> LEFT_ASSIGN .)


state 189

    (73) assignment_operator -> RIGHT_ASSIGN .

    INC_OP          reduce using rule 73 (assignment_operator -> RIGHT_ASSIGN .)
    DEC_OP          reduce using rule 73 (assignment_operator -> RIGHT_ASSIGN .)
    SIZEOF          reduce using rule 73 (assignment_operator -> RIGHT_ASSIGN .)
    BITWISE_AND     reduce using rule 73 (assignment_operator -> RIGHT_ASSIGN .)
    MULTIPLY        reduce using rule 73 (assignment_operator -> RIGHT_ASSIGN .)
    PLUS            reduce using rule 73 (assignment_operator -> RIGHT_ASSIGN .)
    MINUS           reduce using rule 73 (assignment_operator -> RIGHT_ASSIGN .)
    BITWISE_NOT     reduce using rule 73 (assignment_operator -> RIGHT_ASSIGN .)
    LOGICAL_NOT     reduce using rule 73 (assignment_operator -> RIGHT_ASSIGN .)
    IDENTIFIER      reduce using rule 73 (assignment_operator -> RIGHT_ASSIGN .)
    FLOAT_CONSTANT  reduce using rule 73 (assignment_operator -> RIGHT_ASSIGN .)
    HEX_CONSTANT    reduce using rule 73 (assignment_operator -> RIGHT_ASSIGN .)
    OCT_CONSTANT    reduce using rule 73 (assignment_operator -> RIGHT_ASSIGN .)
    INT_CONSTANT    reduce using rule 73 (assignment_operator -> RIGHT_ASSIGN .)
    CHAR_CONSTANT   reduce using rule 73 (assignment_operator -> RIGHT_ASSIGN .)
    STRING_LITERAL  reduce using rule 73 (assignment_operator -> RIGHT_ASSIGN .)
    LEFT_BRACKET    reduce using rule 73 (assignment_operator -> RIGHT_ASSIGN .)
    (               reduce using rule 73 (assignment_operator -> RIGHT_ASSIGN .)


state 190

    (74) assignment_operator -> AND_ASSIGN .

    INC_OP          reduce using rule 74 (assignment_operator -> AND_ASSIGN .)
    DEC_OP          reduce using rule 74 (assignment_operator -> AND_ASSIGN .)
    SIZEOF          reduce using rule 74 (assignment_operator -> AND_ASSIGN .)
    BITWISE_AND     reduce using rule 74 (assignment_operator -> AND_ASSIGN .)
    MULTIPLY        reduce using rule 74 (assignment_operator -> AND_ASSIGN .)
    PLUS            reduce using rule 74 (assignment_operator -> AND_ASSIGN .)
    MINUS           reduce using rule 74 (assignment_operator -> AND_ASSIGN .)
    BITWISE_NOT     reduce using rule 74 (assignment_operator -> AND_ASSIGN .)
    LOGICAL_NOT     reduce using rule 74 (assignment_operator -> AND_ASSIGN .)
    IDENTIFIER      reduce using rule 74 (assignment_operator -> AND_ASSIGN .)
    FLOAT_CONSTANT  reduce using rule 74 (assignment_operator -> AND_ASSIGN .)
    HEX_CONSTANT    reduce using rule 74 (assignment_operator -> AND_ASSIGN .)
    OCT_CONSTANT    reduce using rule 74 (assignment_operator -> AND_ASSIGN .)
    INT_CONSTANT    reduce using rule 74 (assignment_operator -> AND_ASSIGN .)
    CHAR_CONSTANT   reduce using rule 74 (assignment_operator -> AND_ASSIGN .)
    STRING_LITERAL  reduce using rule 74 (assignment_operator -> AND_ASSIGN .)
    LEFT_BRACKET    reduce using rule 74 (assignment_operator -> AND_ASSIGN .)
    (               reduce using rule 74 (assignment_operator -> AND_ASSIGN .)


state 191

    (75) assignment_operator -> XOR_ASSIGN .

    INC_OP          reduce using rule 75 (assignment_operator -> XOR_ASSIGN .)
    DEC_OP          reduce using rule 75 (assignment_operator -> XOR_ASSIGN .)
    SIZEOF          reduce using rule 75 (assignment_operator -> XOR_ASSIGN .)
    BITWISE_AND     reduce using rule 75 (assignment_operator -> XOR_ASSIGN .)
    MULTIPLY        reduce using rule 75 (assignment_operator -> XOR_ASSIGN .)
    PLUS            reduce using rule 75 (assignment_operator -> XOR_ASSIGN .)
    MINUS           reduce using rule 75 (assignment_operator -> XOR_ASSIGN .)
    BITWISE_NOT     reduce using rule 75 (assignment_operator -> XOR_ASSIGN .)
    LOGICAL_NOT     reduce using rule 75 (assignment_operator -> XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 75 (assignment_operator -> XOR_ASSIGN .)
    FLOAT_CONSTANT  reduce using rule 75 (assignment_operator -> XOR_ASSIGN .)
    HEX_CONSTANT    reduce using rule 75 (assignment_operator -> XOR_ASSIGN .)
    OCT_CONSTANT    reduce using rule 75 (assignment_operator -> XOR_ASSIGN .)
    INT_CONSTANT    reduce using rule 75 (assignment_operator -> XOR_ASSIGN .)
    CHAR_CONSTANT   reduce using rule 75 (assignment_operator -> XOR_ASSIGN .)
    STRING_LITERAL  reduce using rule 75 (assignment_operator -> XOR_ASSIGN .)
    LEFT_BRACKET    reduce using rule 75 (assignment_operator -> XOR_ASSIGN .)
    (               reduce using rule 75 (assignment_operator -> XOR_ASSIGN .)


state 192

    (76) assignment_operator -> OR_ASSIGN .

    INC_OP          reduce using rule 76 (assignment_operator -> OR_ASSIGN .)
    DEC_OP          reduce using rule 76 (assignment_operator -> OR_ASSIGN .)
    SIZEOF          reduce using rule 76 (assignment_operator -> OR_ASSIGN .)
    BITWISE_AND     reduce using rule 76 (assignment_operator -> OR_ASSIGN .)
    MULTIPLY        reduce using rule 76 (assignment_operator -> OR_ASSIGN .)
    PLUS            reduce using rule 76 (assignment_operator -> OR_ASSIGN .)
    MINUS           reduce using rule 76 (assignment_operator -> OR_ASSIGN .)
    BITWISE_NOT     reduce using rule 76 (assignment_operator -> OR_ASSIGN .)
    LOGICAL_NOT     reduce using rule 76 (assignment_operator -> OR_ASSIGN .)
    IDENTIFIER      reduce using rule 76 (assignment_operator -> OR_ASSIGN .)
    FLOAT_CONSTANT  reduce using rule 76 (assignment_operator -> OR_ASSIGN .)
    HEX_CONSTANT    reduce using rule 76 (assignment_operator -> OR_ASSIGN .)
    OCT_CONSTANT    reduce using rule 76 (assignment_operator -> OR_ASSIGN .)
    INT_CONSTANT    reduce using rule 76 (assignment_operator -> OR_ASSIGN .)
    CHAR_CONSTANT   reduce using rule 76 (assignment_operator -> OR_ASSIGN .)
    STRING_LITERAL  reduce using rule 76 (assignment_operator -> OR_ASSIGN .)
    LEFT_BRACKET    reduce using rule 76 (assignment_operator -> OR_ASSIGN .)
    (               reduce using rule 76 (assignment_operator -> OR_ASSIGN .)


state 193

    (63) conditional_expression -> logical_or_expression QUESTION . expression COLON conditional_expression
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    logical_or_expression          shift and go to state 96
    expression                     shift and go to state 266
    conditional_expression         shift and go to state 94
    assignment_expression          shift and go to state 93
    unary_expression               shift and go to state 95
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 194

    (61) logical_or_expression -> logical_or_expression LOGICAL_OR_OP . logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    logical_and_expression         shift and go to state 267
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124
    cast_expression                shift and go to state 101
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 195

    (11) postfix_expression -> postfix_expression LEFT_THIRD_BRACKET . expression RIGHT_THIRD_BRACKET
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    postfix_expression             shift and go to state 97
    expression                     shift and go to state 268
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 94
    unary_expression               shift and go to state 95
    logical_or_expression          shift and go to state 96
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 196

    (12) postfix_expression -> postfix_expression LEFT_BRACKET . RIGHT_BRACKET
    (13) postfix_expression -> postfix_expression LEFT_BRACKET . argument_expression_list RIGHT_BRACKET
    (18) argument_expression_list -> . assignment_expression
    (19) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    RIGHT_BRACKET   shift and go to state 269
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    postfix_expression             shift and go to state 97
    argument_expression_list       shift and go to state 270
    assignment_expression          shift and go to state 271
    conditional_expression         shift and go to state 94
    unary_expression               shift and go to state 95
    logical_or_expression          shift and go to state 96
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 197

    (14) postfix_expression -> postfix_expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 272


state 198

    (15) postfix_expression -> postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER      shift and go to state 273


state 199

    (16) postfix_expression -> postfix_expression INC_OP .

    LEFT_THIRD_BRACKET reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_BRACKET    reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    DOT             reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    PTR_OP          reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    INC_OP          reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    DEC_OP          reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    EQ              reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    MUL_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    DIV_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    MOD_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    ADD_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    SUB_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_ASSIGN     reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_ASSIGN    reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    AND_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    XOR_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    OR_ASSIGN       reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    MULTIPLY        reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    DIVIDE          reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    MOD             reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    PLUS            reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    MINUS           reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_OP         reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_OP        reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    LESS            reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    GREATER         reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    LE_OP           reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    GE_OP           reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    EQ_OP           reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    NE_OP           reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    BITWISE_AND     reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    BITWISE_XOR     reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    BITWISE_OR      reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    LOGICAL_AND_OP  reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    QUESTION        reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    LOGICAL_OR_OP   reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    SEMICOLON       reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    COMMA           reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_THIRD_BRACKET reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    COLON           reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_BRACKET   reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_CURLY_BRACKET reduce using rule 16 (postfix_expression -> postfix_expression INC_OP .)


state 200

    (17) postfix_expression -> postfix_expression DEC_OP .

    LEFT_THIRD_BRACKET reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_BRACKET    reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    DOT             reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    PTR_OP          reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    INC_OP          reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    DEC_OP          reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    EQ              reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    MUL_ASSIGN      reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    DIV_ASSIGN      reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    MOD_ASSIGN      reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    ADD_ASSIGN      reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    SUB_ASSIGN      reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_ASSIGN     reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_ASSIGN    reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    AND_ASSIGN      reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    XOR_ASSIGN      reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    OR_ASSIGN       reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    MULTIPLY        reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    DIVIDE          reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    MOD             reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    PLUS            reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    MINUS           reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_OP         reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_OP        reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    LESS            reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    GREATER         reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    LE_OP           reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    GE_OP           reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    EQ_OP           reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    NE_OP           reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    BITWISE_AND     reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    BITWISE_XOR     reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    BITWISE_OR      reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    LOGICAL_AND_OP  reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    QUESTION        reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    LOGICAL_OR_OP   reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    SEMICOLON       reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    COMMA           reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_THIRD_BRACKET reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    COLON           reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_BRACKET   reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_CURLY_BRACKET reduce using rule 17 (postfix_expression -> postfix_expression DEC_OP .)


state 201

    (21) unary_expression -> INC_OP unary_expression .

    EQ              reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    MULTIPLY        reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    DIVIDE          reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    MOD             reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    PLUS            reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    MINUS           reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    LEFT_OP         reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    RIGHT_OP        reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    LESS            reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    GREATER         reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    LE_OP           reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    GE_OP           reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    EQ_OP           reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    NE_OP           reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    BITWISE_AND     reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    BITWISE_XOR     reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    BITWISE_OR      reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    LOGICAL_AND_OP  reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    QUESTION        reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    LOGICAL_OR_OP   reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    SEMICOLON       reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    COMMA           reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    COLON           reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    RIGHT_BRACKET   reduce using rule 21 (unary_expression -> INC_OP unary_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 21 (unary_expression -> INC_OP unary_expression .)


state 202

    (22) unary_expression -> DEC_OP unary_expression .

    EQ              reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    MULTIPLY        reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    DIVIDE          reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    MOD             reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    PLUS            reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    MINUS           reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    LEFT_OP         reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_OP        reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    LESS            reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    GREATER         reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    LE_OP           reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    GE_OP           reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    EQ_OP           reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    NE_OP           reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    BITWISE_AND     reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    BITWISE_XOR     reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    BITWISE_OR      reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    LOGICAL_AND_OP  reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    QUESTION        reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    LOGICAL_OR_OP   reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    SEMICOLON       reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    COMMA           reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    COLON           reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_BRACKET   reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 22 (unary_expression -> DEC_OP unary_expression .)


state 203

    (23) unary_expression -> unary_operator cast_expression .

    EQ              reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    MUL_ASSIGN      reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    DIV_ASSIGN      reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    MOD_ASSIGN      reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    ADD_ASSIGN      reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    SUB_ASSIGN      reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    LEFT_ASSIGN     reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    RIGHT_ASSIGN    reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    AND_ASSIGN      reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    XOR_ASSIGN      reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    OR_ASSIGN       reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    MULTIPLY        reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    LEFT_OP         reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    RIGHT_OP        reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    LESS            reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    GREATER         reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    LE_OP           reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    GE_OP           reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    EQ_OP           reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    NE_OP           reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    BITWISE_AND     reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    BITWISE_XOR     reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    BITWISE_OR      reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    LOGICAL_AND_OP  reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    QUESTION        reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    LOGICAL_OR_OP   reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    SEMICOLON       reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    RIGHT_BRACKET   reduce using rule 23 (unary_expression -> unary_operator cast_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 23 (unary_expression -> unary_operator cast_expression .)


state 204

    (24) unary_expression -> SIZEOF unary_expression .

    EQ              reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    MUL_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    DIV_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    MOD_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    ADD_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    SUB_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    LEFT_ASSIGN     reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_ASSIGN    reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    AND_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    XOR_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    OR_ASSIGN       reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    MULTIPLY        reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE          reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    MOD             reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    LEFT_OP         reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_OP        reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    LESS            reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    GREATER         reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    LE_OP           reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    GE_OP           reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    EQ_OP           reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    NE_OP           reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    BITWISE_AND     reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    BITWISE_XOR     reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    BITWISE_OR      reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    LOGICAL_AND_OP  reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    QUESTION        reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    LOGICAL_OR_OP   reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    SEMICOLON       reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_BRACKET   reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 24 (unary_expression -> SIZEOF unary_expression .)


state 205

    (25) unary_expression -> SIZEOF LEFT_BRACKET . type_name RIGHT_BRACKET
    (9) primary_expression -> LEFT_BRACKET . expression RIGHT_BRACKET
    (146) type_name -> . specifier_qualifier_list
    (147) type_name -> . specifier_qualifier_list abstract_declarator
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (113) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (114) specifier_qualifier_list -> . type_specifier
    (115) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (116) specifier_qualifier_list -> . type_qualifier
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    STRUCT          shift and go to state 32
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    CLASS           shift and go to state 34
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    type_name                      shift and go to state 274
    expression                     shift and go to state 171
    specifier_qualifier_list       shift and go to state 224
    assignment_expression          shift and go to state 93
    type_specifier                 shift and go to state 146
    type_qualifier                 shift and go to state 147
    conditional_expression         shift and go to state 94
    unary_expression               shift and go to state 95
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    logical_or_expression          shift and go to state 96
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    class_definition_head          shift and go to state 33
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 206

    (59) logical_and_expression -> logical_and_expression LOGICAL_AND_OP . inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    inclusive_or_expression        shift and go to state 275
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124
    cast_expression                shift and go to state 101
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 207

    (57) inclusive_or_expression -> inclusive_or_expression BITWISE_OR . exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    exclusive_or_expression        shift and go to state 276
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124
    cast_expression                shift and go to state 101
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 208

    (55) exclusive_or_expression -> exclusive_or_expression BITWISE_XOR . and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    and_expression                 shift and go to state 277
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124
    cast_expression                shift and go to state 101
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 209

    (53) and_expression -> and_expression BITWISE_AND . equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    equality_expression            shift and go to state 278
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124
    cast_expression                shift and go to state 101
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 210

    (50) equality_expression -> equality_expression EQ_OP . relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    relational_expression          shift and go to state 279
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124
    cast_expression                shift and go to state 101
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 211

    (51) equality_expression -> equality_expression NE_OP . relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    relational_expression          shift and go to state 280
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124
    cast_expression                shift and go to state 101
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 212

    (45) relational_expression -> relational_expression LESS . shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    shift_expression               shift and go to state 281
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124
    cast_expression                shift and go to state 101
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 213

    (46) relational_expression -> relational_expression GREATER . shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    shift_expression               shift and go to state 282
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124
    cast_expression                shift and go to state 101
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 214

    (47) relational_expression -> relational_expression LE_OP . shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    shift_expression               shift and go to state 283
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124
    cast_expression                shift and go to state 101
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 215

    (48) relational_expression -> relational_expression GE_OP . shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    shift_expression               shift and go to state 284
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124
    cast_expression                shift and go to state 101
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 216

    (42) shift_expression -> shift_expression LEFT_OP . additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    additive_expression            shift and go to state 285
    multiplicative_expression      shift and go to state 124
    cast_expression                shift and go to state 101
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 217

    (43) shift_expression -> shift_expression RIGHT_OP . additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    additive_expression            shift and go to state 286
    multiplicative_expression      shift and go to state 124
    cast_expression                shift and go to state 101
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 218

    (39) additive_expression -> additive_expression PLUS . multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    multiplicative_expression      shift and go to state 287
    cast_expression                shift and go to state 101
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 219

    (40) additive_expression -> additive_expression MINUS . multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    multiplicative_expression      shift and go to state 288
    cast_expression                shift and go to state 101
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 220

    (35) multiplicative_expression -> multiplicative_expression MULTIPLY . cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    cast_expression                shift and go to state 289
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 221

    (36) multiplicative_expression -> multiplicative_expression DIVIDE . cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    cast_expression                shift and go to state 290
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 222

    (37) multiplicative_expression -> multiplicative_expression MOD . cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    cast_expression                shift and go to state 291
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 223

    (33) cast_expression -> ( type_name . ) cast_expression

    )               shift and go to state 292


state 224

    (146) type_name -> specifier_qualifier_list .
    (147) type_name -> specifier_qualifier_list . abstract_declarator
    (148) abstract_declarator -> . pointer
    (149) abstract_declarator -> . direct_abstract_declarator
    (150) abstract_declarator -> . pointer direct_abstract_declarator
    (132) pointer -> . MULTIPLY
    (133) pointer -> . MULTIPLY type_qualifier_list
    (134) pointer -> . MULTIPLY pointer
    (135) pointer -> . MULTIPLY type_qualifier_list pointer
    (151) direct_abstract_declarator -> . LEFT_BRACKET abstract_declarator RIGHT_BRACKET
    (152) direct_abstract_declarator -> . LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (153) direct_abstract_declarator -> . LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (154) direct_abstract_declarator -> . direct_abstract_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (155) direct_abstract_declarator -> . direct_abstract_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (156) direct_abstract_declarator -> . LEFT_BRACKET RIGHT_BRACKET
    (157) direct_abstract_declarator -> . LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (158) direct_abstract_declarator -> . direct_abstract_declarator LEFT_BRACKET RIGHT_BRACKET
    (159) direct_abstract_declarator -> . direct_abstract_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET

    )               reduce using rule 146 (type_name -> specifier_qualifier_list .)
    RIGHT_BRACKET   reduce using rule 146 (type_name -> specifier_qualifier_list .)
    MULTIPLY        shift and go to state 29
    LEFT_BRACKET    shift and go to state 295
    LEFT_THIRD_BRACKET shift and go to state 235

    abstract_declarator            shift and go to state 293
    pointer                        shift and go to state 294
    direct_abstract_declarator     shift and go to state 233

state 225

    (127) direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .

    LEFT_THIRD_BRACKET reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    LEFT_BRACKET    reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    TYPEDEF         reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    AUTO            reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    VOID            reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    CHAR            reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    SHORT           reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    INT             reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    LONG            reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    FLOAT           reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    DOUBLE          reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    SIGNED          reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    UNSIGNED        reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    BOOL            reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    TYPE_NAME       reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    CONST           reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    STRUCT          reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    CLASS           reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    EQ              reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    SEMICOLON       reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    COMMA           reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    RIGHT_BRACKET   reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    COLON           reduce using rule 127 (direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)


state 226

    (129) direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .

    LEFT_THIRD_BRACKET reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    TYPEDEF         reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    AUTO            reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    VOID            reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    CHAR            reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    SHORT           reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    INT             reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    LONG            reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    FLOAT           reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    DOUBLE          reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    SIGNED          reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    UNSIGNED        reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    BOOL            reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    TYPE_NAME       reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    CONST           reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    STRUCT          reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    CLASS           reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    EQ              reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    COMMA           reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    COLON           reduce using rule 129 (direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)


state 227

    (130) direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .

    LEFT_THIRD_BRACKET reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)
    TYPEDEF         reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)
    AUTO            reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)
    VOID            reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)
    CHAR            reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)
    SHORT           reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)
    INT             reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)
    LONG            reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)
    FLOAT           reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)
    DOUBLE          reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)
    SIGNED          reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)
    UNSIGNED        reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)
    BOOL            reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)
    TYPE_NAME       reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)
    CONST           reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)
    STRUCT          reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)
    CLASS           reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)
    EQ              reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)
    COMMA           reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)
    COLON           reduce using rule 130 (direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET .)


state 228

    (145) identifier_list -> identifier_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 296


state 229

    (140) parameter_list -> parameter_list COMMA . parameter_declaration
    (141) parameter_declaration -> . declaration_specifiers declarator
    (142) parameter_declaration -> . declaration_specifiers abstract_declarator
    (143) parameter_declaration -> . declaration_specifiers
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . AUTO
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list

    TYPEDEF         shift and go to state 13
    AUTO            shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34

    parameter_declaration          shift and go to state 297
    declaration_specifiers         shift and go to state 138
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    class_definition_head          shift and go to state 33

state 230

    (141) parameter_declaration -> declaration_specifiers declarator .

    COMMA           reduce using rule 141 (parameter_declaration -> declaration_specifiers declarator .)
    RIGHT_BRACKET   reduce using rule 141 (parameter_declaration -> declaration_specifiers declarator .)


state 231

    (142) parameter_declaration -> declaration_specifiers abstract_declarator .

    COMMA           reduce using rule 142 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    RIGHT_BRACKET   reduce using rule 142 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 232

    (123) declarator -> pointer . direct_declarator
    (148) abstract_declarator -> pointer .
    (150) abstract_declarator -> pointer . direct_abstract_declarator
    (125) direct_declarator -> . IDENTIFIER
    (126) direct_declarator -> . LEFT_BRACKET declarator RIGHT_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (128) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (129) direct_declarator -> . direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (130) direct_declarator -> . direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET
    (131) direct_declarator -> . direct_declarator LEFT_BRACKET RIGHT_BRACKET
    (151) direct_abstract_declarator -> . LEFT_BRACKET abstract_declarator RIGHT_BRACKET
    (152) direct_abstract_declarator -> . LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (153) direct_abstract_declarator -> . LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (154) direct_abstract_declarator -> . direct_abstract_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (155) direct_abstract_declarator -> . direct_abstract_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (156) direct_abstract_declarator -> . LEFT_BRACKET RIGHT_BRACKET
    (157) direct_abstract_declarator -> . LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (158) direct_abstract_declarator -> . direct_abstract_declarator LEFT_BRACKET RIGHT_BRACKET
    (159) direct_abstract_declarator -> . direct_abstract_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET

    COMMA           reduce using rule 148 (abstract_declarator -> pointer .)
    RIGHT_BRACKET   reduce using rule 148 (abstract_declarator -> pointer .)
    IDENTIFIER      shift and go to state 30
    LEFT_BRACKET    shift and go to state 234
    LEFT_THIRD_BRACKET shift and go to state 235

    direct_declarator              shift and go to state 48
    direct_abstract_declarator     shift and go to state 298

state 233

    (149) abstract_declarator -> direct_abstract_declarator .
    (154) direct_abstract_declarator -> direct_abstract_declarator . LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (155) direct_abstract_declarator -> direct_abstract_declarator . LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (158) direct_abstract_declarator -> direct_abstract_declarator . LEFT_BRACKET RIGHT_BRACKET
    (159) direct_abstract_declarator -> direct_abstract_declarator . LEFT_BRACKET parameter_type_list RIGHT_BRACKET

    COMMA           reduce using rule 149 (abstract_declarator -> direct_abstract_declarator .)
    RIGHT_BRACKET   reduce using rule 149 (abstract_declarator -> direct_abstract_declarator .)
    )               reduce using rule 149 (abstract_declarator -> direct_abstract_declarator .)
    LEFT_THIRD_BRACKET shift and go to state 299
    LEFT_BRACKET    shift and go to state 300


state 234

    (126) direct_declarator -> LEFT_BRACKET . declarator RIGHT_BRACKET
    (151) direct_abstract_declarator -> LEFT_BRACKET . abstract_declarator RIGHT_BRACKET
    (156) direct_abstract_declarator -> LEFT_BRACKET . RIGHT_BRACKET
    (157) direct_abstract_declarator -> LEFT_BRACKET . parameter_type_list RIGHT_BRACKET
    (123) declarator -> . pointer direct_declarator
    (124) declarator -> . direct_declarator
    (148) abstract_declarator -> . pointer
    (149) abstract_declarator -> . direct_abstract_declarator
    (150) abstract_declarator -> . pointer direct_abstract_declarator
    (138) parameter_type_list -> . parameter_list
    (132) pointer -> . MULTIPLY
    (133) pointer -> . MULTIPLY type_qualifier_list
    (134) pointer -> . MULTIPLY pointer
    (135) pointer -> . MULTIPLY type_qualifier_list pointer
    (125) direct_declarator -> . IDENTIFIER
    (126) direct_declarator -> . LEFT_BRACKET declarator RIGHT_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (128) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (129) direct_declarator -> . direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (130) direct_declarator -> . direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET
    (131) direct_declarator -> . direct_declarator LEFT_BRACKET RIGHT_BRACKET
    (151) direct_abstract_declarator -> . LEFT_BRACKET abstract_declarator RIGHT_BRACKET
    (152) direct_abstract_declarator -> . LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (153) direct_abstract_declarator -> . LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (154) direct_abstract_declarator -> . direct_abstract_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (155) direct_abstract_declarator -> . direct_abstract_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (156) direct_abstract_declarator -> . LEFT_BRACKET RIGHT_BRACKET
    (157) direct_abstract_declarator -> . LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (158) direct_abstract_declarator -> . direct_abstract_declarator LEFT_BRACKET RIGHT_BRACKET
    (159) direct_abstract_declarator -> . direct_abstract_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (139) parameter_list -> . parameter_declaration
    (140) parameter_list -> . parameter_list COMMA parameter_declaration
    (141) parameter_declaration -> . declaration_specifiers declarator
    (142) parameter_declaration -> . declaration_specifiers abstract_declarator
    (143) parameter_declaration -> . declaration_specifiers
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . AUTO
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list

    RIGHT_BRACKET   shift and go to state 301
    MULTIPLY        shift and go to state 29
    IDENTIFIER      shift and go to state 30
    LEFT_BRACKET    shift and go to state 234
    LEFT_THIRD_BRACKET shift and go to state 235
    TYPEDEF         shift and go to state 13
    AUTO            shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34

    declarator                     shift and go to state 54
    abstract_declarator            shift and go to state 302
    parameter_type_list            shift and go to state 303
    pointer                        shift and go to state 232
    direct_declarator              shift and go to state 12
    direct_abstract_declarator     shift and go to state 233
    parameter_list                 shift and go to state 135
    parameter_declaration          shift and go to state 137
    declaration_specifiers         shift and go to state 138
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    class_definition_head          shift and go to state 33

state 235

    (152) direct_abstract_declarator -> LEFT_THIRD_BRACKET . RIGHT_THIRD_BRACKET
    (153) direct_abstract_declarator -> LEFT_THIRD_BRACKET . constant_expression RIGHT_THIRD_BRACKET
    (79) constant_expression -> . conditional_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    RIGHT_THIRD_BRACKET shift and go to state 304
    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    constant_expression            shift and go to state 305
    conditional_expression         shift and go to state 129
    logical_or_expression          shift and go to state 96
    logical_and_expression         shift and go to state 103
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124
    cast_expression                shift and go to state 101
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 236

    (107) struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list . RIGHT_CURLY_BRACKET
    (111) struct_declaration_list -> struct_declaration_list . struct_declaration
    (112) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (113) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (114) specifier_qualifier_list -> . type_specifier
    (115) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (116) specifier_qualifier_list -> . type_qualifier
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list

    RIGHT_CURLY_BRACKET shift and go to state 306
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34

    struct_declaration             shift and go to state 238
    specifier_qualifier_list       shift and go to state 145
    type_specifier                 shift and go to state 146
    type_qualifier                 shift and go to state 147
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    class_definition_head          shift and go to state 33

state 237

    (108) struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .

    TYPEDEF         reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    AUTO            reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    VOID            reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    CHAR            reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    SHORT           reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    INT             reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    LONG            reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    FLOAT           reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    DOUBLE          reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    SIGNED          reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    UNSIGNED        reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    TYPE_NAME       reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    CONST           reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRUCT          reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    CLASS           reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    SEMICOLON       reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    MULTIPLY        reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    LEFT_BRACKET    reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    LEFT_THIRD_BRACKET reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    COMMA           reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    RIGHT_BRACKET   reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    COLON           reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    )               reduce using rule 108 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)


state 238

    (111) struct_declaration_list -> struct_declaration_list struct_declaration .

    RIGHT_CURLY_BRACKET reduce using rule 111 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 111 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 111 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 111 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 111 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 111 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 111 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 111 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 111 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 111 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    BOOL            reduce using rule 111 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    TYPE_NAME       reduce using rule 111 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 111 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 111 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CLASS           reduce using rule 111 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 239

    (112) struct_declaration -> specifier_qualifier_list struct_declarator_list . SEMICOLON
    (118) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator

    SEMICOLON       shift and go to state 307
    COMMA           shift and go to state 308


state 240

    (117) struct_declarator_list -> struct_declarator .

    SEMICOLON       reduce using rule 117 (struct_declarator_list -> struct_declarator .)
    COMMA           reduce using rule 117 (struct_declarator_list -> struct_declarator .)


state 241

    (119) struct_declarator -> declarator .
    (121) struct_declarator -> declarator . COLON constant_expression

    SEMICOLON       reduce using rule 119 (struct_declarator -> declarator .)
    COMMA           reduce using rule 119 (struct_declarator -> declarator .)
    COLON           shift and go to state 309


state 242

    (120) struct_declarator -> COLON . constant_expression
    (79) constant_expression -> . conditional_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    constant_expression            shift and go to state 310
    conditional_expression         shift and go to state 129
    logical_or_expression          shift and go to state 96
    logical_and_expression         shift and go to state 103
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124
    cast_expression                shift and go to state 101
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 243

    (113) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    COLON           reduce using rule 113 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    MULTIPLY        reduce using rule 113 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 113 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LEFT_BRACKET    reduce using rule 113 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LEFT_THIRD_BRACKET reduce using rule 113 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    )               reduce using rule 113 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    RIGHT_BRACKET   reduce using rule 113 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 244

    (115) specifier_qualifier_list -> type_qualifier specifier_qualifier_list .

    COLON           reduce using rule 115 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    MULTIPLY        reduce using rule 115 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 115 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    LEFT_BRACKET    reduce using rule 115 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    LEFT_THIRD_BRACKET reduce using rule 115 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    )               reduce using rule 115 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    RIGHT_BRACKET   reduce using rule 115 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)


state 245

    (214) class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .

    TYPEDEF         reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    AUTO            reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    VOID            reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    CHAR            reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    SHORT           reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    INT             reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    LONG            reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    FLOAT           reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    DOUBLE          reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    SIGNED          reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    UNSIGNED        reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    TYPE_NAME       reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    CONST           reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    STRUCT          reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    CLASS           reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    SEMICOLON       reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    MULTIPLY        reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    LEFT_BRACKET    reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    LEFT_THIRD_BRACKET reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    COMMA           reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    RIGHT_BRACKET   reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    COLON           reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)
    )               reduce using rule 214 (class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET .)


state 246

    (217) class_internal_definition_list -> class_internal_definition_list class_internal_definition .

    RIGHT_CURLY_BRACKET reduce using rule 217 (class_internal_definition_list -> class_internal_definition_list class_internal_definition .)
    PRIVATE         reduce using rule 217 (class_internal_definition_list -> class_internal_definition_list class_internal_definition .)
    PUBLIC          reduce using rule 217 (class_internal_definition_list -> class_internal_definition_list class_internal_definition .)
    PROTECTED       reduce using rule 217 (class_internal_definition_list -> class_internal_definition_list class_internal_definition .)


state 247

    (218) class_internal_definition -> access_specifier LEFT_CURLY_BRACKET . class_member_list RIGHT_CURLY_BRACKET SEMICOLON
    (219) class_member_list -> . class_member
    (220) class_member_list -> . class_member_list class_member
    (221) class_member -> . function_definition
    (222) class_member -> . declaration
    (200) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (201) function_definition -> . declaration_specifiers declarator compound_statement
    (202) function_definition -> . declarator declaration_list compound_statement
    (203) function_definition -> . declarator compound_statement
    (80) declaration -> . declaration_specifiers SEMICOLON
    (81) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (123) declarator -> . pointer direct_declarator
    (124) declarator -> . direct_declarator
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . AUTO
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (132) pointer -> . MULTIPLY
    (133) pointer -> . MULTIPLY type_qualifier_list
    (134) pointer -> . MULTIPLY pointer
    (135) pointer -> . MULTIPLY type_qualifier_list pointer
    (125) direct_declarator -> . IDENTIFIER
    (126) direct_declarator -> . LEFT_BRACKET declarator RIGHT_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (128) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (129) direct_declarator -> . direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (130) direct_declarator -> . direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET
    (131) direct_declarator -> . direct_declarator LEFT_BRACKET RIGHT_BRACKET
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list

    TYPEDEF         shift and go to state 13
    AUTO            shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    MULTIPLY        shift and go to state 29
    IDENTIFIER      shift and go to state 30
    LEFT_BRACKET    shift and go to state 31
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34

    class_member_list              shift and go to state 311
    class_member                   shift and go to state 312
    function_definition            shift and go to state 313
    declaration                    shift and go to state 314
    declaration_specifiers         shift and go to state 6
    declarator                     shift and go to state 7
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    class_definition_head          shift and go to state 33

state 248

    (206) inheritance_specifier_list -> inheritance_specifier_list COMMA . inheritance_specifier
    (204) inheritance_specifier -> . access_specifier IDENTIFIER
    (207) access_specifier -> . PRIVATE
    (208) access_specifier -> . PUBLIC
    (209) access_specifier -> . PROTECTED

    PRIVATE         shift and go to state 151
    PUBLIC          shift and go to state 152
    PROTECTED       shift and go to state 153

    inheritance_specifier          shift and go to state 315
    access_specifier               shift and go to state 156

state 249

    (204) inheritance_specifier -> access_specifier IDENTIFIER .

    COMMA           reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    LEFT_CURLY_BRACKET reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    TYPEDEF         reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    AUTO            reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    VOID            reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    CHAR            reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    SHORT           reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    INT             reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    LONG            reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    FLOAT           reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    DOUBLE          reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    SIGNED          reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    UNSIGNED        reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    BOOL            reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    TYPE_NAME       reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    CONST           reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    STRUCT          reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    CLASS           reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    SEMICOLON       reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    MULTIPLY        reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    IDENTIFIER      reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    LEFT_THIRD_BRACKET reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    COLON           reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)
    )               reduce using rule 204 (inheritance_specifier -> access_specifier IDENTIFIER .)


state 250

    (213) class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .
    (206) inheritance_specifier_list -> inheritance_specifier_list . COMMA inheritance_specifier

  ! shift/reduce conflict for COMMA resolved as shift
    LEFT_CURLY_BRACKET reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    TYPEDEF         reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    AUTO            reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    VOID            reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    CHAR            reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    SHORT           reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    INT             reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    LONG            reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    FLOAT           reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    DOUBLE          reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    SIGNED          reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    UNSIGNED        reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    BOOL            reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    TYPE_NAME       reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    CONST           reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    STRUCT          reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    CLASS           reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    SEMICOLON       reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    MULTIPLY        reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    IDENTIFIER      reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    LEFT_BRACKET    reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    LEFT_THIRD_BRACKET reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    RIGHT_BRACKET   reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    COLON           reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    )               reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .)
    COMMA           shift and go to state 248

  ! COMMA           [ reduce using rule 213 (class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list .) ]


state 251

    (161) initializer -> LEFT_CURLY_BRACKET initializer_list . RIGHT_CURLY_BRACKET
    (162) initializer -> LEFT_CURLY_BRACKET initializer_list . COMMA RIGHT_CURLY_BRACKET
    (164) initializer_list -> initializer_list . COMMA initializer

    RIGHT_CURLY_BRACKET shift and go to state 316
    COMMA           shift and go to state 317


state 252

    (163) initializer_list -> initializer .

    RIGHT_CURLY_BRACKET reduce using rule 163 (initializer_list -> initializer .)
    COMMA           reduce using rule 163 (initializer_list -> initializer .)


state 253

    (171) labeled_statement -> IDENTIFIER COLON statement .

    RIGHT_CURLY_BRACKET reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    IDENTIFIER      reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    LEFT_CURLY_BRACKET reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    SEMICOLON       reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    TYPEDEF         reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    AUTO            reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    VOID            reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    CHAR            reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    SHORT           reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    INT             reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    LONG            reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    FLOAT           reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    DOUBLE          reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    SIGNED          reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    UNSIGNED        reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    BOOL            reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    TYPE_NAME       reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    CONST           reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    STRUCT          reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    CLASS           reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    INC_OP          reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    DEC_OP          reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    SIZEOF          reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    BITWISE_AND     reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    MULTIPLY        reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    PLUS            reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    MINUS           reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    BITWISE_NOT     reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    LOGICAL_NOT     reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    FLOAT_CONSTANT  reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    HEX_CONSTANT    reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    OCT_CONSTANT    reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    INT_CONSTANT    reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    CHAR_CONSTANT   reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING_LITERAL  reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    LEFT_BRACKET    reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)
    (               reduce using rule 171 (labeled_statement -> IDENTIFIER COLON statement .)


state 254

    (172) labeled_statement -> CASE constant_expression COLON . statement
    (165) statement -> . labeled_statement
    (166) statement -> . compound_statement
    (167) statement -> . expression_statement
    (168) statement -> . selection_statement
    (169) statement -> . iteration_statement
    (170) statement -> . jump_statement
    (171) labeled_statement -> . IDENTIFIER COLON statement
    (172) labeled_statement -> . CASE constant_expression COLON statement
    (173) labeled_statement -> . DEFAULT COLON statement
    (174) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (175) compound_statement -> . LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET
    (182) expression_statement -> . SEMICOLON
    (183) expression_statement -> . expression SEMICOLON
    (184) selection_statement -> . IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement
    (185) selection_statement -> . IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement
    (186) selection_statement -> . SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement
    (187) iteration_statement -> . WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement
    (188) iteration_statement -> . DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON
    (189) iteration_statement -> . FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement
    (190) iteration_statement -> . FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement
    (191) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (192) jump_statement -> . CONTINUE SEMICOLON
    (193) jump_statement -> . BREAK SEMICOLON
    (194) jump_statement -> . RETURN SEMICOLON
    (195) jump_statement -> . RETURN expression SEMICOLON
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 79
    CASE            shift and go to state 80
    DEFAULT         shift and go to state 81
    LEFT_CURLY_BRACKET shift and go to state 43
    SEMICOLON       shift and go to state 72
    IF              shift and go to state 83
    SWITCH          shift and go to state 85
    WHILE           shift and go to state 86
    DO              shift and go to state 87
    FOR             shift and go to state 88
    GOTO            shift and go to state 89
    CONTINUE        shift and go to state 90
    BREAK           shift and go to state 91
    RETURN          shift and go to state 92
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    statement                      shift and go to state 318
    labeled_statement              shift and go to state 73
    compound_statement             shift and go to state 74
    expression_statement           shift and go to state 75
    selection_statement            shift and go to state 76
    iteration_statement            shift and go to state 77
    jump_statement                 shift and go to state 78
    expression                     shift and go to state 82
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 94
    unary_expression               shift and go to state 95
    logical_or_expression          shift and go to state 96
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 255

    (173) labeled_statement -> DEFAULT COLON statement .

    RIGHT_CURLY_BRACKET reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    IDENTIFIER      reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    LEFT_CURLY_BRACKET reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    SEMICOLON       reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    TYPEDEF         reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    AUTO            reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    VOID            reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    CHAR            reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    SHORT           reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    INT             reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    LONG            reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT           reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    DOUBLE          reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    SIGNED          reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    UNSIGNED        reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    BOOL            reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    TYPE_NAME       reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    CONST           reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    STRUCT          reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    CLASS           reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    INC_OP          reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    DEC_OP          reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    BITWISE_AND     reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    MULTIPLY        reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    PLUS            reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    MINUS           reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    BITWISE_NOT     reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    LOGICAL_NOT     reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT_CONSTANT  reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    HEX_CONSTANT    reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    OCT_CONSTANT    reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    INT_CONSTANT    reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    CHAR_CONSTANT   reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    STRING_LITERAL  reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    LEFT_BRACKET    reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)
    (               reduce using rule 173 (labeled_statement -> DEFAULT COLON statement .)


state 256

    (78) expression -> expression COMMA assignment_expression .

    SEMICOLON       reduce using rule 78 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 78 (expression -> expression COMMA assignment_expression .)
    RIGHT_BRACKET   reduce using rule 78 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 78 (expression -> expression COMMA assignment_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 78 (expression -> expression COMMA assignment_expression .)


state 257

    (184) selection_statement -> IF LEFT_BRACKET expression . RIGHT_BRACKET compound_statement
    (185) selection_statement -> IF LEFT_BRACKET expression . RIGHT_BRACKET compound_statement ELSE compound_statement
    (78) expression -> expression . COMMA assignment_expression

    RIGHT_BRACKET   shift and go to state 319
    COMMA           shift and go to state 169


state 258

    (9) primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .

    LEFT_THIRD_BRACKET reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    DOT             reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    PTR_OP          reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    INC_OP          reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    DEC_OP          reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    EQ              reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    MUL_ASSIGN      reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    DIV_ASSIGN      reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    MOD_ASSIGN      reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    ADD_ASSIGN      reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    SUB_ASSIGN      reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    LEFT_ASSIGN     reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    RIGHT_ASSIGN    reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    AND_ASSIGN      reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    XOR_ASSIGN      reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    OR_ASSIGN       reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    MULTIPLY        reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    DIVIDE          reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    MOD             reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    PLUS            reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    MINUS           reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    LEFT_OP         reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    RIGHT_OP        reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    LESS            reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    GREATER         reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    LE_OP           reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    GE_OP           reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    EQ_OP           reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    NE_OP           reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    BITWISE_AND     reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    BITWISE_XOR     reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    BITWISE_OR      reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    LOGICAL_AND_OP  reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    QUESTION        reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    LOGICAL_OR_OP   reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    COMMA           reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    RIGHT_THIRD_BRACKET reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    COLON           reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 9 (primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET .)


state 259

    (186) selection_statement -> SWITCH LEFT_BRACKET expression . RIGHT_BRACKET compound_statement
    (78) expression -> expression . COMMA assignment_expression

    RIGHT_BRACKET   shift and go to state 320
    COMMA           shift and go to state 169


state 260

    (187) iteration_statement -> WHILE LEFT_BRACKET expression . RIGHT_BRACKET compound_statement
    (78) expression -> expression . COMMA assignment_expression

    RIGHT_BRACKET   shift and go to state 321
    COMMA           shift and go to state 169


state 261

    (188) iteration_statement -> DO compound_statement WHILE . LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON

    LEFT_BRACKET    shift and go to state 322


state 262

    (189) iteration_statement -> FOR LEFT_BRACKET expression_statement . expression_statement RIGHT_BRACKET compound_statement
    (190) iteration_statement -> FOR LEFT_BRACKET expression_statement . expression_statement expression RIGHT_BRACKET compound_statement
    (182) expression_statement -> . SEMICOLON
    (183) expression_statement -> . expression SEMICOLON
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    SEMICOLON       shift and go to state 72
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    expression_statement           shift and go to state 323
    expression                     shift and go to state 82
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 94
    unary_expression               shift and go to state 95
    logical_or_expression          shift and go to state 96
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 263

    (191) jump_statement -> GOTO IDENTIFIER SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IF              reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DO              reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TYPEDEF         reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    INT             reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIGNED          reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    UNSIGNED        reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BOOL            reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TYPE_NAME       reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRUCT          reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    INC_OP          reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DEC_OP          reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIZEOF          reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BITWISE_AND     reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MULTIPLY        reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    PLUS            reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BITWISE_NOT     reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LOGICAL_NOT     reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FLOAT_CONSTANT  reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    HEX_CONSTANT    reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    OCT_CONSTANT    reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    INT_CONSTANT    reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CHAR_CONSTANT   reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING_LITERAL  reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LEFT_BRACKET    reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    (               reduce using rule 191 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)


state 264

    (195) jump_statement -> RETURN expression SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    GOTO            reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    TYPEDEF         reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    AUTO            reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    VOID            reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    SHORT           reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    LONG            reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    DOUBLE          reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    SIGNED          reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    UNSIGNED        reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    BOOL            reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    TYPE_NAME       reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    CONST           reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    STRUCT          reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    CLASS           reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    INC_OP          reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    DEC_OP          reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    SIZEOF          reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    BITWISE_AND     reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    MULTIPLY        reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    PLUS            reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    BITWISE_NOT     reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    LOGICAL_NOT     reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    FLOAT_CONSTANT  reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    HEX_CONSTANT    reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    OCT_CONSTANT    reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    INT_CONSTANT    reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    CHAR_CONSTANT   reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    LEFT_BRACKET    reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)
    (               reduce using rule 195 (jump_statement -> RETURN expression SEMICOLON .)


state 265

    (65) assignment_expression -> unary_expression assignment_operator assignment_expression .

    SEMICOLON       reduce using rule 65 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 65 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RIGHT_BRACKET   reduce using rule 65 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 65 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 65 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 65 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 266

    (63) conditional_expression -> logical_or_expression QUESTION expression . COLON conditional_expression
    (78) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 324
    COMMA           shift and go to state 169


state 267

    (61) logical_or_expression -> logical_or_expression LOGICAL_OR_OP logical_and_expression .
    (59) logical_and_expression -> logical_and_expression . LOGICAL_AND_OP inclusive_or_expression

    QUESTION        reduce using rule 61 (logical_or_expression -> logical_or_expression LOGICAL_OR_OP logical_and_expression .)
    LOGICAL_OR_OP   reduce using rule 61 (logical_or_expression -> logical_or_expression LOGICAL_OR_OP logical_and_expression .)
    SEMICOLON       reduce using rule 61 (logical_or_expression -> logical_or_expression LOGICAL_OR_OP logical_and_expression .)
    COMMA           reduce using rule 61 (logical_or_expression -> logical_or_expression LOGICAL_OR_OP logical_and_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 61 (logical_or_expression -> logical_or_expression LOGICAL_OR_OP logical_and_expression .)
    COLON           reduce using rule 61 (logical_or_expression -> logical_or_expression LOGICAL_OR_OP logical_and_expression .)
    RIGHT_BRACKET   reduce using rule 61 (logical_or_expression -> logical_or_expression LOGICAL_OR_OP logical_and_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 61 (logical_or_expression -> logical_or_expression LOGICAL_OR_OP logical_and_expression .)
    LOGICAL_AND_OP  shift and go to state 206


state 268

    (11) postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression . RIGHT_THIRD_BRACKET
    (78) expression -> expression . COMMA assignment_expression

    RIGHT_THIRD_BRACKET shift and go to state 325
    COMMA           shift and go to state 169


state 269

    (12) postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .

    LEFT_THIRD_BRACKET reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    DOT             reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    PTR_OP          reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    INC_OP          reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    DEC_OP          reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    EQ              reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    MUL_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    DIV_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    MOD_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    ADD_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    SUB_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    LEFT_ASSIGN     reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    RIGHT_ASSIGN    reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    AND_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    XOR_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    OR_ASSIGN       reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    MULTIPLY        reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    DIVIDE          reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    MOD             reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    PLUS            reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    MINUS           reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    LEFT_OP         reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    RIGHT_OP        reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    LESS            reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    GREATER         reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    LE_OP           reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    GE_OP           reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    EQ_OP           reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    NE_OP           reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    BITWISE_AND     reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    BITWISE_XOR     reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    BITWISE_OR      reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    LOGICAL_AND_OP  reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    QUESTION        reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    LOGICAL_OR_OP   reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    COMMA           reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    RIGHT_THIRD_BRACKET reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    COLON           reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 12 (postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET .)


state 270

    (13) postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list . RIGHT_BRACKET
    (19) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RIGHT_BRACKET   shift and go to state 326
    COMMA           shift and go to state 327


state 271

    (18) argument_expression_list -> assignment_expression .

    RIGHT_BRACKET   reduce using rule 18 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 18 (argument_expression_list -> assignment_expression .)


state 272

    (14) postfix_expression -> postfix_expression DOT IDENTIFIER .

    LEFT_THIRD_BRACKET reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DOT             reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PTR_OP          reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    INC_OP          reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DEC_OP          reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQ              reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AND_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR_ASSIGN       reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MULTIPLY        reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIVIDE          reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MOD             reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PLUS            reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MINUS           reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_OP         reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_OP        reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LESS            reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GREATER         reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LE_OP           reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GE_OP           reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQ_OP           reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    NE_OP           reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITWISE_AND     reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITWISE_XOR     reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITWISE_OR      reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LOGICAL_AND_OP  reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    QUESTION        reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LOGICAL_OR_OP   reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COMMA           reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_THIRD_BRACKET reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COLON           reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_CURLY_BRACKET reduce using rule 14 (postfix_expression -> postfix_expression DOT IDENTIFIER .)


state 273

    (15) postfix_expression -> postfix_expression PTR_OP IDENTIFIER .

    LEFT_THIRD_BRACKET reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DOT             reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PTR_OP          reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    INC_OP          reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DEC_OP          reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EQ              reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_ASSIGN       reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MULTIPLY        reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DIVIDE          reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MOD             reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PLUS            reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MINUS           reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_OP         reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_OP        reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LESS            reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    GREATER         reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LE_OP           reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    GE_OP           reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EQ_OP           reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    NE_OP           reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    BITWISE_AND     reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    BITWISE_XOR     reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    BITWISE_OR      reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LOGICAL_AND_OP  reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    QUESTION        reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LOGICAL_OR_OP   reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SEMICOLON       reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    COMMA           reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_THIRD_BRACKET reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    COLON           reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_CURLY_BRACKET reduce using rule 15 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)


state 274

    (25) unary_expression -> SIZEOF LEFT_BRACKET type_name . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 328


state 275

    (59) logical_and_expression -> logical_and_expression LOGICAL_AND_OP inclusive_or_expression .
    (57) inclusive_or_expression -> inclusive_or_expression . BITWISE_OR exclusive_or_expression

    LOGICAL_AND_OP  reduce using rule 59 (logical_and_expression -> logical_and_expression LOGICAL_AND_OP inclusive_or_expression .)
    QUESTION        reduce using rule 59 (logical_and_expression -> logical_and_expression LOGICAL_AND_OP inclusive_or_expression .)
    LOGICAL_OR_OP   reduce using rule 59 (logical_and_expression -> logical_and_expression LOGICAL_AND_OP inclusive_or_expression .)
    SEMICOLON       reduce using rule 59 (logical_and_expression -> logical_and_expression LOGICAL_AND_OP inclusive_or_expression .)
    COMMA           reduce using rule 59 (logical_and_expression -> logical_and_expression LOGICAL_AND_OP inclusive_or_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 59 (logical_and_expression -> logical_and_expression LOGICAL_AND_OP inclusive_or_expression .)
    COLON           reduce using rule 59 (logical_and_expression -> logical_and_expression LOGICAL_AND_OP inclusive_or_expression .)
    RIGHT_BRACKET   reduce using rule 59 (logical_and_expression -> logical_and_expression LOGICAL_AND_OP inclusive_or_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 59 (logical_and_expression -> logical_and_expression LOGICAL_AND_OP inclusive_or_expression .)
    BITWISE_OR      shift and go to state 207


state 276

    (57) inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .
    (55) exclusive_or_expression -> exclusive_or_expression . BITWISE_XOR and_expression

    BITWISE_OR      reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    LOGICAL_AND_OP  reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    QUESTION        reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    LOGICAL_OR_OP   reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    SEMICOLON       reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    COMMA           reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    COLON           reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    RIGHT_BRACKET   reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 57 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    BITWISE_XOR     shift and go to state 208


state 277

    (55) exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .
    (53) and_expression -> and_expression . BITWISE_AND equality_expression

    BITWISE_XOR     reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    BITWISE_OR      reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    LOGICAL_AND_OP  reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    QUESTION        reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    LOGICAL_OR_OP   reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    SEMICOLON       reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    COMMA           reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    COLON           reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    RIGHT_BRACKET   reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 55 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    BITWISE_AND     shift and go to state 209


state 278

    (53) and_expression -> and_expression BITWISE_AND equality_expression .
    (50) equality_expression -> equality_expression . EQ_OP relational_expression
    (51) equality_expression -> equality_expression . NE_OP relational_expression

    BITWISE_AND     reduce using rule 53 (and_expression -> and_expression BITWISE_AND equality_expression .)
    BITWISE_XOR     reduce using rule 53 (and_expression -> and_expression BITWISE_AND equality_expression .)
    BITWISE_OR      reduce using rule 53 (and_expression -> and_expression BITWISE_AND equality_expression .)
    LOGICAL_AND_OP  reduce using rule 53 (and_expression -> and_expression BITWISE_AND equality_expression .)
    QUESTION        reduce using rule 53 (and_expression -> and_expression BITWISE_AND equality_expression .)
    LOGICAL_OR_OP   reduce using rule 53 (and_expression -> and_expression BITWISE_AND equality_expression .)
    SEMICOLON       reduce using rule 53 (and_expression -> and_expression BITWISE_AND equality_expression .)
    COMMA           reduce using rule 53 (and_expression -> and_expression BITWISE_AND equality_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 53 (and_expression -> and_expression BITWISE_AND equality_expression .)
    COLON           reduce using rule 53 (and_expression -> and_expression BITWISE_AND equality_expression .)
    RIGHT_BRACKET   reduce using rule 53 (and_expression -> and_expression BITWISE_AND equality_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 53 (and_expression -> and_expression BITWISE_AND equality_expression .)
    EQ_OP           shift and go to state 210
    NE_OP           shift and go to state 211


state 279

    (50) equality_expression -> equality_expression EQ_OP relational_expression .
    (45) relational_expression -> relational_expression . LESS shift_expression
    (46) relational_expression -> relational_expression . GREATER shift_expression
    (47) relational_expression -> relational_expression . LE_OP shift_expression
    (48) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 50 (equality_expression -> equality_expression EQ_OP relational_expression .)
    NE_OP           reduce using rule 50 (equality_expression -> equality_expression EQ_OP relational_expression .)
    BITWISE_AND     reduce using rule 50 (equality_expression -> equality_expression EQ_OP relational_expression .)
    BITWISE_XOR     reduce using rule 50 (equality_expression -> equality_expression EQ_OP relational_expression .)
    BITWISE_OR      reduce using rule 50 (equality_expression -> equality_expression EQ_OP relational_expression .)
    LOGICAL_AND_OP  reduce using rule 50 (equality_expression -> equality_expression EQ_OP relational_expression .)
    QUESTION        reduce using rule 50 (equality_expression -> equality_expression EQ_OP relational_expression .)
    LOGICAL_OR_OP   reduce using rule 50 (equality_expression -> equality_expression EQ_OP relational_expression .)
    SEMICOLON       reduce using rule 50 (equality_expression -> equality_expression EQ_OP relational_expression .)
    COMMA           reduce using rule 50 (equality_expression -> equality_expression EQ_OP relational_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 50 (equality_expression -> equality_expression EQ_OP relational_expression .)
    COLON           reduce using rule 50 (equality_expression -> equality_expression EQ_OP relational_expression .)
    RIGHT_BRACKET   reduce using rule 50 (equality_expression -> equality_expression EQ_OP relational_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 50 (equality_expression -> equality_expression EQ_OP relational_expression .)
    LESS            shift and go to state 212
    GREATER         shift and go to state 213
    LE_OP           shift and go to state 214
    GE_OP           shift and go to state 215


state 280

    (51) equality_expression -> equality_expression NE_OP relational_expression .
    (45) relational_expression -> relational_expression . LESS shift_expression
    (46) relational_expression -> relational_expression . GREATER shift_expression
    (47) relational_expression -> relational_expression . LE_OP shift_expression
    (48) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 51 (equality_expression -> equality_expression NE_OP relational_expression .)
    NE_OP           reduce using rule 51 (equality_expression -> equality_expression NE_OP relational_expression .)
    BITWISE_AND     reduce using rule 51 (equality_expression -> equality_expression NE_OP relational_expression .)
    BITWISE_XOR     reduce using rule 51 (equality_expression -> equality_expression NE_OP relational_expression .)
    BITWISE_OR      reduce using rule 51 (equality_expression -> equality_expression NE_OP relational_expression .)
    LOGICAL_AND_OP  reduce using rule 51 (equality_expression -> equality_expression NE_OP relational_expression .)
    QUESTION        reduce using rule 51 (equality_expression -> equality_expression NE_OP relational_expression .)
    LOGICAL_OR_OP   reduce using rule 51 (equality_expression -> equality_expression NE_OP relational_expression .)
    SEMICOLON       reduce using rule 51 (equality_expression -> equality_expression NE_OP relational_expression .)
    COMMA           reduce using rule 51 (equality_expression -> equality_expression NE_OP relational_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 51 (equality_expression -> equality_expression NE_OP relational_expression .)
    COLON           reduce using rule 51 (equality_expression -> equality_expression NE_OP relational_expression .)
    RIGHT_BRACKET   reduce using rule 51 (equality_expression -> equality_expression NE_OP relational_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 51 (equality_expression -> equality_expression NE_OP relational_expression .)
    LESS            shift and go to state 212
    GREATER         shift and go to state 213
    LE_OP           shift and go to state 214
    GE_OP           shift and go to state 215


state 281

    (45) relational_expression -> relational_expression LESS shift_expression .
    (42) shift_expression -> shift_expression . LEFT_OP additive_expression
    (43) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LESS            reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    GREATER         reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    LE_OP           reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    GE_OP           reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    EQ_OP           reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    NE_OP           reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    BITWISE_AND     reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    BITWISE_XOR     reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    BITWISE_OR      reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    LOGICAL_AND_OP  reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    QUESTION        reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    LOGICAL_OR_OP   reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    SEMICOLON       reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    COMMA           reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    COLON           reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    RIGHT_BRACKET   reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 45 (relational_expression -> relational_expression LESS shift_expression .)
    LEFT_OP         shift and go to state 216
    RIGHT_OP        shift and go to state 217


state 282

    (46) relational_expression -> relational_expression GREATER shift_expression .
    (42) shift_expression -> shift_expression . LEFT_OP additive_expression
    (43) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LESS            reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    GREATER         reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    LE_OP           reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    GE_OP           reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    EQ_OP           reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    NE_OP           reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    BITWISE_AND     reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    BITWISE_XOR     reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    BITWISE_OR      reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    LOGICAL_AND_OP  reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    QUESTION        reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    LOGICAL_OR_OP   reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    SEMICOLON       reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    COMMA           reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    COLON           reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    RIGHT_BRACKET   reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 46 (relational_expression -> relational_expression GREATER shift_expression .)
    LEFT_OP         shift and go to state 216
    RIGHT_OP        shift and go to state 217


state 283

    (47) relational_expression -> relational_expression LE_OP shift_expression .
    (42) shift_expression -> shift_expression . LEFT_OP additive_expression
    (43) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LESS            reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    GREATER         reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    LE_OP           reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    GE_OP           reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    EQ_OP           reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    NE_OP           reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    BITWISE_AND     reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    BITWISE_XOR     reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    BITWISE_OR      reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    LOGICAL_AND_OP  reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    QUESTION        reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    LOGICAL_OR_OP   reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    SEMICOLON       reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    COMMA           reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    COLON           reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    RIGHT_BRACKET   reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 47 (relational_expression -> relational_expression LE_OP shift_expression .)
    LEFT_OP         shift and go to state 216
    RIGHT_OP        shift and go to state 217


state 284

    (48) relational_expression -> relational_expression GE_OP shift_expression .
    (42) shift_expression -> shift_expression . LEFT_OP additive_expression
    (43) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LESS            reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    GREATER         reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    LE_OP           reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    GE_OP           reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    EQ_OP           reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    NE_OP           reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    BITWISE_AND     reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    BITWISE_XOR     reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    BITWISE_OR      reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    LOGICAL_AND_OP  reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    QUESTION        reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    LOGICAL_OR_OP   reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    SEMICOLON       reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    COMMA           reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    COLON           reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    RIGHT_BRACKET   reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 48 (relational_expression -> relational_expression GE_OP shift_expression .)
    LEFT_OP         shift and go to state 216
    RIGHT_OP        shift and go to state 217


state 285

    (42) shift_expression -> shift_expression LEFT_OP additive_expression .
    (39) additive_expression -> additive_expression . PLUS multiplicative_expression
    (40) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RIGHT_OP        reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LESS            reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GREATER         reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LE_OP           reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GE_OP           reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    EQ_OP           reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    NE_OP           reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    BITWISE_AND     reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    BITWISE_XOR     reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    BITWISE_OR      reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LOGICAL_AND_OP  reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    QUESTION        reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LOGICAL_OR_OP   reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    SEMICOLON       reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    COMMA           reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    COLON           reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RIGHT_BRACKET   reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 42 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    PLUS            shift and go to state 218
    MINUS           shift and go to state 219


state 286

    (43) shift_expression -> shift_expression RIGHT_OP additive_expression .
    (39) additive_expression -> additive_expression . PLUS multiplicative_expression
    (40) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RIGHT_OP        reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LESS            reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GREATER         reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LE_OP           reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GE_OP           reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    EQ_OP           reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    NE_OP           reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    BITWISE_AND     reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    BITWISE_XOR     reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    BITWISE_OR      reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LOGICAL_AND_OP  reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    QUESTION        reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LOGICAL_OR_OP   reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    SEMICOLON       reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    COMMA           reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    COLON           reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RIGHT_BRACKET   reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 43 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    PLUS            shift and go to state 218
    MINUS           shift and go to state 219


state 287

    (39) additive_expression -> additive_expression PLUS multiplicative_expression .
    (35) multiplicative_expression -> multiplicative_expression . MULTIPLY cast_expression
    (36) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (37) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LEFT_OP         reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_OP        reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS            reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER         reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE_OP           reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE_OP           reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ_OP           reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE_OP           reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BITWISE_AND     reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BITWISE_XOR     reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BITWISE_OR      reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOGICAL_AND_OP  reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    QUESTION        reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOGICAL_OR_OP   reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_BRACKET   reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 39 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MULTIPLY        shift and go to state 220
    DIVIDE          shift and go to state 221
    MOD             shift and go to state 222


state 288

    (40) additive_expression -> additive_expression MINUS multiplicative_expression .
    (35) multiplicative_expression -> multiplicative_expression . MULTIPLY cast_expression
    (36) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (37) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LEFT_OP         reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_OP        reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS            reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER         reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE_OP           reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE_OP           reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ_OP           reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE_OP           reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    BITWISE_AND     reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    BITWISE_XOR     reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    BITWISE_OR      reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOGICAL_AND_OP  reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    QUESTION        reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOGICAL_OR_OP   reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_BRACKET   reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 40 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MULTIPLY        shift and go to state 220
    DIVIDE          shift and go to state 221
    MOD             shift and go to state 222


state 289

    (35) multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .

    MULTIPLY        reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    DIVIDE          reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    MOD             reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    PLUS            reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    MINUS           reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LEFT_OP         reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    RIGHT_OP        reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LESS            reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    GREATER         reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LE_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    GE_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    EQ_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    NE_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    BITWISE_AND     reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    BITWISE_XOR     reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    BITWISE_OR      reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LOGICAL_AND_OP  reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    QUESTION        reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LOGICAL_OR_OP   reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    SEMICOLON       reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    COMMA           reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    COLON           reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    RIGHT_BRACKET   reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 35 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)


state 290

    (36) multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .

    MULTIPLY        reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DIVIDE          reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MOD             reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    PLUS            reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MINUS           reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LEFT_OP         reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RIGHT_OP        reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LESS            reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GREATER         reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LE_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GE_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EQ_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    NE_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    BITWISE_AND     reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    BITWISE_XOR     reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    BITWISE_OR      reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LOGICAL_AND_OP  reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    QUESTION        reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LOGICAL_OR_OP   reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SEMICOLON       reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COMMA           reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COLON           reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RIGHT_BRACKET   reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 36 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)


state 291

    (37) multiplicative_expression -> multiplicative_expression MOD cast_expression .

    MULTIPLY        reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    DIVIDE          reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MOD             reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    PLUS            reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MINUS           reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LEFT_OP         reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RIGHT_OP        reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LESS            reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GREATER         reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LE_OP           reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GE_OP           reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    EQ_OP           reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    NE_OP           reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    BITWISE_AND     reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    BITWISE_XOR     reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    BITWISE_OR      reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LOGICAL_AND_OP  reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    QUESTION        reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LOGICAL_OR_OP   reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    SEMICOLON       reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COMMA           reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COLON           reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RIGHT_BRACKET   reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 37 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)


state 292

    (33) cast_expression -> ( type_name ) . cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    cast_expression                shift and go to state 329
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 293

    (147) type_name -> specifier_qualifier_list abstract_declarator .

    )               reduce using rule 147 (type_name -> specifier_qualifier_list abstract_declarator .)
    RIGHT_BRACKET   reduce using rule 147 (type_name -> specifier_qualifier_list abstract_declarator .)


state 294

    (148) abstract_declarator -> pointer .
    (150) abstract_declarator -> pointer . direct_abstract_declarator
    (151) direct_abstract_declarator -> . LEFT_BRACKET abstract_declarator RIGHT_BRACKET
    (152) direct_abstract_declarator -> . LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (153) direct_abstract_declarator -> . LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (154) direct_abstract_declarator -> . direct_abstract_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (155) direct_abstract_declarator -> . direct_abstract_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (156) direct_abstract_declarator -> . LEFT_BRACKET RIGHT_BRACKET
    (157) direct_abstract_declarator -> . LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (158) direct_abstract_declarator -> . direct_abstract_declarator LEFT_BRACKET RIGHT_BRACKET
    (159) direct_abstract_declarator -> . direct_abstract_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET

    )               reduce using rule 148 (abstract_declarator -> pointer .)
    RIGHT_BRACKET   reduce using rule 148 (abstract_declarator -> pointer .)
    LEFT_BRACKET    shift and go to state 295
    LEFT_THIRD_BRACKET shift and go to state 235

    direct_abstract_declarator     shift and go to state 298

state 295

    (151) direct_abstract_declarator -> LEFT_BRACKET . abstract_declarator RIGHT_BRACKET
    (156) direct_abstract_declarator -> LEFT_BRACKET . RIGHT_BRACKET
    (157) direct_abstract_declarator -> LEFT_BRACKET . parameter_type_list RIGHT_BRACKET
    (148) abstract_declarator -> . pointer
    (149) abstract_declarator -> . direct_abstract_declarator
    (150) abstract_declarator -> . pointer direct_abstract_declarator
    (138) parameter_type_list -> . parameter_list
    (132) pointer -> . MULTIPLY
    (133) pointer -> . MULTIPLY type_qualifier_list
    (134) pointer -> . MULTIPLY pointer
    (135) pointer -> . MULTIPLY type_qualifier_list pointer
    (151) direct_abstract_declarator -> . LEFT_BRACKET abstract_declarator RIGHT_BRACKET
    (152) direct_abstract_declarator -> . LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (153) direct_abstract_declarator -> . LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (154) direct_abstract_declarator -> . direct_abstract_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (155) direct_abstract_declarator -> . direct_abstract_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (156) direct_abstract_declarator -> . LEFT_BRACKET RIGHT_BRACKET
    (157) direct_abstract_declarator -> . LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (158) direct_abstract_declarator -> . direct_abstract_declarator LEFT_BRACKET RIGHT_BRACKET
    (159) direct_abstract_declarator -> . direct_abstract_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (139) parameter_list -> . parameter_declaration
    (140) parameter_list -> . parameter_list COMMA parameter_declaration
    (141) parameter_declaration -> . declaration_specifiers declarator
    (142) parameter_declaration -> . declaration_specifiers abstract_declarator
    (143) parameter_declaration -> . declaration_specifiers
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . AUTO
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list

    RIGHT_BRACKET   shift and go to state 301
    MULTIPLY        shift and go to state 29
    LEFT_BRACKET    shift and go to state 295
    LEFT_THIRD_BRACKET shift and go to state 235
    TYPEDEF         shift and go to state 13
    AUTO            shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34

    abstract_declarator            shift and go to state 302
    parameter_type_list            shift and go to state 303
    pointer                        shift and go to state 294
    direct_abstract_declarator     shift and go to state 233
    parameter_list                 shift and go to state 135
    parameter_declaration          shift and go to state 137
    declaration_specifiers         shift and go to state 138
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    class_definition_head          shift and go to state 33

state 296

    (145) identifier_list -> identifier_list COMMA IDENTIFIER .

    RIGHT_BRACKET   reduce using rule 145 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 145 (identifier_list -> identifier_list COMMA IDENTIFIER .)


state 297

    (140) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 140 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RIGHT_BRACKET   reduce using rule 140 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 298

    (150) abstract_declarator -> pointer direct_abstract_declarator .
    (154) direct_abstract_declarator -> direct_abstract_declarator . LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (155) direct_abstract_declarator -> direct_abstract_declarator . LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (158) direct_abstract_declarator -> direct_abstract_declarator . LEFT_BRACKET RIGHT_BRACKET
    (159) direct_abstract_declarator -> direct_abstract_declarator . LEFT_BRACKET parameter_type_list RIGHT_BRACKET

    COMMA           reduce using rule 150 (abstract_declarator -> pointer direct_abstract_declarator .)
    RIGHT_BRACKET   reduce using rule 150 (abstract_declarator -> pointer direct_abstract_declarator .)
    )               reduce using rule 150 (abstract_declarator -> pointer direct_abstract_declarator .)
    LEFT_THIRD_BRACKET shift and go to state 299
    LEFT_BRACKET    shift and go to state 300


state 299

    (154) direct_abstract_declarator -> direct_abstract_declarator LEFT_THIRD_BRACKET . RIGHT_THIRD_BRACKET
    (155) direct_abstract_declarator -> direct_abstract_declarator LEFT_THIRD_BRACKET . constant_expression RIGHT_THIRD_BRACKET
    (79) constant_expression -> . conditional_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    RIGHT_THIRD_BRACKET shift and go to state 330
    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    constant_expression            shift and go to state 331
    conditional_expression         shift and go to state 129
    logical_or_expression          shift and go to state 96
    logical_and_expression         shift and go to state 103
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124
    cast_expression                shift and go to state 101
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 300

    (158) direct_abstract_declarator -> direct_abstract_declarator LEFT_BRACKET . RIGHT_BRACKET
    (159) direct_abstract_declarator -> direct_abstract_declarator LEFT_BRACKET . parameter_type_list RIGHT_BRACKET
    (138) parameter_type_list -> . parameter_list
    (139) parameter_list -> . parameter_declaration
    (140) parameter_list -> . parameter_list COMMA parameter_declaration
    (141) parameter_declaration -> . declaration_specifiers declarator
    (142) parameter_declaration -> . declaration_specifiers abstract_declarator
    (143) parameter_declaration -> . declaration_specifiers
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . AUTO
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list

    RIGHT_BRACKET   shift and go to state 332
    TYPEDEF         shift and go to state 13
    AUTO            shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34

    parameter_type_list            shift and go to state 333
    parameter_list                 shift and go to state 135
    parameter_declaration          shift and go to state 137
    declaration_specifiers         shift and go to state 138
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    class_definition_head          shift and go to state 33

state 301

    (156) direct_abstract_declarator -> LEFT_BRACKET RIGHT_BRACKET .

    LEFT_THIRD_BRACKET reduce using rule 156 (direct_abstract_declarator -> LEFT_BRACKET RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 156 (direct_abstract_declarator -> LEFT_BRACKET RIGHT_BRACKET .)
    COMMA           reduce using rule 156 (direct_abstract_declarator -> LEFT_BRACKET RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 156 (direct_abstract_declarator -> LEFT_BRACKET RIGHT_BRACKET .)
    )               reduce using rule 156 (direct_abstract_declarator -> LEFT_BRACKET RIGHT_BRACKET .)


state 302

    (151) direct_abstract_declarator -> LEFT_BRACKET abstract_declarator . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 334


state 303

    (157) direct_abstract_declarator -> LEFT_BRACKET parameter_type_list . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 335


state 304

    (152) direct_abstract_declarator -> LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .

    LEFT_THIRD_BRACKET reduce using rule 152 (direct_abstract_declarator -> LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    LEFT_BRACKET    reduce using rule 152 (direct_abstract_declarator -> LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    COMMA           reduce using rule 152 (direct_abstract_declarator -> LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    RIGHT_BRACKET   reduce using rule 152 (direct_abstract_declarator -> LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    )               reduce using rule 152 (direct_abstract_declarator -> LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)


state 305

    (153) direct_abstract_declarator -> LEFT_THIRD_BRACKET constant_expression . RIGHT_THIRD_BRACKET

    RIGHT_THIRD_BRACKET shift and go to state 336


state 306

    (107) struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .

    TYPEDEF         reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    AUTO            reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    VOID            reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    CHAR            reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    SHORT           reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    INT             reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    LONG            reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    FLOAT           reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    DOUBLE          reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    SIGNED          reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    UNSIGNED        reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    TYPE_NAME       reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    CONST           reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRUCT          reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    CLASS           reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    SEMICOLON       reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    MULTIPLY        reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    LEFT_BRACKET    reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    LEFT_THIRD_BRACKET reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    COMMA           reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    RIGHT_BRACKET   reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    COLON           reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    )               reduce using rule 107 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)


state 307

    (112) struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 112 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    VOID            reduce using rule 112 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    CHAR            reduce using rule 112 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    SHORT           reduce using rule 112 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    INT             reduce using rule 112 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    LONG            reduce using rule 112 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 112 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 112 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 112 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 112 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    BOOL            reduce using rule 112 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    TYPE_NAME       reduce using rule 112 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    CONST           reduce using rule 112 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 112 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    CLASS           reduce using rule 112 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)


state 308

    (118) struct_declarator_list -> struct_declarator_list COMMA . struct_declarator
    (119) struct_declarator -> . declarator
    (120) struct_declarator -> . COLON constant_expression
    (121) struct_declarator -> . declarator COLON constant_expression
    (123) declarator -> . pointer direct_declarator
    (124) declarator -> . direct_declarator
    (132) pointer -> . MULTIPLY
    (133) pointer -> . MULTIPLY type_qualifier_list
    (134) pointer -> . MULTIPLY pointer
    (135) pointer -> . MULTIPLY type_qualifier_list pointer
    (125) direct_declarator -> . IDENTIFIER
    (126) direct_declarator -> . LEFT_BRACKET declarator RIGHT_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (128) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (129) direct_declarator -> . direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (130) direct_declarator -> . direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET
    (131) direct_declarator -> . direct_declarator LEFT_BRACKET RIGHT_BRACKET

    COLON           shift and go to state 242
    MULTIPLY        shift and go to state 29
    IDENTIFIER      shift and go to state 30
    LEFT_BRACKET    shift and go to state 31

    struct_declarator              shift and go to state 337
    declarator                     shift and go to state 241
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12

state 309

    (121) struct_declarator -> declarator COLON . constant_expression
    (79) constant_expression -> . conditional_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    constant_expression            shift and go to state 338
    conditional_expression         shift and go to state 129
    logical_or_expression          shift and go to state 96
    logical_and_expression         shift and go to state 103
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124
    cast_expression                shift and go to state 101
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 310

    (120) struct_declarator -> COLON constant_expression .

    SEMICOLON       reduce using rule 120 (struct_declarator -> COLON constant_expression .)
    COMMA           reduce using rule 120 (struct_declarator -> COLON constant_expression .)


state 311

    (218) class_internal_definition -> access_specifier LEFT_CURLY_BRACKET class_member_list . RIGHT_CURLY_BRACKET SEMICOLON
    (220) class_member_list -> class_member_list . class_member
    (221) class_member -> . function_definition
    (222) class_member -> . declaration
    (200) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (201) function_definition -> . declaration_specifiers declarator compound_statement
    (202) function_definition -> . declarator declaration_list compound_statement
    (203) function_definition -> . declarator compound_statement
    (80) declaration -> . declaration_specifiers SEMICOLON
    (81) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . storage_class_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_specifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) declaration_specifiers -> . type_qualifier
    (123) declarator -> . pointer direct_declarator
    (124) declarator -> . direct_declarator
    (92) storage_class_specifier -> . TYPEDEF
    (93) storage_class_specifier -> . AUTO
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . BOOL
    (104) type_specifier -> . struct_specifier
    (105) type_specifier -> . class_definition
    (106) type_specifier -> . TYPE_NAME
    (122) type_qualifier -> . CONST
    (132) pointer -> . MULTIPLY
    (133) pointer -> . MULTIPLY type_qualifier_list
    (134) pointer -> . MULTIPLY pointer
    (135) pointer -> . MULTIPLY type_qualifier_list pointer
    (125) direct_declarator -> . IDENTIFIER
    (126) direct_declarator -> . LEFT_BRACKET declarator RIGHT_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
    (128) direct_declarator -> . direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
    (129) direct_declarator -> . direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET
    (130) direct_declarator -> . direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET
    (131) direct_declarator -> . direct_declarator LEFT_BRACKET RIGHT_BRACKET
    (107) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (108) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (109) struct_specifier -> . STRUCT IDENTIFIER
    (214) class_definition -> . class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
    (215) class_definition -> . class_definition_head
    (210) class_definition_head -> . CLASS
    (211) class_definition_head -> . CLASS INHERITANCE_OP inheritance_specifier_list
    (212) class_definition_head -> . CLASS IDENTIFIER
    (213) class_definition_head -> . CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list

    RIGHT_CURLY_BRACKET shift and go to state 339
    TYPEDEF         shift and go to state 13
    AUTO            shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    TYPE_NAME       shift and go to state 27
    CONST           shift and go to state 28
    MULTIPLY        shift and go to state 29
    IDENTIFIER      shift and go to state 30
    LEFT_BRACKET    shift and go to state 31
    STRUCT          shift and go to state 32
    CLASS           shift and go to state 34

    class_member                   shift and go to state 340
    function_definition            shift and go to state 313
    declaration                    shift and go to state 314
    declaration_specifiers         shift and go to state 6
    declarator                     shift and go to state 7
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12
    struct_specifier               shift and go to state 25
    class_definition               shift and go to state 26
    class_definition_head          shift and go to state 33

state 312

    (219) class_member_list -> class_member .

    RIGHT_CURLY_BRACKET reduce using rule 219 (class_member_list -> class_member .)
    TYPEDEF         reduce using rule 219 (class_member_list -> class_member .)
    AUTO            reduce using rule 219 (class_member_list -> class_member .)
    VOID            reduce using rule 219 (class_member_list -> class_member .)
    CHAR            reduce using rule 219 (class_member_list -> class_member .)
    SHORT           reduce using rule 219 (class_member_list -> class_member .)
    INT             reduce using rule 219 (class_member_list -> class_member .)
    LONG            reduce using rule 219 (class_member_list -> class_member .)
    FLOAT           reduce using rule 219 (class_member_list -> class_member .)
    DOUBLE          reduce using rule 219 (class_member_list -> class_member .)
    SIGNED          reduce using rule 219 (class_member_list -> class_member .)
    UNSIGNED        reduce using rule 219 (class_member_list -> class_member .)
    BOOL            reduce using rule 219 (class_member_list -> class_member .)
    TYPE_NAME       reduce using rule 219 (class_member_list -> class_member .)
    CONST           reduce using rule 219 (class_member_list -> class_member .)
    MULTIPLY        reduce using rule 219 (class_member_list -> class_member .)
    IDENTIFIER      reduce using rule 219 (class_member_list -> class_member .)
    LEFT_BRACKET    reduce using rule 219 (class_member_list -> class_member .)
    STRUCT          reduce using rule 219 (class_member_list -> class_member .)
    CLASS           reduce using rule 219 (class_member_list -> class_member .)


state 313

    (221) class_member -> function_definition .

    RIGHT_CURLY_BRACKET reduce using rule 221 (class_member -> function_definition .)
    TYPEDEF         reduce using rule 221 (class_member -> function_definition .)
    AUTO            reduce using rule 221 (class_member -> function_definition .)
    VOID            reduce using rule 221 (class_member -> function_definition .)
    CHAR            reduce using rule 221 (class_member -> function_definition .)
    SHORT           reduce using rule 221 (class_member -> function_definition .)
    INT             reduce using rule 221 (class_member -> function_definition .)
    LONG            reduce using rule 221 (class_member -> function_definition .)
    FLOAT           reduce using rule 221 (class_member -> function_definition .)
    DOUBLE          reduce using rule 221 (class_member -> function_definition .)
    SIGNED          reduce using rule 221 (class_member -> function_definition .)
    UNSIGNED        reduce using rule 221 (class_member -> function_definition .)
    BOOL            reduce using rule 221 (class_member -> function_definition .)
    TYPE_NAME       reduce using rule 221 (class_member -> function_definition .)
    CONST           reduce using rule 221 (class_member -> function_definition .)
    MULTIPLY        reduce using rule 221 (class_member -> function_definition .)
    IDENTIFIER      reduce using rule 221 (class_member -> function_definition .)
    LEFT_BRACKET    reduce using rule 221 (class_member -> function_definition .)
    STRUCT          reduce using rule 221 (class_member -> function_definition .)
    CLASS           reduce using rule 221 (class_member -> function_definition .)


state 314

    (222) class_member -> declaration .

    RIGHT_CURLY_BRACKET reduce using rule 222 (class_member -> declaration .)
    TYPEDEF         reduce using rule 222 (class_member -> declaration .)
    AUTO            reduce using rule 222 (class_member -> declaration .)
    VOID            reduce using rule 222 (class_member -> declaration .)
    CHAR            reduce using rule 222 (class_member -> declaration .)
    SHORT           reduce using rule 222 (class_member -> declaration .)
    INT             reduce using rule 222 (class_member -> declaration .)
    LONG            reduce using rule 222 (class_member -> declaration .)
    FLOAT           reduce using rule 222 (class_member -> declaration .)
    DOUBLE          reduce using rule 222 (class_member -> declaration .)
    SIGNED          reduce using rule 222 (class_member -> declaration .)
    UNSIGNED        reduce using rule 222 (class_member -> declaration .)
    BOOL            reduce using rule 222 (class_member -> declaration .)
    TYPE_NAME       reduce using rule 222 (class_member -> declaration .)
    CONST           reduce using rule 222 (class_member -> declaration .)
    MULTIPLY        reduce using rule 222 (class_member -> declaration .)
    IDENTIFIER      reduce using rule 222 (class_member -> declaration .)
    LEFT_BRACKET    reduce using rule 222 (class_member -> declaration .)
    STRUCT          reduce using rule 222 (class_member -> declaration .)
    CLASS           reduce using rule 222 (class_member -> declaration .)


state 315

    (206) inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .

    COMMA           reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    LEFT_CURLY_BRACKET reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    TYPEDEF         reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    AUTO            reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    VOID            reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    CHAR            reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    SHORT           reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    INT             reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    LONG            reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    FLOAT           reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    DOUBLE          reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    SIGNED          reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    UNSIGNED        reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    BOOL            reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    TYPE_NAME       reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    CONST           reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    STRUCT          reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    CLASS           reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    SEMICOLON       reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    MULTIPLY        reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    IDENTIFIER      reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    LEFT_BRACKET    reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    LEFT_THIRD_BRACKET reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    RIGHT_BRACKET   reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    COLON           reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)
    )               reduce using rule 206 (inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier .)


state 316

    (161) initializer -> LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET .

    SEMICOLON       reduce using rule 161 (initializer -> LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET .)
    COMMA           reduce using rule 161 (initializer -> LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 161 (initializer -> LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET .)


state 317

    (162) initializer -> LEFT_CURLY_BRACKET initializer_list COMMA . RIGHT_CURLY_BRACKET
    (164) initializer_list -> initializer_list COMMA . initializer
    (160) initializer -> . assignment_expression
    (161) initializer -> . LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET
    (162) initializer -> . LEFT_CURLY_BRACKET initializer_list COMMA RIGHT_CURLY_BRACKET
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    RIGHT_CURLY_BRACKET shift and go to state 341
    LEFT_CURLY_BRACKET shift and go to state 161
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    initializer                    shift and go to state 342
    assignment_expression          shift and go to state 160
    conditional_expression         shift and go to state 94
    unary_expression               shift and go to state 95
    logical_or_expression          shift and go to state 96
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 318

    (172) labeled_statement -> CASE constant_expression COLON statement .

    RIGHT_CURLY_BRACKET reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    IDENTIFIER      reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    LEFT_CURLY_BRACKET reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMICOLON       reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPEDEF         reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    AUTO            reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    VOID            reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR            reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    SHORT           reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    INT             reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    LONG            reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT           reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    DOUBLE          reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    SIGNED          reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    UNSIGNED        reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    BOOL            reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPE_NAME       reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    CONST           reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    STRUCT          reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    CLASS           reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    INC_OP          reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    DEC_OP          reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    BITWISE_AND     reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    MULTIPLY        reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUS            reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUS           reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    BITWISE_NOT     reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    LOGICAL_NOT     reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT_CONSTANT  reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    HEX_CONSTANT    reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    OCT_CONSTANT    reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    INT_CONSTANT    reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR_CONSTANT   reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING_LITERAL  reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    LEFT_BRACKET    reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)
    (               reduce using rule 172 (labeled_statement -> CASE constant_expression COLON statement .)


state 319

    (184) selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET . compound_statement
    (185) selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET . compound_statement ELSE compound_statement
    (174) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (175) compound_statement -> . LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 43

    compound_statement             shift and go to state 343

state 320

    (186) selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET . compound_statement
    (174) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (175) compound_statement -> . LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 43

    compound_statement             shift and go to state 344

state 321

    (187) iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET . compound_statement
    (174) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (175) compound_statement -> . LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 43

    compound_statement             shift and go to state 345

state 322

    (188) iteration_statement -> DO compound_statement WHILE LEFT_BRACKET . expression RIGHT_BRACKET SEMICOLON
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    expression                     shift and go to state 346
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 94
    unary_expression               shift and go to state 95
    logical_or_expression          shift and go to state 96
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 323

    (189) iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement . RIGHT_BRACKET compound_statement
    (190) iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement . expression RIGHT_BRACKET compound_statement
    (77) expression -> . assignment_expression
    (78) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    RIGHT_BRACKET   shift and go to state 347
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    expression                     shift and go to state 348
    assignment_expression          shift and go to state 93
    conditional_expression         shift and go to state 94
    unary_expression               shift and go to state 95
    logical_or_expression          shift and go to state 96
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 324

    (63) conditional_expression -> logical_or_expression QUESTION expression COLON . conditional_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET

    (               shift and go to state 125
    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84

    logical_or_expression          shift and go to state 96
    conditional_expression         shift and go to state 349
    logical_and_expression         shift and go to state 103
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124
    cast_expression                shift and go to state 101
    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    primary_expression             shift and go to state 104

state 325

    (11) postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .

    LEFT_THIRD_BRACKET reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    LEFT_BRACKET    reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    DOT             reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    PTR_OP          reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    INC_OP          reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    DEC_OP          reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    EQ              reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    MUL_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    DIV_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    MOD_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    ADD_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    SUB_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    LEFT_ASSIGN     reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    RIGHT_ASSIGN    reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    AND_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    XOR_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    OR_ASSIGN       reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    MULTIPLY        reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    DIVIDE          reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    MOD             reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    PLUS            reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    MINUS           reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    LEFT_OP         reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    RIGHT_OP        reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    LESS            reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    GREATER         reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    LE_OP           reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    GE_OP           reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    EQ_OP           reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    NE_OP           reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    BITWISE_AND     reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    BITWISE_XOR     reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    BITWISE_OR      reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    LOGICAL_AND_OP  reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    QUESTION        reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    LOGICAL_OR_OP   reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    SEMICOLON       reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    COMMA           reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    RIGHT_THIRD_BRACKET reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    COLON           reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    RIGHT_BRACKET   reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 11 (postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET .)


state 326

    (13) postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .

    LEFT_THIRD_BRACKET reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    DOT             reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    PTR_OP          reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    INC_OP          reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    DEC_OP          reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    EQ              reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    MUL_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    DIV_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    MOD_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    ADD_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    SUB_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    LEFT_ASSIGN     reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    RIGHT_ASSIGN    reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    AND_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    XOR_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    OR_ASSIGN       reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    MULTIPLY        reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    DIVIDE          reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    MOD             reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    PLUS            reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    MINUS           reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    LEFT_OP         reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    RIGHT_OP        reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    LESS            reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    GREATER         reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    LE_OP           reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    GE_OP           reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    EQ_OP           reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    NE_OP           reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    BITWISE_AND     reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    BITWISE_XOR     reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    BITWISE_OR      reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    LOGICAL_AND_OP  reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    QUESTION        reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    LOGICAL_OR_OP   reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    COMMA           reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    RIGHT_THIRD_BRACKET reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    COLON           reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 13 (postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET .)


state 327

    (19) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (64) assignment_expression -> . conditional_expression
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (62) conditional_expression -> . logical_or_expression
    (63) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (20) unary_expression -> . postfix_expression
    (21) unary_expression -> . INC_OP unary_expression
    (22) unary_expression -> . DEC_OP unary_expression
    (23) unary_expression -> . unary_operator cast_expression
    (24) unary_expression -> . SIZEOF unary_expression
    (25) unary_expression -> . SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
    (60) logical_or_expression -> . logical_and_expression
    (61) logical_or_expression -> . logical_or_expression LOGICAL_OR_OP logical_and_expression
    (10) postfix_expression -> . primary_expression
    (11) postfix_expression -> . postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
    (12) postfix_expression -> . postfix_expression LEFT_BRACKET RIGHT_BRACKET
    (13) postfix_expression -> . postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
    (14) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (15) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (16) postfix_expression -> . postfix_expression INC_OP
    (17) postfix_expression -> . postfix_expression DEC_OP
    (26) unary_operator -> . BITWISE_AND
    (27) unary_operator -> . MULTIPLY
    (28) unary_operator -> . PLUS
    (29) unary_operator -> . MINUS
    (30) unary_operator -> . BITWISE_NOT
    (31) unary_operator -> . LOGICAL_NOT
    (58) logical_and_expression -> . inclusive_or_expression
    (59) logical_and_expression -> . logical_and_expression LOGICAL_AND_OP inclusive_or_expression
    (2) primary_expression -> . IDENTIFIER
    (3) primary_expression -> . FLOAT_CONSTANT
    (4) primary_expression -> . HEX_CONSTANT
    (5) primary_expression -> . OCT_CONSTANT
    (6) primary_expression -> . INT_CONSTANT
    (7) primary_expression -> . CHAR_CONSTANT
    (8) primary_expression -> . STRING_LITERAL
    (9) primary_expression -> . LEFT_BRACKET expression RIGHT_BRACKET
    (56) inclusive_or_expression -> . exclusive_or_expression
    (57) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (54) exclusive_or_expression -> . and_expression
    (55) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (52) and_expression -> . equality_expression
    (53) and_expression -> . and_expression BITWISE_AND equality_expression
    (49) equality_expression -> . relational_expression
    (50) equality_expression -> . equality_expression EQ_OP relational_expression
    (51) equality_expression -> . equality_expression NE_OP relational_expression
    (44) relational_expression -> . shift_expression
    (45) relational_expression -> . relational_expression LESS shift_expression
    (46) relational_expression -> . relational_expression GREATER shift_expression
    (47) relational_expression -> . relational_expression LE_OP shift_expression
    (48) relational_expression -> . relational_expression GE_OP shift_expression
    (41) shift_expression -> . additive_expression
    (42) shift_expression -> . shift_expression LEFT_OP additive_expression
    (43) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (38) additive_expression -> . multiplicative_expression
    (39) additive_expression -> . additive_expression PLUS multiplicative_expression
    (40) additive_expression -> . additive_expression MINUS multiplicative_expression
    (34) multiplicative_expression -> . cast_expression
    (35) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (36) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (37) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (32) cast_expression -> . unary_expression
    (33) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 98
    DEC_OP          shift and go to state 99
    SIZEOF          shift and go to state 102
    BITWISE_AND     shift and go to state 105
    MULTIPLY        shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    BITWISE_NOT     shift and go to state 109
    LOGICAL_NOT     shift and go to state 110
    IDENTIFIER      shift and go to state 131
    FLOAT_CONSTANT  shift and go to state 112
    HEX_CONSTANT    shift and go to state 113
    OCT_CONSTANT    shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    CHAR_CONSTANT   shift and go to state 116
    STRING_LITERAL  shift and go to state 117
    LEFT_BRACKET    shift and go to state 84
    (               shift and go to state 125

    assignment_expression          shift and go to state 350
    conditional_expression         shift and go to state 94
    unary_expression               shift and go to state 95
    logical_or_expression          shift and go to state 96
    postfix_expression             shift and go to state 97
    unary_operator                 shift and go to state 100
    cast_expression                shift and go to state 101
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 104
    inclusive_or_expression        shift and go to state 111
    exclusive_or_expression        shift and go to state 118
    and_expression                 shift and go to state 119
    equality_expression            shift and go to state 120
    relational_expression          shift and go to state 121
    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 123
    multiplicative_expression      shift and go to state 124

state 328

    (25) unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .

    EQ              reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    MUL_ASSIGN      reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    DIV_ASSIGN      reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    MOD_ASSIGN      reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    ADD_ASSIGN      reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    SUB_ASSIGN      reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    LEFT_ASSIGN     reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    RIGHT_ASSIGN    reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    AND_ASSIGN      reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    XOR_ASSIGN      reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    OR_ASSIGN       reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    MULTIPLY        reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    DIVIDE          reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    MOD             reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    PLUS            reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    MINUS           reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    LEFT_OP         reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    RIGHT_OP        reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    LESS            reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    GREATER         reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    LE_OP           reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    GE_OP           reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    EQ_OP           reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    NE_OP           reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    BITWISE_AND     reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    BITWISE_XOR     reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    BITWISE_OR      reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    LOGICAL_AND_OP  reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    QUESTION        reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    LOGICAL_OR_OP   reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    COMMA           reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    RIGHT_THIRD_BRACKET reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    COLON           reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 25 (unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET .)


state 329

    (33) cast_expression -> ( type_name ) cast_expression .

    MULTIPLY        reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    DIVIDE          reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    MOD             reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    PLUS            reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    MINUS           reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    LEFT_OP         reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    RIGHT_OP        reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    LESS            reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    GREATER         reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    LE_OP           reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    GE_OP           reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    EQ_OP           reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    NE_OP           reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    BITWISE_AND     reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    BITWISE_XOR     reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    BITWISE_OR      reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    LOGICAL_AND_OP  reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    QUESTION        reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    LOGICAL_OR_OP   reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    SEMICOLON       reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    COMMA           reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    COLON           reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    RIGHT_BRACKET   reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    EQ              reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    MUL_ASSIGN      reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    DIV_ASSIGN      reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    MOD_ASSIGN      reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    ADD_ASSIGN      reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    SUB_ASSIGN      reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    LEFT_ASSIGN     reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    RIGHT_ASSIGN    reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    AND_ASSIGN      reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    XOR_ASSIGN      reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    OR_ASSIGN       reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 33 (cast_expression -> ( type_name ) cast_expression .)


state 330

    (154) direct_abstract_declarator -> direct_abstract_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .

    LEFT_THIRD_BRACKET reduce using rule 154 (direct_abstract_declarator -> direct_abstract_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    LEFT_BRACKET    reduce using rule 154 (direct_abstract_declarator -> direct_abstract_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    COMMA           reduce using rule 154 (direct_abstract_declarator -> direct_abstract_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    RIGHT_BRACKET   reduce using rule 154 (direct_abstract_declarator -> direct_abstract_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)
    )               reduce using rule 154 (direct_abstract_declarator -> direct_abstract_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET .)


state 331

    (155) direct_abstract_declarator -> direct_abstract_declarator LEFT_THIRD_BRACKET constant_expression . RIGHT_THIRD_BRACKET

    RIGHT_THIRD_BRACKET shift and go to state 351


state 332

    (158) direct_abstract_declarator -> direct_abstract_declarator LEFT_BRACKET RIGHT_BRACKET .

    LEFT_THIRD_BRACKET reduce using rule 158 (direct_abstract_declarator -> direct_abstract_declarator LEFT_BRACKET RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 158 (direct_abstract_declarator -> direct_abstract_declarator LEFT_BRACKET RIGHT_BRACKET .)
    COMMA           reduce using rule 158 (direct_abstract_declarator -> direct_abstract_declarator LEFT_BRACKET RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 158 (direct_abstract_declarator -> direct_abstract_declarator LEFT_BRACKET RIGHT_BRACKET .)
    )               reduce using rule 158 (direct_abstract_declarator -> direct_abstract_declarator LEFT_BRACKET RIGHT_BRACKET .)


state 333

    (159) direct_abstract_declarator -> direct_abstract_declarator LEFT_BRACKET parameter_type_list . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 352


state 334

    (151) direct_abstract_declarator -> LEFT_BRACKET abstract_declarator RIGHT_BRACKET .

    LEFT_THIRD_BRACKET reduce using rule 151 (direct_abstract_declarator -> LEFT_BRACKET abstract_declarator RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 151 (direct_abstract_declarator -> LEFT_BRACKET abstract_declarator RIGHT_BRACKET .)
    COMMA           reduce using rule 151 (direct_abstract_declarator -> LEFT_BRACKET abstract_declarator RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 151 (direct_abstract_declarator -> LEFT_BRACKET abstract_declarator RIGHT_BRACKET .)
    )               reduce using rule 151 (direct_abstract_declarator -> LEFT_BRACKET abstract_declarator RIGHT_BRACKET .)


state 335

    (157) direct_abstract_declarator -> LEFT_BRACKET parameter_type_list RIGHT_BRACKET .

    LEFT_THIRD_BRACKET reduce using rule 157 (direct_abstract_declarator -> LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 157 (direct_abstract_declarator -> LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    COMMA           reduce using rule 157 (direct_abstract_declarator -> LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 157 (direct_abstract_declarator -> LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    )               reduce using rule 157 (direct_abstract_declarator -> LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)


state 336

    (153) direct_abstract_declarator -> LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .

    LEFT_THIRD_BRACKET reduce using rule 153 (direct_abstract_declarator -> LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    LEFT_BRACKET    reduce using rule 153 (direct_abstract_declarator -> LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    COMMA           reduce using rule 153 (direct_abstract_declarator -> LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    RIGHT_BRACKET   reduce using rule 153 (direct_abstract_declarator -> LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    )               reduce using rule 153 (direct_abstract_declarator -> LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)


state 337

    (118) struct_declarator_list -> struct_declarator_list COMMA struct_declarator .

    SEMICOLON       reduce using rule 118 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    COMMA           reduce using rule 118 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)


state 338

    (121) struct_declarator -> declarator COLON constant_expression .

    SEMICOLON       reduce using rule 121 (struct_declarator -> declarator COLON constant_expression .)
    COMMA           reduce using rule 121 (struct_declarator -> declarator COLON constant_expression .)


state 339

    (218) class_internal_definition -> access_specifier LEFT_CURLY_BRACKET class_member_list RIGHT_CURLY_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 353


state 340

    (220) class_member_list -> class_member_list class_member .

    RIGHT_CURLY_BRACKET reduce using rule 220 (class_member_list -> class_member_list class_member .)
    TYPEDEF         reduce using rule 220 (class_member_list -> class_member_list class_member .)
    AUTO            reduce using rule 220 (class_member_list -> class_member_list class_member .)
    VOID            reduce using rule 220 (class_member_list -> class_member_list class_member .)
    CHAR            reduce using rule 220 (class_member_list -> class_member_list class_member .)
    SHORT           reduce using rule 220 (class_member_list -> class_member_list class_member .)
    INT             reduce using rule 220 (class_member_list -> class_member_list class_member .)
    LONG            reduce using rule 220 (class_member_list -> class_member_list class_member .)
    FLOAT           reduce using rule 220 (class_member_list -> class_member_list class_member .)
    DOUBLE          reduce using rule 220 (class_member_list -> class_member_list class_member .)
    SIGNED          reduce using rule 220 (class_member_list -> class_member_list class_member .)
    UNSIGNED        reduce using rule 220 (class_member_list -> class_member_list class_member .)
    BOOL            reduce using rule 220 (class_member_list -> class_member_list class_member .)
    TYPE_NAME       reduce using rule 220 (class_member_list -> class_member_list class_member .)
    CONST           reduce using rule 220 (class_member_list -> class_member_list class_member .)
    MULTIPLY        reduce using rule 220 (class_member_list -> class_member_list class_member .)
    IDENTIFIER      reduce using rule 220 (class_member_list -> class_member_list class_member .)
    LEFT_BRACKET    reduce using rule 220 (class_member_list -> class_member_list class_member .)
    STRUCT          reduce using rule 220 (class_member_list -> class_member_list class_member .)
    CLASS           reduce using rule 220 (class_member_list -> class_member_list class_member .)


state 341

    (162) initializer -> LEFT_CURLY_BRACKET initializer_list COMMA RIGHT_CURLY_BRACKET .

    SEMICOLON       reduce using rule 162 (initializer -> LEFT_CURLY_BRACKET initializer_list COMMA RIGHT_CURLY_BRACKET .)
    COMMA           reduce using rule 162 (initializer -> LEFT_CURLY_BRACKET initializer_list COMMA RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 162 (initializer -> LEFT_CURLY_BRACKET initializer_list COMMA RIGHT_CURLY_BRACKET .)


state 342

    (164) initializer_list -> initializer_list COMMA initializer .

    RIGHT_CURLY_BRACKET reduce using rule 164 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 164 (initializer_list -> initializer_list COMMA initializer .)


state 343

    (184) selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .
    (185) selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement . ELSE compound_statement

    RIGHT_CURLY_BRACKET reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    IDENTIFIER      reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    CASE            reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    DEFAULT         reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    LEFT_CURLY_BRACKET reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    SEMICOLON       reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    IF              reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    SWITCH          reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    WHILE           reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    DO              reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    FOR             reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    GOTO            reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    CONTINUE        reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    BREAK           reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    RETURN          reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    TYPEDEF         reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    AUTO            reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    VOID            reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    CHAR            reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    SHORT           reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    INT             reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    LONG            reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    FLOAT           reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    DOUBLE          reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    SIGNED          reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    UNSIGNED        reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    BOOL            reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    TYPE_NAME       reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    CONST           reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    STRUCT          reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    CLASS           reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    INC_OP          reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    DEC_OP          reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    SIZEOF          reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    BITWISE_AND     reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    MULTIPLY        reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    PLUS            reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    MINUS           reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    BITWISE_NOT     reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    LOGICAL_NOT     reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    FLOAT_CONSTANT  reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    HEX_CONSTANT    reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    OCT_CONSTANT    reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    INT_CONSTANT    reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    CHAR_CONSTANT   reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    STRING_LITERAL  reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    LEFT_BRACKET    reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    (               reduce using rule 184 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    ELSE            shift and go to state 354


state 344

    (186) selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .

    RIGHT_CURLY_BRACKET reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    IDENTIFIER      reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    CASE            reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    DEFAULT         reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    LEFT_CURLY_BRACKET reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    SEMICOLON       reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    IF              reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    SWITCH          reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    WHILE           reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    DO              reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    FOR             reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    GOTO            reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    CONTINUE        reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    BREAK           reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    RETURN          reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    TYPEDEF         reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    AUTO            reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    VOID            reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    CHAR            reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    SHORT           reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    INT             reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    LONG            reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    FLOAT           reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    DOUBLE          reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    SIGNED          reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    UNSIGNED        reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    BOOL            reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    TYPE_NAME       reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    CONST           reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    STRUCT          reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    CLASS           reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    INC_OP          reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    DEC_OP          reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    SIZEOF          reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    BITWISE_AND     reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    MULTIPLY        reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    PLUS            reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    MINUS           reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    BITWISE_NOT     reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    LOGICAL_NOT     reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    FLOAT_CONSTANT  reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    HEX_CONSTANT    reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    OCT_CONSTANT    reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    INT_CONSTANT    reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    CHAR_CONSTANT   reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    STRING_LITERAL  reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    LEFT_BRACKET    reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    (               reduce using rule 186 (selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)


state 345

    (187) iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .

    RIGHT_CURLY_BRACKET reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    IDENTIFIER      reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    CASE            reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    DEFAULT         reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    LEFT_CURLY_BRACKET reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    SEMICOLON       reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    IF              reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    SWITCH          reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    WHILE           reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    DO              reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    FOR             reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    GOTO            reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    CONTINUE        reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    BREAK           reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    RETURN          reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    TYPEDEF         reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    AUTO            reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    VOID            reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    CHAR            reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    SHORT           reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    INT             reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    LONG            reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    FLOAT           reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    DOUBLE          reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    SIGNED          reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    UNSIGNED        reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    BOOL            reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    TYPE_NAME       reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    CONST           reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    STRUCT          reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    CLASS           reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    INC_OP          reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    DEC_OP          reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    SIZEOF          reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    BITWISE_AND     reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    MULTIPLY        reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    PLUS            reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    MINUS           reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    BITWISE_NOT     reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    LOGICAL_NOT     reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    FLOAT_CONSTANT  reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    HEX_CONSTANT    reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    OCT_CONSTANT    reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    INT_CONSTANT    reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    CHAR_CONSTANT   reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    STRING_LITERAL  reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    LEFT_BRACKET    reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)
    (               reduce using rule 187 (iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement .)


state 346

    (188) iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression . RIGHT_BRACKET SEMICOLON
    (78) expression -> expression . COMMA assignment_expression

    RIGHT_BRACKET   shift and go to state 355
    COMMA           shift and go to state 169


state 347

    (189) iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET . compound_statement
    (174) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (175) compound_statement -> . LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 43

    compound_statement             shift and go to state 356

state 348

    (190) iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression . RIGHT_BRACKET compound_statement
    (78) expression -> expression . COMMA assignment_expression

    RIGHT_BRACKET   shift and go to state 357
    COMMA           shift and go to state 169


state 349

    (63) conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .

    SEMICOLON       reduce using rule 63 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    COMMA           reduce using rule 63 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    RIGHT_THIRD_BRACKET reduce using rule 63 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    COLON           reduce using rule 63 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    RIGHT_BRACKET   reduce using rule 63 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 63 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)


state 350

    (19) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RIGHT_BRACKET   reduce using rule 19 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 19 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 351

    (155) direct_abstract_declarator -> direct_abstract_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .

    LEFT_THIRD_BRACKET reduce using rule 155 (direct_abstract_declarator -> direct_abstract_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    LEFT_BRACKET    reduce using rule 155 (direct_abstract_declarator -> direct_abstract_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    COMMA           reduce using rule 155 (direct_abstract_declarator -> direct_abstract_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    RIGHT_BRACKET   reduce using rule 155 (direct_abstract_declarator -> direct_abstract_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)
    )               reduce using rule 155 (direct_abstract_declarator -> direct_abstract_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET .)


state 352

    (159) direct_abstract_declarator -> direct_abstract_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .

    LEFT_THIRD_BRACKET reduce using rule 159 (direct_abstract_declarator -> direct_abstract_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 159 (direct_abstract_declarator -> direct_abstract_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    COMMA           reduce using rule 159 (direct_abstract_declarator -> direct_abstract_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 159 (direct_abstract_declarator -> direct_abstract_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)
    )               reduce using rule 159 (direct_abstract_declarator -> direct_abstract_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET .)


state 353

    (218) class_internal_definition -> access_specifier LEFT_CURLY_BRACKET class_member_list RIGHT_CURLY_BRACKET SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 218 (class_internal_definition -> access_specifier LEFT_CURLY_BRACKET class_member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    PRIVATE         reduce using rule 218 (class_internal_definition -> access_specifier LEFT_CURLY_BRACKET class_member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    PUBLIC          reduce using rule 218 (class_internal_definition -> access_specifier LEFT_CURLY_BRACKET class_member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    PROTECTED       reduce using rule 218 (class_internal_definition -> access_specifier LEFT_CURLY_BRACKET class_member_list RIGHT_CURLY_BRACKET SEMICOLON .)


state 354

    (185) selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE . compound_statement
    (174) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (175) compound_statement -> . LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 43

    compound_statement             shift and go to state 358

state 355

    (188) iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 359


state 356

    (189) iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .

    RIGHT_CURLY_BRACKET reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    IDENTIFIER      reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    CASE            reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    DEFAULT         reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    LEFT_CURLY_BRACKET reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    SEMICOLON       reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    IF              reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    SWITCH          reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    WHILE           reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    DO              reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    FOR             reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    GOTO            reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    CONTINUE        reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    BREAK           reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    RETURN          reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    TYPEDEF         reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    AUTO            reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    VOID            reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    CHAR            reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    SHORT           reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    INT             reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    LONG            reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    FLOAT           reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    DOUBLE          reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    SIGNED          reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    UNSIGNED        reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    BOOL            reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    TYPE_NAME       reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    CONST           reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    STRUCT          reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    CLASS           reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    INC_OP          reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    DEC_OP          reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    SIZEOF          reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    BITWISE_AND     reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    MULTIPLY        reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    PLUS            reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    MINUS           reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    BITWISE_NOT     reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    LOGICAL_NOT     reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    FLOAT_CONSTANT  reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    HEX_CONSTANT    reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    OCT_CONSTANT    reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    INT_CONSTANT    reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    CHAR_CONSTANT   reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    STRING_LITERAL  reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    LEFT_BRACKET    reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)
    (               reduce using rule 189 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement .)


state 357

    (190) iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET . compound_statement
    (174) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (175) compound_statement -> . LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 43

    compound_statement             shift and go to state 360

state 358

    (185) selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .

    RIGHT_CURLY_BRACKET reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    IDENTIFIER      reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    CASE            reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    DEFAULT         reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    LEFT_CURLY_BRACKET reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    SEMICOLON       reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    IF              reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    SWITCH          reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    WHILE           reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    DO              reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    FOR             reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    GOTO            reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    CONTINUE        reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    BREAK           reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    RETURN          reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    TYPEDEF         reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    AUTO            reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    VOID            reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    CHAR            reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    SHORT           reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    INT             reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    LONG            reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    FLOAT           reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    DOUBLE          reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    SIGNED          reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    UNSIGNED        reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    BOOL            reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    TYPE_NAME       reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    CONST           reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    STRUCT          reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    CLASS           reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    INC_OP          reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    DEC_OP          reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    SIZEOF          reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    BITWISE_AND     reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    MULTIPLY        reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    PLUS            reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    MINUS           reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    BITWISE_NOT     reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    LOGICAL_NOT     reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    FLOAT_CONSTANT  reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    HEX_CONSTANT    reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    OCT_CONSTANT    reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    INT_CONSTANT    reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    CHAR_CONSTANT   reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    STRING_LITERAL  reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    LEFT_BRACKET    reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)
    (               reduce using rule 185 (selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement .)


state 359

    (188) iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    IDENTIFIER      reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    CASE            reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    DEFAULT         reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    IF              reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    SWITCH          reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    WHILE           reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    DO              reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    FOR             reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    GOTO            reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    CONTINUE        reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    BREAK           reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    RETURN          reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    TYPEDEF         reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    AUTO            reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    VOID            reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    CHAR            reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    SHORT           reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    INT             reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    LONG            reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    FLOAT           reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    DOUBLE          reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    SIGNED          reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    UNSIGNED        reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    BOOL            reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    TYPE_NAME       reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    STRUCT          reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    CLASS           reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    INC_OP          reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    DEC_OP          reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    SIZEOF          reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    BITWISE_AND     reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    MULTIPLY        reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    PLUS            reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    MINUS           reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    BITWISE_NOT     reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    LOGICAL_NOT     reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    FLOAT_CONSTANT  reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    HEX_CONSTANT    reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    OCT_CONSTANT    reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    INT_CONSTANT    reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    CHAR_CONSTANT   reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    STRING_LITERAL  reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)
    (               reduce using rule 188 (iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON .)


state 360

    (190) iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .

    RIGHT_CURLY_BRACKET reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    IDENTIFIER      reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    CASE            reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    DEFAULT         reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    LEFT_CURLY_BRACKET reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    SEMICOLON       reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    IF              reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    SWITCH          reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    WHILE           reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    DO              reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    FOR             reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    GOTO            reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    CONTINUE        reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    BREAK           reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    RETURN          reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    TYPEDEF         reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    AUTO            reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    VOID            reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    CHAR            reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    SHORT           reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    INT             reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    LONG            reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    FLOAT           reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    DOUBLE          reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    SIGNED          reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    UNSIGNED        reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    BOOL            reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    TYPE_NAME       reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    CONST           reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    STRUCT          reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    CLASS           reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    INC_OP          reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    DEC_OP          reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    SIZEOF          reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    BITWISE_AND     reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    MULTIPLY        reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    PLUS            reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    MINUS           reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    BITWISE_NOT     reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    LOGICAL_NOT     reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    FLOAT_CONSTANT  reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    HEX_CONSTANT    reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    OCT_CONSTANT    reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    INT_CONSTANT    reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    CHAR_CONSTANT   reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    STRING_LITERAL  reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    LEFT_BRACKET    reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)
    (               reduce using rule 190 (iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENTIFIER in state 34 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 154 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 250 resolved as shift
