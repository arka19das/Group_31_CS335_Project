Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> primary_expression
Rule 1     primary_expression -> IDENTIFIER
Rule 2     primary_expression -> FLOAT_CONSTANT
Rule 3     primary_expression -> HEX_CONSTANT
Rule 4     primary_expression -> OCT_CONSTANT
Rule 5     primary_expression -> INT_CONSTANT
Rule 6     primary_expression -> CHAR_CONSTANT
Rule 7     primary_expression -> STRING_LITERAL
Rule 8     primary_expression -> LEFT_BRACKET expression RIGHT_BRACKET
Rule 9     postfix_expression -> primary_expression
Rule 10    postfix_expression -> postfix_expression LEFT_THIRD_BRACKET expression RIGHT_THIRD_BRACKET
Rule 11    postfix_expression -> postfix_expression LEFT_BRACKET RIGHT_BRACKET
Rule 12    postfix_expression -> postfix_expression LEFT_BRACKET argument_expression_list RIGHT_BRACKET
Rule 13    postfix_expression -> postfix_expression DOT IDENTIFIER
Rule 14    postfix_expression -> postfix_expression PTR_OP IDENTIFIER
Rule 15    postfix_expression -> postfix_expression INC_OP
Rule 16    postfix_expression -> postfix_expression DEC_OP
Rule 17    argument_expression_list -> assignment_expression
Rule 18    argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 19    unary_expression -> postfix_expression
Rule 20    unary_expression -> INC_OP unary_expression
Rule 21    unary_expression -> DEC_OP unary_expression
Rule 22    unary_expression -> unary_operator cast_expression
Rule 23    unary_expression -> SIZEOF unary_expression
Rule 24    unary_expression -> SIZEOF LEFT_BRACKET type_name RIGHT_BRACKET
Rule 25    unary_operator -> BITWISE_AND
Rule 26    unary_operator -> MULTIPLY
Rule 27    unary_operator -> PLUS
Rule 28    unary_operator -> MINUS
Rule 29    unary_operator -> BITWISE_NOT
Rule 30    unary_operator -> LOGICAL_NOT
Rule 31    cast_expression -> unary_expression
Rule 32    cast_expression -> ( type_name ) cast_expression
Rule 33    multiplicative_expression -> cast_expression
Rule 34    multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression
Rule 35    multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 36    multiplicative_expression -> multiplicative_expression MOD cast_expression
Rule 37    additive_expression -> multiplicative_expression
Rule 38    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 39    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 40    shift_expression -> additive_expression
Rule 41    shift_expression -> shift_expression LEFT_OP additive_expression
Rule 42    shift_expression -> shift_expression RIGHT_OP additive_expression
Rule 43    relational_expression -> shift_expression
Rule 44    relational_expression -> relational_expression LESS shift_expression
Rule 45    relational_expression -> relational_expression GREATER shift_expression
Rule 46    relational_expression -> relational_expression LE_OP shift_expression
Rule 47    relational_expression -> relational_expression GE_OP shift_expression
Rule 48    equality_expression -> relational_expression
Rule 49    equality_expression -> equality_expression EQ_OP relational_expression
Rule 50    equality_expression -> equality_expression NE_OP relational_expression
Rule 51    and_expression -> equality_expression
Rule 52    and_expression -> and_expression BITWISE_AND equality_expression
Rule 53    exclusive_or_expression -> and_expression
Rule 54    exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression
Rule 55    inclusive_or_expression -> exclusive_or_expression
Rule 56    inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression
Rule 57    logical_and_expression -> inclusive_or_expression
Rule 58    logical_and_expression -> logical_and_expression LOGICAL_AND_OP inclusive_or_expression
Rule 59    logical_or_expression -> logical_and_expression
Rule 60    logical_or_expression -> logical_or_expression LOGICAL_OR_OP logical_and_expression
Rule 61    conditional_expression -> logical_or_expression
Rule 62    conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression
Rule 63    assignment_expression -> conditional_expression
Rule 64    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 65    assignment_operator -> EQ
Rule 66    assignment_operator -> MUL_ASSIGN
Rule 67    assignment_operator -> DIV_ASSIGN
Rule 68    assignment_operator -> MOD_ASSIGN
Rule 69    assignment_operator -> ADD_ASSIGN
Rule 70    assignment_operator -> SUB_ASSIGN
Rule 71    assignment_operator -> LEFT_ASSIGN
Rule 72    assignment_operator -> RIGHT_ASSIGN
Rule 73    assignment_operator -> AND_ASSIGN
Rule 74    assignment_operator -> XOR_ASSIGN
Rule 75    assignment_operator -> OR_ASSIGN
Rule 76    expression -> assignment_expression
Rule 77    expression -> expression COMMA assignment_expression
Rule 78    constant_expression -> conditional_expression
Rule 79    declaration -> declaration_specifiers SEMICOLON
Rule 80    declaration -> declaration_specifiers init_declarator_list SEMICOLON
Rule 81    declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule 82    declaration_specifiers -> storage_class_specifier
Rule 83    declaration_specifiers -> type_specifier declaration_specifiers
Rule 84    declaration_specifiers -> type_specifier
Rule 85    declaration_specifiers -> type_qualifier declaration_specifiers
Rule 86    declaration_specifiers -> type_qualifier
Rule 87    init_declarator_list -> init_declarator
Rule 88    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 89    init_declarator -> declarator
Rule 90    init_declarator -> declarator EQ initializer
Rule 91    storage_class_specifier -> TYPEDEF
Rule 92    storage_class_specifier -> AUTO
Rule 93    type_specifier -> VOID
Rule 94    type_specifier -> CHAR
Rule 95    type_specifier -> SHORT
Rule 96    type_specifier -> INT
Rule 97    type_specifier -> LONG
Rule 98    type_specifier -> FLOAT
Rule 99    type_specifier -> DOUBLE
Rule 100   type_specifier -> SIGNED
Rule 101   type_specifier -> UNSIGNED
Rule 102   type_specifier -> BOOL
Rule 103   type_specifier -> struct_specifier
Rule 104   type_specifier -> class_definition
Rule 105   type_specifier -> TYPE_NAME
Rule 106   struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
Rule 107   struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
Rule 108   struct_specifier -> STRUCT IDENTIFIER
Rule 109   struct_declaration_list -> struct_declaration
Rule 110   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 111   struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON
Rule 112   specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 113   specifier_qualifier_list -> type_specifier
Rule 114   specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 115   specifier_qualifier_list -> type_qualifier
Rule 116   struct_declarator_list -> struct_declarator
Rule 117   struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 118   struct_declarator -> declarator
Rule 119   struct_declarator -> COLON constant_expression
Rule 120   struct_declarator -> declarator COLON constant_expression
Rule 121   type_qualifier -> CONST
Rule 122   declarator -> pointer direct_declarator
Rule 123   declarator -> direct_declarator
Rule 124   direct_declarator -> IDENTIFIER
Rule 125   direct_declarator -> LEFT_BRACKET declarator RIGHT_BRACKET
Rule 126   direct_declarator -> direct_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
Rule 127   direct_declarator -> direct_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
Rule 128   direct_declarator -> direct_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET
Rule 129   direct_declarator -> direct_declarator LEFT_BRACKET identifier_list RIGHT_BRACKET
Rule 130   direct_declarator -> direct_declarator LEFT_BRACKET RIGHT_BRACKET
Rule 131   pointer -> MULTIPLY
Rule 132   pointer -> MULTIPLY type_qualifier_list
Rule 133   pointer -> MULTIPLY pointer
Rule 134   pointer -> MULTIPLY type_qualifier_list pointer
Rule 135   type_qualifier_list -> type_qualifier
Rule 136   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 137   parameter_type_list -> parameter_list
Rule 138   parameter_list -> parameter_declaration
Rule 139   parameter_list -> parameter_list COMMA parameter_declaration
Rule 140   parameter_declaration -> declaration_specifiers declarator
Rule 141   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 142   parameter_declaration -> declaration_specifiers
Rule 143   identifier_list -> IDENTIFIER
Rule 144   identifier_list -> identifier_list COMMA IDENTIFIER
Rule 145   type_name -> specifier_qualifier_list
Rule 146   type_name -> specifier_qualifier_list abstract_declarator
Rule 147   abstract_declarator -> pointer
Rule 148   abstract_declarator -> direct_abstract_declarator
Rule 149   abstract_declarator -> pointer direct_abstract_declarator
Rule 150   direct_abstract_declarator -> LEFT_BRACKET abstract_declarator RIGHT_BRACKET
Rule 151   direct_abstract_declarator -> LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
Rule 152   direct_abstract_declarator -> LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
Rule 153   direct_abstract_declarator -> direct_abstract_declarator LEFT_THIRD_BRACKET RIGHT_THIRD_BRACKET
Rule 154   direct_abstract_declarator -> direct_abstract_declarator LEFT_THIRD_BRACKET constant_expression RIGHT_THIRD_BRACKET
Rule 155   direct_abstract_declarator -> LEFT_BRACKET RIGHT_BRACKET
Rule 156   direct_abstract_declarator -> LEFT_BRACKET parameter_type_list RIGHT_BRACKET
Rule 157   direct_abstract_declarator -> direct_abstract_declarator LEFT_BRACKET RIGHT_BRACKET
Rule 158   direct_abstract_declarator -> direct_abstract_declarator LEFT_BRACKET parameter_type_list RIGHT_BRACKET
Rule 159   initializer -> assignment_expression
Rule 160   initializer -> LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET
Rule 161   initializer -> LEFT_CURLY_BRACKET initializer_list COMMA RIGHT_CURLY_BRACKET
Rule 162   initializer_list -> initializer
Rule 163   initializer_list -> initializer_list COMMA initializer
Rule 164   statement -> labeled_statement
Rule 165   statement -> compound_statement
Rule 166   statement -> expression_statement
Rule 167   statement -> selection_statement
Rule 168   statement -> iteration_statement
Rule 169   statement -> jump_statement
Rule 170   labeled_statement -> IDENTIFIER COLON statement
Rule 171   labeled_statement -> CASE constant_expression COLON statement
Rule 172   labeled_statement -> DEFAULT COLON statement
Rule 173   compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
Rule 174   compound_statement -> LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET
Rule 175   block_item_list -> block_item
Rule 176   block_item_list -> block_item_list block_item
Rule 177   block_item -> declaration
Rule 178   block_item -> statement
Rule 179   expression_statement -> SEMICOLON
Rule 180   expression_statement -> expression SEMICOLON
Rule 181   selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement
Rule 182   selection_statement -> IF LEFT_BRACKET expression RIGHT_BRACKET compound_statement ELSE compound_statement
Rule 183   selection_statement -> SWITCH LEFT_BRACKET expression RIGHT_BRACKET compound_statement
Rule 184   iteration_statement -> WHILE LEFT_BRACKET expression RIGHT_BRACKET compound_statement
Rule 185   iteration_statement -> DO compound_statement WHILE LEFT_BRACKET expression RIGHT_BRACKET SEMICOLON
Rule 186   iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement RIGHT_BRACKET compound_statement
Rule 187   iteration_statement -> FOR LEFT_BRACKET expression_statement expression_statement expression RIGHT_BRACKET compound_statement
Rule 188   jump_statement -> GOTO IDENTIFIER SEMICOLON
Rule 189   jump_statement -> CONTINUE SEMICOLON
Rule 190   jump_statement -> BREAK SEMICOLON
Rule 191   jump_statement -> RETURN SEMICOLON
Rule 192   jump_statement -> RETURN expression SEMICOLON
Rule 193   translation_unit -> external_declaration
Rule 194   translation_unit -> translation_unit external_declaration
Rule 195   external_declaration -> function_definition
Rule 196   external_declaration -> declaration
Rule 197   function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 198   function_definition -> declaration_specifiers declarator compound_statement
Rule 199   function_definition -> declarator declaration_list compound_statement
Rule 200   function_definition -> declarator compound_statement
Rule 201   inheritance_specifier -> access_specifier IDENTIFIER
Rule 202   inheritance_specifier_list -> inheritance_specifier
Rule 203   inheritance_specifier_list -> inheritance_specifier_list COMMA inheritance_specifier
Rule 204   access_specifier -> PRIVATE
Rule 205   access_specifier -> PUBLIC
Rule 206   access_specifier -> PROTECTED
Rule 207   class_definition_head -> CLASS
Rule 208   class_definition_head -> CLASS INHERITANCE_OP inheritance_specifier_list
Rule 209   class_definition_head -> CLASS IDENTIFIER
Rule 210   class_definition_head -> CLASS IDENTIFIER INHERITANCE_OP inheritance_specifier_list
Rule 211   class_definition -> class_definition_head LEFT_CURLY_BRACKET class_internal_definition_list RIGHT_CURLY_BRACKET
Rule 212   class_definition -> class_definition_head
Rule 213   class_internal_definition_list -> class_internal_definition
Rule 214   class_internal_definition_list -> class_internal_definition_list class_internal_definition
Rule 215   class_internal_definition -> access_specifier LEFT_CURLY_BRACKET class_member_list RIGHT_CURLY_BRACKET SEMICOLON
Rule 216   class_member_list -> class_member
Rule 217   class_member_list -> class_member_list class_member
Rule 218   class_member -> function_definition
Rule 219   class_member -> declaration

Terminals, with rules where they appear

(                    : 32
)                    : 32
ADD_ASSIGN           : 69
AND_ASSIGN           : 73
AUTO                 : 92
BITWISE_AND          : 25 52
BITWISE_NOT          : 29
BITWISE_OR           : 56
BITWISE_XOR          : 54
BOOL                 : 102
BREAK                : 190
CASE                 : 171
CHAR                 : 94
CHAR_CONSTANT        : 6
CLASS                : 207 208 209 210
COLON                : 62 119 120 170 171 172
COMMA                : 18 77 88 117 139 144 161 163 203
CONST                : 121
CONTINUE             : 189
DEC_OP               : 16 21
DEFAULT              : 172
DIVIDE               : 35
DIV_ASSIGN           : 67
DO                   : 185
DOT                  : 13
DOUBLE               : 99
ELSE                 : 182
EQ                   : 65 90
EQ_OP                : 49
FLOAT                : 98
FLOAT_CONSTANT       : 2
FOR                  : 186 187
GE_OP                : 47
GOTO                 : 188
GREATER              : 45
HEX_CONSTANT         : 3
IDENTIFIER           : 1 13 14 106 108 124 143 144 170 188 201 209 210
IF                   : 181 182
INC_OP               : 15 20
INHERITANCE_OP       : 208 210
INT                  : 96
INT_CONSTANT         : 5
LEFT_ASSIGN          : 71
LEFT_BRACKET         : 8 11 12 24 125 128 129 130 150 155 156 157 158 181 182 183 184 185 186 187
LEFT_CURLY_BRACKET   : 106 107 160 161 173 174 211 215
LEFT_OP              : 41
LEFT_THIRD_BRACKET   : 10 126 127 151 152 153 154
LESS                 : 44
LE_OP                : 46
LOGICAL_AND_OP       : 58
LOGICAL_NOT          : 30
LOGICAL_OR_OP        : 60
LONG                 : 97
MINUS                : 28 39
MOD                  : 36
MOD_ASSIGN           : 68
MULTIPLY             : 26 34 131 132 133 134
MUL_ASSIGN           : 66
NE_OP                : 50
OCT_CONSTANT         : 4
OR_ASSIGN            : 75
PLUS                 : 27 38
PRIVATE              : 204
PROTECTED            : 206
PTR_OP               : 14
PUBLIC               : 205
QUESTION             : 62
RETURN               : 191 192
RIGHT_ASSIGN         : 72
RIGHT_BRACKET        : 8 11 12 24 125 128 129 130 150 155 156 157 158 181 182 183 184 185 186 187
RIGHT_CURLY_BRACKET  : 106 107 160 161 173 174 211 215
RIGHT_OP             : 42
RIGHT_THIRD_BRACKET  : 10 126 127 151 152 153 154
SEMICOLON            : 79 80 111 179 180 185 188 189 190 191 192 215
SHORT                : 95
SIGNED               : 100
SIZEOF               : 23 24
STRING_LITERAL       : 7
STRUCT               : 106 107 108
SUB_ASSIGN           : 70
SWITCH               : 183
TYPEDEF              : 91
UNSIGNED             : 101
VOID                 : 93
WHILE                : 184 185
XOR_ASSIGN           : 74
error                : 

Nonterminals, with rules where they appear

TYPE_NAME            : 105
abstract_declarator  : 141 146 150
access_specifier     : 201 215
additive_expression  : 38 39 40 41 42
and_expression       : 52 53 54
argument_expression_list : 12 18
assignment_expression : 17 18 64 76 77 159
assignment_operator  : 64
block_item           : 175 176
block_item_list      : 174 176
cast_expression      : 22 32 33 34 35 36
class_definition     : 104
class_definition_head : 211 212
class_internal_definition : 213 214
class_internal_definition_list : 211 214
class_member         : 216 217
class_member_list    : 215 217
compound_statement   : 165 181 182 182 183 184 185 186 187 197 198 199 200
conditional_expression : 62 63 78
constant_expression  : 119 120 126 152 154 171
declaration          : 177 196 219
declaration_list     : 197 199
declaration_specifiers : 79 80 81 83 85 140 141 142 197 198
declarator           : 89 90 118 120 125 140 197 198 199 200
direct_abstract_declarator : 148 149 153 154 157 158
direct_declarator    : 122 123 126 127 128 129 130
equality_expression  : 49 50 51 52
exclusive_or_expression : 54 55 56
expression           : 8 10 62 77 180 181 182 183 184 185 187 192
expression_statement : 166 186 186 187 187
external_declaration : 193 194
function_definition  : 195 218
identifier_list      : 129 144
inclusive_or_expression : 56 57 58
inheritance_specifier : 202 203
inheritance_specifier_list : 203 208 210
init_declarator      : 87 88
init_declarator_list : 80 88
initializer          : 90 162 163
initializer_list     : 160 161 163
iteration_statement  : 168
jump_statement       : 169
labeled_statement    : 164
logical_and_expression : 58 59 60
logical_or_expression : 60 61 62
multiplicative_expression : 34 35 36 37 38 39
parameter_declaration : 138 139
parameter_list       : 137 139
parameter_type_list  : 128 156 158
pointer              : 122 133 134 147 149
postfix_expression   : 10 11 12 13 14 15 16 19
primary_expression   : 9 0
relational_expression : 44 45 46 47 48 49 50
selection_statement  : 167
shift_expression     : 41 42 43 44 45 46 47
specifier_qualifier_list : 111 112 114 145 146
statement            : 170 171 172 178
storage_class_specifier : 81 82
struct_declaration   : 109 110
struct_declaration_list : 106 107 110
struct_declarator    : 116 117
struct_declarator_list : 111 117
struct_specifier     : 103
translation_unit     : 194
type_name            : 24 32
type_qualifier       : 85 86 114 115 135 136
type_qualifier_list  : 132 134 136
type_specifier       : 83 84 112 113
unary_expression     : 20 21 23 31 64
unary_operator       : 22

